"""

from __future__ import print_function
from __future__ import division
from past.utils import old_div
import numpy
import copy
import global_def

import unittest
import os
import shutil
from sparx.libpy import utilities as fu

ABSOLUTE_PATH = os.path.dirname(os.path.realpath(__file__))
print(ABSOLUTE_PATH)


class MyTestCase(unittest.TestCase):
   def test_angular_distribution_returns_same_results(self):

       params_file = ABSOLUTE_PATH + "/final_params_032.txt"
       output_folder_new = "Angular_distribution_New"
       output_folder_old = "Angular_distribution_Old"
       prefix = "angdis"
       method = "P"
       pixel_size = 1.14
       delta = 3.75
       symmetry = "icos"
       box_size = 320
       particle_radius = 140
       dpi  = 72

       if os.path.isdir(output_folder_new):
           shutil.rmtree(output_folder_new)

       if os.path.isdir(output_folder_old):
           shutil.rmtree(output_folder_old)

       import time
       start = time.time()
       return_new = fu.angular_distribution(params_file, output_folder_new, prefix, method, \
                                    pixel_size, delta, symmetry, box_size,particle_radius, \
                                            dpi, do_print=True)
       print(time.time()-start)
       start = time.time()
       return_old = fu.angular_distribution_old(params_file, output_folder_old, prefix, method, \
                                    pixel_size, delta, symmetry, box_size, particle_radius,\
                                            dpi, do_print=True)
       print(time.time() - start)
       self.assertEqual(return_new, return_old)




if __name__ == '__main__':
    unittest.main()
"""

from __future__ import print_function
from __future__ import division

from os import path, mkdir
from mpi import *

from numpy import allclose, array_equal
from numpy import full as numpy_full
from numpy import float32 as numpy_float32

from libpy_py3 import sp_utilities as oldfu
from sphire.libpy import sp_utilities as fu

from sphire.libpy import sp_global_def
from sphire.libpy.sp_fundamentals import symclass as foundamental_symclasss

# mpi_init(0, [])
sp_global_def.BATCH = True
sp_global_def.MPI = False

# ABSOLUTE_PATH = path.dirname(path.realpath(__file__))
ABSOLUTE_PATH_TO_RESOURCES = "resources_tests/pickles/"

import unittest
from tests.test_module import (
    get_arg_from_pickle_file,
    get_real_data,
    remove_list_of_file,
    returns_values_in_file,
    remove_dir,
    IMAGE_2D,
    IMAGE_2D_REFERENCE,
    IMAGE_3D,
    IMAGE_BLANK_2D,
    IMAGE_BLANK_3D,
)

# ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,


from EMAN2_cppwrap import EMData
from EMAN2 import EMNumPy
from copy import deepcopy
from json import load as json_load

try:
    from StringIO import StringIO  # python2 case
except:
    from io import (
        StringIO,
    )  # python3 case. You will get an error because 'sys.stdout.write(msg)' presents in the library not in the test!!
import sys

TOLERANCE = 0.0075
TRACKER = (
    0
)  # get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/user_functions.do_volume_mask"))[0][0][1] # cannot use it. search another one

from sphire.libpy import sp_morphology
import sys
sys.modules['sp_morphology'] = sp_morphology

"""
There are some tests where I have to write to a file. At the end of the tests, sometimes at the end of each tests, I remove them.
You cannot run these tests multipkle times in parallel (i.e: use only "-np 1"

WHAT IS MISSING:
0) in all the cases where the input file is an image. I did not test the case with a complex image. I was not able to generate it
1) because mpi stuff are involved:
    -) send_string_to_all
    -) estimate_3D_center_MPI
2) drop_image --> It writing an image on the hdf. how can I test it
3) get_symt: how look into a Transform obj ?
4) unpack_message --> cannot insert a valid input. See in the code for more deatil
5) Test_getindexdata --> there is no unittest for it
6) make_v_stack_header --> no idea how fill the params
7) get_params3D --> I need an img woth 'xform.align3d' key
8) set_params3D --> I need an img woth 'xform.align3d' key


RESULT AND KNOWN ISSUES
Some compatibility tests for the following functions fail!!!
1) even_angles --> default value with P method leads to a deadlock
2) even_angles_cd --> default value with P method leads to a deadlock
3) get_image_data --> with EMData() as input value the results has the first value a random value
4) Test_balance_angular_distribution --> some compatibility tests fail

IN THESE TESS COULD BE A BUG:
1) center_2D --> with center_method=4 (or 7) parameters 'self_defined_reference' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
2) model_circle --> with negative radius we have a results (already strange), anyway it should not have positive value
3) Test_angular_histogram:test_with_sym_oct_method_S --> BUG in sp_fundamentals.py -->symmetry_neighbors --> local variable 'neighbors' referenced before assignment
        It seems to be a problem with 'sym=oct1'

In these tests there is a strange behavior:
1) Test_bcast_list_to_all
    -) test_with_empty_list --> the compatibility test in the nosetests feiled
    -) test_myid_equal_sourcenode_and_wrong_type_in_listsender_returns_ValueError --> the  exception is not raised
"""

"""
pickle files stored under smb://billy.storage.mpi-dortmund.mpg.de/abt3/group/agraunser/transfer/Adnan/pickle files
"""

"""
There are some opened issues in:
2) even_angles --> default value with P method leads to a deadlock
3) even_angles_cd --> default value with P method leads to a deadlock
4) find --> it seems to be not used
10) write_headers --> in .bdb case are not working under linux. Take a look to the code for seeing their comments
        --> if the file exists it overwrites it without a warning message. will we have to insert this message?
11) write_header --> I do not know how test the .bdb case. Hier contrary to write_headers it works under linux
12) file_type --> it is not giving us the filetype of the file. it is just parsing the name of the file and giving back the extension of the file
            Is this the real purpouse of this function?
13) set_params2D --> if you use xform=xform.align3d it works, but the output is somethiong that we do not really want to have. It does not set the values
                --> since set_params_proj has the same kind of input we are not able to discriminate them when we call the function. anyway It does not set the values
14) set_params3D --> if you use xform=xform.align2d it works, but the output is somethiong that we do not really want to have. It does not set the values
15) set_params_proj --> I need an image with key 'xform.projection' to finish these tests because the associated pickle file has not it --> dovrebbero essere quelle in pickle files/multi_shc/multi_shc.ali3d_multishc
16) The following functions concern the sending data in the process and are difficult or even not possible to test deeply
    -) reduce_EMData_to_root
    -) bcast_compacted_EMData_all_to_all
    -) gather_compacted_EMData_to_root
    -) bcast_EMData_to_all
    -) send_EMData
    -) recv_EMData
    -) recv_attr_dict
    -) send_attr_dict
    -) wrap_mpi_send
    -) wrap_mpi_recv
    -) wrap_mpi_gatherv
    -) wrap_mpi_split
18) 'update_tag' returns, in both of the implementations 'return 123456'. i'm not going to test it
20) sample_down_1D_curve --> I need a file with the curve values
21) test_print_upper_triangular_matrix --> which variable is the third parameter??")
22) get_shrink_data_huang,recons_mref --> the file gave me does not work see the reasons in the test
23) do_two_way_comparison -->  I cannot run the Adnan reference test. I had to insert random data --> I cannot test it deeply,
24) Test_get_stat_proj.test_myid_not_the_same_value_as_main_Node_TypeError is it due to a bad implemntation?

"""


""" start: new in sphire 1.3
There are some opened issues in:
1) center_2D -->
    a) with a 3D image should it work?
    b) with center_method=4 (or 7) IF the parameters 'self_defined_reference' , it will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it
        is a boolean
16) The following functions concern the sending data in the process and are difficult or even not possible to test deeply
    -) gather_EMData
    -) send_string_to_all
    -) wrap_mpi_split_shared_memory
"""


class Test_makerelpath(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.makerelpath()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.makerelpath()
        self.assertEqual(
            str(cm_new.exception), "makerelpath() missing 2 required positional arguments: 'p1' and 'p2'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_makerelpath(self):
        return_new = oldfu.makerelpath(p1="/a/g", p2="/a/g/s/d.txt")
        return_old = fu.makerelpath(p1="/a/g", p2="/a/g/s/d.txt")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, "s/d.txt")


# # todo: need data
# class Test_make_v_stack_header(unittest.TestCase):
#     def test_wrong_number_params(self):
#         with self.assertRaises(TypeError) as cm_new:
#             fu.make_v_stack_header()
#         with self.assertRaises(TypeError) as cm_old:
#             oldfu.make_v_stack_header()
#         self.assertEqual(
#             str(cm_new.exception),
#             "make_v_stack_header() missing 2 required positional arguments: 'path' and 'vstack_path'",
#         )
#         self.assertEqual(str(cm_new.exception), str(cm_old.exception))

class Test_center_2D(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.center_2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.center_2D()
        self.assertEqual(
            str(cm_new.exception), "center_2D() missing 1 required positional argument: 'image_to_be_centered'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_empty_input_image(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.center_2D(
                image_to_be_centered=EMData(),
                center_method=1,
                searching_range=-1,
                Gauss_radius_inner=2,
                Gauss_radius_outter=7,
                self_defined_reference=None,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.center_2D(
                image_to_be_centered=EMData(),
                center_method=1,
                searching_range=-1,
                Gauss_radius_inner=2,
                Gauss_radius_outter=7,
                self_defined_reference=None,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_NoneType_Img(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.center_2D(
                image_to_be_centered=None,
                center_method=1,
                searching_range=-1,
                Gauss_radius_inner=2,
                Gauss_radius_outter=7,
                self_defined_reference=None,
            )
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.center_2D(
                image_to_be_centered=None,
                center_method=1,
                searching_range=-1,
                Gauss_radius_inner=2,
                Gauss_radius_outter=7,
                self_defined_reference=None,
            )
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'phase_cog'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_2DImg(self):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.3703499436378479,
                    -0.3887350857257843,
                    -0.39406290650367737,
                    -0.31704390048980713,
                    -0.33054259419441223,
                    -0.3340435028076172,
                    -0.32923534512519836,
                    -0.3400946259498596,
                    -0.3604322671890259,
                    -0.3805030882358551,
                    -0.4799676835536957,
                    -0.5080035924911499,
                    -0.5012468099594116,
                    -0.46102362871170044,
                    -0.46638357639312744,
                    -0.47559505701065063,
                    -0.4862135946750641,
                    -0.4972260296344757,
                    -0.47051724791526794,
                    -0.4670148491859436,
                    -0.214565709233284,
                    -0.20879504084587097,
                    -0.23537161946296692,
                    -0.27080145478248596,
                    -0.2621292471885681,
                    -0.27169129252433777,
                    -0.24054843187332153,
                    -0.22561034560203552,
                    -0.24432404339313507,
                    -0.22685809433460236,
                    0.10862457752227783,
                    0.13046400249004364,
                    0.12984687089920044,
                    0.11155690997838974,
                    0.11670461297035217,
                    0.10330694913864136,
                    0.09238166362047195,
                    0.089042067527771,
                    0.11553214490413666,
                    0.10142993927001953,
                    0.08308745920658112,
                    0.059467729181051254,
                    0.03297220543026924,
                    0.03335859254002571,
                    0.018797576427459717,
                    0.032400548458099365,
                    0.02054790034890175,
                    0.04626963660120964,
                    0.041031841188669205,
                    0.04753470793366432,
                    0.11181235313415527,
                    0.08749543875455856,
                    0.08990707993507385,
                    0.09588098526000977,
                    0.11416783928871155,
                    0.1051185131072998,
                    0.10514253377914429,
                    0.1265401542186737,
                    0.14008067548274994,
                    0.12481226027011871,
                    0.011457648128271103,
                    0.00596990343183279,
                    0.000892100331839174,
                    0.04193740338087082,
                    0.04413039982318878,
                    0.047939855605363846,
                    0.049763184040784836,
                    0.07987479865550995,
                    0.051033299416303635,
                    0.014774000272154808,
                    -0.09101400524377823,
                    -0.1151394248008728,
                    -0.07287856936454773,
                    -0.010011367499828339,
                    -0.04046791046857834,
                    -0.05022193491458893,
                    -0.05946069210767746,
                    -0.0743170902132988,
                    -0.08090417832136154,
                    -0.08884717524051666,
                    -0.17596139013767242,
                    -0.19926026463508606,
                    -0.17419566214084625,
                    -0.09462296962738037,
                    -0.14621615409851074,
                    -0.14760564267635345,
                    -0.1468927562236786,
                    -0.16385626792907715,
                    -0.1634739488363266,
                    -0.16282308101654053,
                    -0.32476934790611267,
                    -0.37476593255996704,
                    -0.31187760829925537,
                    -0.25332340598106384,
                    -0.29557618498802185,
                    -0.3049299418926239,
                    -0.3340802788734436,
                    -0.3325638771057129,
                    -0.33298560976982117,
                    -0.33319368958473206,
                ],
                atol=1.e-5
            )
        )
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[2], return_old[2]))
        self.assertAlmostEqual(return_new[1], -2.616443395614624,delta=1.e-5)
        self.assertAlmostEqual(return_new[2], -2.5323870182037354,delta=1.e-5)
#
    def test_2DBlankImg(self):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_BLANK_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_BLANK_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[2], return_old[2]))
        self.assertAlmostEqual(return_old[1], -10.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -10.0,delta=1.e-5)

    # todo: should be error??
    def test_3DImg(self):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_3D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_3D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=None,
        )
        self.assertTrue(
            array_equal(return_new[0].get_3dview(), return_old[0].get_3dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_3dview().flatten(),
                [
                    -0.3124222457408905,
                    -0.33797937631607056,
                    -0.3297944664955139,
                    -0.3321264088153839,
                    -0.3467698395252228,
                    -0.369099885225296,
                    -0.38085150718688965,
                    -0.36819395422935486,
                    -0.40426790714263916,
                    -0.36355188488960266,
                    -0.46062329411506653,
                    -0.46862056851387024,
                    -0.47957608103752136,
                    -0.49064505100250244,
                    -0.49222108721733093,
                    -0.461311936378479,
                    -0.47414663434028625,
                    -0.48550745844841003,
                    -0.5168172717094421,
                    -0.4809400141239166,
                    -0.2637782692909241,
                    -0.27221450209617615,
                    -0.2615463435649872,
                    -0.23434412479400635,
                    -0.22943256795406342,
                    -0.24842901527881622,
                    -0.21490421891212463,
                    -0.21964964270591736,
                    -0.20723502337932587,
                    -0.2612045109272003,
                    0.11483573168516159,
                    0.11153682321310043,
                    0.101145900785923,
                    0.08556399494409561,
                    0.10126782208681107,
                    0.11239980161190033,
                    0.10062502324581146,
                    0.11581680178642273,
                    0.13634778559207916,
                    0.11936002969741821,
                    0.024717940017580986,
                    0.024847598746418953,
                    0.02758624032139778,
                    0.026829957962036133,
                    0.05005288124084473,
                    0.036718111485242844,
                    0.0621953010559082,
                    0.08287525177001953,
                    0.04279077425599098,
                    0.036078959703445435,
                    0.10335592925548553,
                    0.11355680227279663,
                    0.1021728515625,
                    0.11097017675638199,
                    0.13575048744678497,
                    0.13481873273849487,
                    0.12157899886369705,
                    0.10160244256258011,
                    0.08636114746332169,
                    0.09095658361911774,
                    0.043512534350156784,
                    0.04845504090189934,
                    0.04331347718834877,
                    0.06448392570018768,
                    0.07461109012365341,
                    0.03693888708949089,
                    0.007492864970117807,
                    0.01633390411734581,
                    -0.004645288456231356,
                    0.019256697967648506,
                    -0.020663680508732796,
                    -0.04360250011086464,
                    -0.055621322244405746,
                    -0.060976698994636536,
                    -0.08152966946363449,
                    -0.0791875347495079,
                    -0.09371790289878845,
                    -0.09332311153411865,
                    -0.11781566590070724,
                    -0.034436605870723724,
                    -0.1079692393541336,
                    -0.15370477735996246,
                    -0.14474962651729584,
                    -0.15069492161273956,
                    -0.16937577724456787,
                    -0.15678539872169495,
                    -0.17163842916488647,
                    -0.17756026983261108,
                    -0.20864415168762207,
                    -0.1316317468881607,
                    -0.27112331986427307,
                    -0.2970453202724457,
                    -0.3171194791793823,
                    -0.33508822321891785,
                    -0.3317832946777344,
                    -0.3339288830757141,
                    -0.32736796140670776,
                    -0.3387298583984375,
                    -0.37320399284362793,
                    -0.2693241238594055,
                    -1.1331480741500854,
                    -1.1455312967300415,
                    -1.1505773067474365,
                    -1.1309585571289062,
                    -1.100803256034851,
                    -1.088606357574463,
                    -1.0629980564117432,
                    -1.0510480403900146,
                    -1.0462234020233154,
                    -1.0983222723007202,
                    -1.1077581644058228,
                    -1.0715959072113037,
                    -1.0682271718978882,
                    -1.0481901168823242,
                    -1.0300770998001099,
                    -1.0277085304260254,
                    -0.996934711933136,
                    -0.9909066557884216,
                    -0.9436344504356384,
                    -1.0677235126495361,
                    -0.7573167085647583,
                    -0.7291474938392639,
                    -0.7252786159515381,
                    -0.7040082812309265,
                    -0.6642057299613953,
                    -0.6517550349235535,
                    -0.642329752445221,
                    -0.6393872499465942,
                    -0.5949283242225647,
                    -0.7088325619697571,
                    -0.3728346526622772,
                    -0.38411569595336914,
                    -0.383652001619339,
                    -0.4161916673183441,
                    -0.42736583948135376,
                    -0.4475353956222534,
                    -0.46455156803131104,
                    -0.4697988033294678,
                    -0.49879318475723267,
                    -0.37787139415740967,
                    -0.5325043201446533,
                    -0.543497622013092,
                    -0.5227758288383484,
                    -0.5363678336143494,
                    -0.5597220659255981,
                    -0.557472825050354,
                    -0.5584743022918701,
                    -0.5561838150024414,
                    -0.5841074585914612,
                    -0.5641967058181763,
                    -0.5609714388847351,
                    -0.5546998381614685,
                    -0.5286207795143127,
                    -0.518185555934906,
                    -0.531661331653595,
                    -0.5354505777359009,
                    -0.5287307500839233,
                    -0.5462622046470642,
                    -0.5609227418899536,
                    -0.544247031211853,
                    -0.5934084057807922,
                    -0.6259387731552124,
                    -0.6280260682106018,
                    -0.6479818820953369,
                    -0.6675323843955994,
                    -0.6683492064476013,
                    -0.6987584829330444,
                    -0.7099424600601196,
                    -0.7666160464286804,
                    -0.6277141571044922,
                    -0.7446931004524231,
                    -0.7731879353523254,
                    -0.7755385041236877,
                    -0.7906172275543213,
                    -0.8109278678894043,
                    -0.8283115029335022,
                    -0.8340073227882385,
                    -0.8257192969322205,
                    -0.8520690202713013,
                    -0.7708728313446045,
                    -0.8363459706306458,
                    -0.8646601438522339,
                    -0.8695026636123657,
                    -0.8801398873329163,
                    -0.8953269124031067,
                    -0.9033486843109131,
                    -0.9435297846794128,
                    -0.9593198299407959,
                    -1.0252269506454468,
                    -0.8934946060180664,
                    -1.0430725812911987,
                    -1.062660813331604,
                    -1.0722239017486572,
                    -1.0802016258239746,
                    -1.0708999633789062,
                    -1.0702439546585083,
                    -1.102285385131836,
                    -1.1079035997390747,
                    -1.1282696723937988,
                    -1.064941644668579,
                    -0.18598023056983948,
                    -0.15836302936077118,
                    -0.17339199781417847,
                    -0.16445598006248474,
                    -0.1474863588809967,
                    -0.14693069458007812,
                    -0.14167024195194244,
                    -0.12408792227506638,
                    -0.1047549918293953,
                    -0.16610629856586456,
                    0.04560088738799095,
                    0.015244902111589909,
                    0.01533809769898653,
                    0.03140454739332199,
                    0.01934061199426651,
                    0.02086068131029606,
                    0.04083443060517311,
                    0.04226454347372055,
                    0.014151989482343197,
                    0.019432740285992622,
                    -0.40754854679107666,
                    -0.3967565596103668,
                    -0.40813663601875305,
                    -0.41124391555786133,
                    -0.40836817026138306,
                    -0.4211192727088928,
                    -0.3986257016658783,
                    -0.38375750184059143,
                    -0.34694966673851013,
                    -0.3883746564388275,
                    -0.7808626294136047,
                    -0.7200153470039368,
                    -0.6868589520454407,
                    -0.655726432800293,
                    -0.6544472575187683,
                    -0.657730221748352,
                    -0.6474411487579346,
                    -0.6463140845298767,
                    -0.5804265737533569,
                    -0.7531720995903015,
                    -0.44371575117111206,
                    -0.4096858501434326,
                    -0.38259556889533997,
                    -0.36936673521995544,
                    -0.3418065309524536,
                    -0.34036991000175476,
                    -0.3468512296676636,
                    -0.36988359689712524,
                    -0.37625622749328613,
                    -0.41844332218170166,
                    -0.46578532457351685,
                    -0.4492795467376709,
                    -0.42890024185180664,
                    -0.40131181478500366,
                    -0.39677950739860535,
                    -0.3862360119819641,
                    -0.3644276559352875,
                    -0.3704300820827484,
                    -0.3499901592731476,
                    -0.4433846175670624,
                    -0.2967478334903717,
                    -0.26518750190734863,
                    -0.2822875380516052,
                    -0.2903510630130768,
                    -0.2982715666294098,
                    -0.29684215784072876,
                    -0.30698853731155396,
                    -0.31107935309410095,
                    -0.2806191146373749,
                    -0.30106282234191895,
                    -0.313814640045166,
                    -0.337287038564682,
                    -0.33433791995048523,
                    -0.3487912118434906,
                    -0.3392777442932129,
                    -0.3239010274410248,
                    -0.3161894381046295,
                    -0.29341748356819153,
                    -0.28433382511138916,
                    -0.29771995544433594,
                    -0.2971767485141754,
                    -0.2731618583202362,
                    -0.2634941041469574,
                    -0.24864140152931213,
                    -0.2543574571609497,
                    -0.24137388169765472,
                    -0.23473021388053894,
                    -0.24045881628990173,
                    -0.20599332451820374,
                    -0.26899588108062744,
                    -0.20209884643554688,
                    -0.18403029441833496,
                    -0.1593513935804367,
                    -0.14597059786319733,
                    -0.12283877283334732,
                    -0.12057161331176758,
                    -0.10135933756828308,
                    -0.119663305580616,
                    -0.11779970675706863,
                    -0.17568573355674744,
                    0.09490616619586945,
                    0.09337364882230759,
                    0.07346872240304947,
                    0.08032691478729248,
                    0.09937942773103714,
                    0.10867700725793839,
                    0.11915796250104904,
                    0.09061139076948166,
                    0.10233315825462341,
                    0.0799991637468338,
                    0.08307946473360062,
                    0.06252229958772659,
                    0.06815247237682343,
                    0.04784754663705826,
                    0.054371029138565063,
                    0.06908788532018661,
                    0.05473560094833374,
                    0.043221503496170044,
                    -0.0015226936666294932,
                    0.06862034648656845,
                    -0.027903137728571892,
                    -0.025596074759960175,
                    -0.013487198390066624,
                    -0.007838745601475239,
                    -0.028018150478601456,
                    -0.03592938184738159,
                    -0.053401313722133636,
                    -0.056202493607997894,
                    -0.07828152179718018,
                    -0.020321074873209,
                    -0.09035424143075943,
                    -0.07734540849924088,
                    -0.11098229885101318,
                    -0.08695114403963089,
                    -0.08225454390048981,
                    -0.09958411753177643,
                    -0.08342327177524567,
                    -0.12030636519193649,
                    -0.08627504110336304,
                    -0.08703376352787018,
                    -0.1057388037443161,
                    -0.1123109981417656,
                    -0.10429998487234116,
                    -0.10530634224414825,
                    -0.09848757088184357,
                    -0.10171142965555191,
                    -0.10739704221487045,
                    -0.11018361896276474,
                    -0.10447169840335846,
                    -0.09463327378034592,
                    -0.12666413187980652,
                    -0.11046954989433289,
                    -0.07733739167451859,
                    -0.07968130707740784,
                    -0.08561689406633377,
                    -0.09424879401922226,
                    -0.08571809530258179,
                    -0.07242093235254288,
                    -0.09701854735612869,
                    -0.10416383296251297,
                    -0.062250711023807526,
                    -0.057537682354450226,
                    -0.07778158038854599,
                    -0.03519750386476517,
                    -0.029621347784996033,
                    -0.06387253105640411,
                    -0.05274009704589844,
                    -0.05355533957481384,
                    -0.0523066520690918,
                    -0.07862534373998642,
                    -0.03830740973353386,
                    -0.02184375561773777,
                    -0.017691845074295998,
                    0.010381725616753101,
                    -0.0016124916728585958,
                    -0.005963310599327087,
                    0.003428844502195716,
                    -0.0035058800131082535,
                    0.01044322457164526,
                    -0.02996695786714554,
                    0.032162196934223175,
                    0.039001673460006714,
                    0.04203609749674797,
                    0.035064101219177246,
                    0.05279186740517616,
                    0.037349164485931396,
                    0.04251190274953842,
                    0.05908909812569618,
                    0.035362426191568375,
                    0.027608778327703476,
                    0.07022427767515182,
                    0.07644549757242203,
                    0.08927328139543533,
                    0.1148940697312355,
                    0.0749557614326477,
                    0.06840240955352783,
                    0.07332371920347214,
                    0.08079920709133148,
                    0.07856989651918411,
                    0.04674408584833145,
                    -0.5228954553604126,
                    -0.5356661081314087,
                    -0.5323721170425415,
                    -0.5334694981575012,
                    -0.5546579957008362,
                    -0.5558841228485107,
                    -0.5516036152839661,
                    -0.5467230677604675,
                    -0.5459102988243103,
                    -0.5320191979408264,
                    -0.7265351414680481,
                    -0.7480998039245605,
                    -0.7673064470291138,
                    -0.7893204092979431,
                    -0.8024128079414368,
                    -0.8054158687591553,
                    -0.813201904296875,
                    -0.8300765752792358,
                    -0.8764068484306335,
                    -0.7311674356460571,
                    -0.3979550302028656,
                    -0.42974853515625,
                    -0.4202619194984436,
                    -0.4527822732925415,
                    -0.46535682678222656,
                    -0.48377662897109985,
                    -0.5060148239135742,
                    -0.5000492930412292,
                    -0.5352733135223389,
                    -0.43251466751098633,
                    -0.006815086584538221,
                    -0.015117283910512924,
                    -0.027217542752623558,
                    -0.050397664308547974,
                    -0.07544749975204468,
                    -0.09666051715612411,
                    -0.10072636604309082,
                    -0.08544968068599701,
                    -0.11347252130508423,
                    -0.019348805770277977,
                    -0.26273536682128906,
                    -0.309212327003479,
                    -0.3019944727420807,
                    -0.31841734051704407,
                    -0.3478674590587616,
                    -0.34117189049720764,
                    -0.370258092880249,
                    -0.365308552980423,
                    -0.3869224190711975,
                    -0.30096784234046936,
                    -0.31941840052604675,
                    -0.332591712474823,
                    -0.31861162185668945,
                    -0.351648211479187,
                    -0.35888978838920593,
                    -0.35106563568115234,
                    -0.3648661971092224,
                    -0.3642687201499939,
                    -0.37013959884643555,
                    -0.3188728094100952,
                    -0.41795462369918823,
                    -0.4521092176437378,
                    -0.44760456681251526,
                    -0.4416128993034363,
                    -0.4638860523700714,
                    -0.46912917494773865,
                    -0.4739886224269867,
                    -0.45853492617607117,
                    -0.4736354947090149,
                    -0.44075122475624084,
                    -0.48471468687057495,
                    -0.4793790280818939,
                    -0.4955999553203583,
                    -0.49102672934532166,
                    -0.4669474959373474,
                    -0.481650710105896,
                    -0.47038397192955017,
                    -0.4458572268486023,
                    -0.4312613904476166,
                    -0.44539421796798706,
                    -0.42389950156211853,
                    -0.4462631344795227,
                    -0.4425655007362366,
                    -0.45649489760398865,
                    -0.46297475695610046,
                    -0.44006794691085815,
                    -0.46086445450782776,
                    -0.46417585015296936,
                    -0.4957481920719147,
                    -0.4564247131347656,
                    -0.5251176953315735,
                    -0.5383859872817993,
                    -0.5419954061508179,
                    -0.5369217395782471,
                    -0.5251500010490417,
                    -0.5344880819320679,
                    -0.5491464138031006,
                    -0.5553321838378906,
                    -0.5722730159759521,
                    -0.5395818948745728,
                    -0.44033685326576233,
                    -0.4406338334083557,
                    -0.43290865421295166,
                    -0.44155335426330566,
                    -0.42735081911087036,
                    -0.40639257431030273,
                    -0.4122820198535919,
                    -0.4156021177768707,
                    -0.37864527106285095,
                    -0.40970945358276367,
                    -0.2822158634662628,
                    -0.24288858473300934,
                    -0.2383216768503189,
                    -0.2565966248512268,
                    -0.2680591642856598,
                    -0.2457306981086731,
                    -0.24561390280723572,
                    -0.26030153036117554,
                    -0.23027892410755157,
                    -0.28302016854286194,
                    -0.5571644306182861,
                    -0.564163327217102,
                    -0.554500937461853,
                    -0.5644598007202148,
                    -0.5827063322067261,
                    -0.6107423305511475,
                    -0.6040829420089722,
                    -0.5829569697380066,
                    -0.5726273059844971,
                    -0.5445225834846497,
                    -0.9497814774513245,
                    -0.9743699431419373,
                    -0.9793386459350586,
                    -0.9805715680122375,
                    -0.9936662912368774,
                    -1.009436845779419,
                    -1.0310509204864502,
                    -1.0219485759735107,
                    -1.0585647821426392,
                    -0.979396641254425,
                    -0.9706574082374573,
                    -1.015399694442749,
                    -1.0244367122650146,
                    -1.040419340133667,
                    -1.0572762489318848,
                    -1.07909095287323,
                    -1.0982385873794556,
                    -1.0790135860443115,
                    -1.0812082290649414,
                    -0.9741692543029785,
                    -1.1571046113967896,
                    -1.1648740768432617,
                    -1.183456540107727,
                    -1.2093210220336914,
                    -1.2146368026733398,
                    -1.2176469564437866,
                    -1.2121050357818604,
                    -1.1838301420211792,
                    -1.1742358207702637,
                    -1.15234375,
                    -1.1350131034851074,
                    -1.1066677570343018,
                    -1.0929747819900513,
                    -1.0736852884292603,
                    -1.0561021566390991,
                    -1.0443029403686523,
                    -1.0259443521499634,
                    -1.0106786489486694,
                    -0.9713553786277771,
                    -1.0921390056610107,
                    -0.9939159154891968,
                    -0.9547548294067383,
                    -0.9184702038764954,
                    -0.8763642907142639,
                    -0.8510295152664185,
                    -0.8493169546127319,
                    -0.8388506174087524,
                    -0.8339019417762756,
                    -0.7786452770233154,
                    -0.9554191827774048,
                    -0.7654684782028198,
                    -0.6926144361495972,
                    -0.6725180745124817,
                    -0.6368032693862915,
                    -0.6295397877693176,
                    -0.6189265847206116,
                    -0.5898410677909851,
                    -0.5943629145622253,
                    -0.5283609628677368,
                    -0.7212265133857727,
                    -0.5314885377883911,
                    -0.49211201071739197,
                    -0.47050291299819946,
                    -0.4417493939399719,
                    -0.4183788001537323,
                    -0.40648773312568665,
                    -0.4095293879508972,
                    -0.3998347520828247,
                    -0.36504337191581726,
                    -0.505566418170929,
                    -0.12539279460906982,
                    -0.14394016563892365,
                    -0.14467962086200714,
                    -0.13306494057178497,
                    -0.12665314972400665,
                    -0.10158105939626694,
                    -0.07681913673877716,
                    -0.09042710065841675,
                    -0.10355016589164734,
                    -0.12670595943927765,
                    -0.06354266405105591,
                    -0.03504028916358948,
                    -0.015839021652936935,
                    -0.011651827022433281,
                    -0.008265198208391666,
                    0.00499311275780201,
                    -0.004815517459064722,
                    -0.009087787941098213,
                    0.003179046791046858,
                    -0.05732056871056557,
                    -0.1863592267036438,
                    -0.16591735184192657,
                    -0.1716291904449463,
                    -0.17336903512477875,
                    -0.2003030925989151,
                    -0.18146692216396332,
                    -0.1659439653158188,
                    -0.1441696286201477,
                    -0.11327388882637024,
                    -0.16735845804214478,
                    -0.3015567660331726,
                    -0.31012389063835144,
                    -0.31776440143585205,
                    -0.31021398305892944,
                    -0.3239211440086365,
                    -0.3204341530799866,
                    -0.3210795223712921,
                    -0.29893144965171814,
                    -0.2753289043903351,
                    -0.3014216423034668,
                    -0.23300166428089142,
                    -0.21552325785160065,
                    -0.20728744566440582,
                    -0.16127510368824005,
                    -0.16392846405506134,
                    -0.16766321659088135,
                    -0.12490881979465485,
                    -0.15182091295719147,
                    -0.119554802775383,
                    -0.2037273794412613,
                    -0.20039834082126617,
                    -0.1546616107225418,
                    -0.16020949184894562,
                    -0.14864914119243622,
                    -0.1001068651676178,
                    -0.10800767689943314,
                    -0.10170698910951614,
                    -0.10573150217533112,
                    -0.07836589962244034,
                    -0.15768197178840637,
                    -0.05371902137994766,
                    -0.041073646396398544,
                    -0.027675574645400047,
                    -0.05791804566979408,
                    -0.06117113679647446,
                    -0.065776027739048,
                    -0.08873624354600906,
                    -0.06786684691905975,
                    -0.05850253999233246,
                    -0.05135050415992737,
                    -0.07769665867090225,
                    -0.08311596512794495,
                    -0.09288468211889267,
                    -0.08887217193841934,
                    -0.0756421834230423,
                    -0.09009888023138046,
                    -0.06535807251930237,
                    -0.06766237318515778,
                    -0.07441657781600952,
                    -0.06122928112745285,
                    -0.0900144949555397,
                    -0.08096392452716827,
                    -0.07886725664138794,
                    -0.09168008714914322,
                    -0.10444219410419464,
                    -0.10735370963811874,
                    -0.10962998867034912,
                    -0.10168803483247757,
                    -0.11062368005514145,
                    -0.07875089347362518,
                    -0.09747935086488724,
                    -0.10419269651174545,
                    -0.08442963659763336,
                    -0.08919606357812881,
                    -0.11410467326641083,
                    -0.08937307447195053,
                    -0.07732240855693817,
                    -0.07672193646430969,
                    -0.09371887892484665,
                    -0.11159838736057281,
                    -0.3030471205711365,
                    -0.30297374725341797,
                    -0.3032994568347931,
                    -0.32471296191215515,
                    -0.3279154896736145,
                    -0.32860174775123596,
                    -0.3451651334762573,
                    -0.35268306732177734,
                    -0.366784930229187,
                    -0.3071786165237427,
                    -0.4248722195625305,
                    -0.45159393548965454,
                    -0.45404255390167236,
                    -0.4646778404712677,
                    -0.4880616366863251,
                    -0.49240705370903015,
                    -0.5330163240432739,
                    -0.5238656401634216,
                    -0.5249558091163635,
                    -0.47074705362319946,
                    -0.24748238921165466,
                    -0.22521668672561646,
                    -0.24729986488819122,
                    -0.25129303336143494,
                    -0.2534782290458679,
                    -0.2579335868358612,
                    -0.2567838430404663,
                    -0.25545528531074524,
                    -0.22971028089523315,
                    -0.25462430715560913,
                    0.0683533251285553,
                    0.07072023302316666,
                    0.07475905120372772,
                    0.09910428524017334,
                    0.09968560934066772,
                    0.11783726513385773,
                    0.12737572193145752,
                    0.11735378205776215,
                    0.09820001572370529,
                    0.0657106339931488,
                    0.019249465316534042,
                    0.026972545310854912,
                    0.039641983807086945,
                    0.03784231096506119,
                    0.05911792442202568,
                    0.07153386622667313,
                    0.057409219443798065,
                    0.05036153644323349,
                    0.06075957044959068,
                    0.04266548529267311,
                    0.10274626314640045,
                    0.1096775010228157,
                    0.10635868459939957,
                    0.1030096560716629,
                    0.10783659666776657,
                    0.10903049260377884,
                    0.1093885749578476,
                    0.11450120061635971,
                    0.12839922308921814,
                    0.10446351766586304,
                    0.08432892709970474,
                    0.09695138782262802,
                    0.06896001100540161,
                    0.048853520303964615,
                    0.05492919683456421,
                    0.059371333569288254,
                    0.05406082794070244,
                    0.040467724204063416,
                    0.04232224076986313,
                    0.07077658921480179,
                    0.03573610261082649,
                    0.004788717720657587,
                    -0.024775221943855286,
                    -0.01682519167661667,
                    -0.006176783703267574,
                    -0.011410889215767384,
                    -0.04988808557391167,
                    -0.04416526108980179,
                    -0.08128253370523453,
                    -0.002848685486242175,
                    -0.072566457092762,
                    -0.07980269938707352,
                    -0.07970892637968063,
                    -0.12355849146842957,
                    -0.13590510189533234,
                    -0.12387015670537949,
                    -0.149238720536232,
                    -0.1887056976556778,
                    -0.2103852480649948,
                    -0.09130760282278061,
                    -0.2159646451473236,
                    -0.23290503025054932,
                    -0.23342560231685638,
                    -0.24549518525600433,
                    -0.25341132283210754,
                    -0.27359551191329956,
                    -0.3109378218650818,
                    -0.2920588552951813,
                    -0.33781617879867554,
                    -0.2626416087150574,
                    -1.1243220567703247,
                    -1.1133511066436768,
                    -1.1058372259140015,
                    -1.1296216249465942,
                    -1.1461580991744995,
                    -1.1363669633865356,
                    -1.1446516513824463,
                    -1.1586862802505493,
                    -1.1860146522521973,
                    -1.1506634950637817,
                    -1.276895523071289,
                    -1.2423644065856934,
                    -1.2265828847885132,
                    -1.2193852663040161,
                    -1.2095998525619507,
                    -1.1859058141708374,
                    -1.147014856338501,
                    -1.142458200454712,
                    -1.120710015296936,
                    -1.2342275381088257,
                    -0.8446199297904968,
                    -0.8080762624740601,
                    -0.8098377585411072,
                    -0.8068246841430664,
                    -0.7778884172439575,
                    -0.7618539333343506,
                    -0.729656457901001,
                    -0.7146867513656616,
                    -0.6994583606719971,
                    -0.8228138089179993,
                    -0.36943504214286804,
                    -0.40624770522117615,
                    -0.4182283282279968,
                    -0.4302140474319458,
                    -0.4245430529117584,
                    -0.43447235226631165,
                    -0.4314720630645752,
                    -0.4132768511772156,
                    -0.44146543741226196,
                    -0.3645784556865692,
                    -0.5248045325279236,
                    -0.5323911905288696,
                    -0.5188222527503967,
                    -0.5178307294845581,
                    -0.5324164032936096,
                    -0.5177885293960571,
                    -0.5341889262199402,
                    -0.5458446741104126,
                    -0.5746535658836365,
                    -0.5641195178031921,
                    -0.5386471748352051,
                    -0.5528851747512817,
                    -0.5576483011245728,
                    -0.5881364941596985,
                    -0.5907948017120361,
                    -0.5849579572677612,
                    -0.5925230979919434,
                    -0.5932538509368896,
                    -0.6085159182548523,
                    -0.5433666110038757,
                    -0.6839271187782288,
                    -0.6839481592178345,
                    -0.6851601004600525,
                    -0.7181145548820496,
                    -0.7321159839630127,
                    -0.7361329197883606,
                    -0.7596095204353333,
                    -0.7778748273849487,
                    -0.8226958513259888,
                    -0.7067480683326721,
                    -0.7827855348587036,
                    -0.7945143580436707,
                    -0.8140735626220703,
                    -0.8377959132194519,
                    -0.8599273562431335,
                    -0.8696465492248535,
                    -0.8747266530990601,
                    -0.873438835144043,
                    -0.8953048586845398,
                    -0.8074760437011719,
                    -0.9091745615005493,
                    -0.9401631951332092,
                    -0.9474978446960449,
                    -0.9505387544631958,
                    -0.9735690951347351,
                    -0.9778075814247131,
                    -0.9738987684249878,
                    -0.9775176048278809,
                    -1.020796775817871,
                    -0.9446732997894287,
                    -1.0240147113800049,
                    -1.0314022302627563,
                    -1.0406993627548218,
                    -1.0677556991577148,
                    -1.1055513620376587,
                    -1.1245747804641724,
                    -1.1306877136230469,
                    -1.1251829862594604,
                    -1.1553244590759277,
                    -1.0559351444244385,
                    -0.2566128373146057,
                    -0.23334956169128418,
                    -0.2445622980594635,
                    -0.21673376858234406,
                    -0.1899779587984085,
                    -0.1863352507352829,
                    -0.14763520658016205,
                    -0.14168637990951538,
                    -0.1156253069639206,
                    -0.2076176404953003,
                    0.06450149416923523,
                    0.056516487151384354,
                    0.07400385290384293,
                    0.07197386771440506,
                    0.03629637137055397,
                    0.04435022547841072,
                    0.04156061261892319,
                    0.01106270682066679,
                    -0.005149261560291052,
                    0.03249762952327728,
                    -0.5245090126991272,
                    -0.497192919254303,
                    -0.49286553263664246,
                    -0.46940043568611145,
                    -0.4413595199584961,
                    -0.436555951833725,
                    -0.4119645357131958,
                    -0.3982985019683838,
                    -0.35249626636505127,
                    -0.477865070104599,
                    -0.9892696142196655,
                    -0.934221088886261,
                    -0.9060559868812561,
                    -0.8547962307929993,
                    -0.8279692530632019,
                    -0.8125501275062561,
                    -0.7690315246582031,
                    -0.7645889520645142,
                    -0.7207220196723938,
                    -0.9382826089859009,
                    -0.5547884702682495,
                    -0.5157397389411926,
                    -0.49517664313316345,
                    -0.4585360288619995,
                    -0.42535263299942017,
                    -0.4025208353996277,
                    -0.379989892244339,
                    -0.36476999521255493,
                    -0.3388402760028839,
                    -0.5041475892066956,
                    -0.48393842577934265,
                    -0.47506359219551086,
                    -0.46934518218040466,
                    -0.45856696367263794,
                    -0.426164835691452,
                    -0.4095710515975952,
                    -0.3995763957500458,
                    -0.39472225308418274,
                    -0.3646804988384247,
                    -0.45441532135009766,
                    -0.3021487891674042,
                    -0.2871622145175934,
                    -0.2983916103839874,
                    -0.30413028597831726,
                    -0.3043687045574188,
                    -0.3076097369194031,
                    -0.3153975009918213,
                    -0.3206760883331299,
                    -0.30618229508399963,
                    -0.3072623014450073,
                    -0.3192574679851532,
                    -0.3086021840572357,
                    -0.29946309328079224,
                    -0.30935144424438477,
                    -0.3029743432998657,
                    -0.30865785479545593,
                    -0.31257715821266174,
                    -0.3133629858493805,
                    -0.31553760170936584,
                    -0.3328852951526642,
                    -0.2861942648887634,
                    -0.28542277216911316,
                    -0.30963027477264404,
                    -0.29945454001426697,
                    -0.31305238604545593,
                    -0.314922958612442,
                    -0.31294524669647217,
                    -0.3010388910770416,
                    -0.2874472737312317,
                    -0.2901410758495331,
                    -0.22710292041301727,
                    -0.19550803303718567,
                    -0.1883278489112854,
                    -0.17950820922851562,
                    -0.16808150708675385,
                    -0.17040830850601196,
                    -0.15406915545463562,
                    -0.1675233095884323,
                    -0.14590947329998016,
                    -0.22373013198375702,
                ],
            atol = 1.e-5)
        )
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[2], return_old[2]))
        self.assertAlmostEqual(return_old[1], 0.7548537254333496,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2.5345394611358643,delta =1.e-5)

    def test_2DImgcenter_method0(self):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=0,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=0,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)

    def test_2DImgcenter_method1searching_range_negativeself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.3703499436378479,
                    -0.3887350857257843,
                    -0.39406290650367737,
                    -0.31704390048980713,
                    -0.33054259419441223,
                    -0.3340435028076172,
                    -0.32923534512519836,
                    -0.3400946259498596,
                    -0.3604322671890259,
                    -0.3805030882358551,
                    -0.4799676835536957,
                    -0.5080035924911499,
                    -0.5012468099594116,
                    -0.46102362871170044,
                    -0.46638357639312744,
                    -0.47559505701065063,
                    -0.4862135946750641,
                    -0.4972260296344757,
                    -0.47051724791526794,
                    -0.4670148491859436,
                    -0.214565709233284,
                    -0.20879504084587097,
                    -0.23537161946296692,
                    -0.27080145478248596,
                    -0.2621292471885681,
                    -0.27169129252433777,
                    -0.24054843187332153,
                    -0.22561034560203552,
                    -0.24432404339313507,
                    -0.22685809433460236,
                    0.10862457752227783,
                    0.13046400249004364,
                    0.12984687089920044,
                    0.11155690997838974,
                    0.11670461297035217,
                    0.10330694913864136,
                    0.09238166362047195,
                    0.089042067527771,
                    0.11553214490413666,
                    0.10142993927001953,
                    0.08308745920658112,
                    0.059467729181051254,
                    0.03297220543026924,
                    0.03335859254002571,
                    0.018797576427459717,
                    0.032400548458099365,
                    0.02054790034890175,
                    0.04626963660120964,
                    0.041031841188669205,
                    0.04753470793366432,
                    0.11181235313415527,
                    0.08749543875455856,
                    0.08990707993507385,
                    0.09588098526000977,
                    0.11416783928871155,
                    0.1051185131072998,
                    0.10514253377914429,
                    0.1265401542186737,
                    0.14008067548274994,
                    0.12481226027011871,
                    0.011457648128271103,
                    0.00596990343183279,
                    0.000892100331839174,
                    0.04193740338087082,
                    0.04413039982318878,
                    0.047939855605363846,
                    0.049763184040784836,
                    0.07987479865550995,
                    0.051033299416303635,
                    0.014774000272154808,
                    -0.09101400524377823,
                    -0.1151394248008728,
                    -0.07287856936454773,
                    -0.010011367499828339,
                    -0.04046791046857834,
                    -0.05022193491458893,
                    -0.05946069210767746,
                    -0.0743170902132988,
                    -0.08090417832136154,
                    -0.08884717524051666,
                    -0.17596139013767242,
                    -0.19926026463508606,
                    -0.17419566214084625,
                    -0.09462296962738037,
                    -0.14621615409851074,
                    -0.14760564267635345,
                    -0.1468927562236786,
                    -0.16385626792907715,
                    -0.1634739488363266,
                    -0.16282308101654053,
                    -0.32476934790611267,
                    -0.37476593255996704,
                    -0.31187760829925537,
                    -0.25332340598106384,
                    -0.29557618498802185,
                    -0.3049299418926239,
                    -0.3340802788734436,
                    -0.3325638771057129,
                    -0.33298560976982117,
                    -0.33319368958473206,
                ],
                atol=1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], -2.616443395614624,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2.5323870182037354,delta=1.e-5)

    def test_2DImgcenter_method2searching_range_negativeself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.32363757491111755,
                    -0.32626211643218994,
                    -0.35172855854034424,
                    -0.36026331782341003,
                    -0.35741567611694336,
                    -0.35751232504844666,
                    -0.3892560601234436,
                    -0.3773261606693268,
                    -0.3859836161136627,
                    -0.3920990526676178,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.461079478263855,
                    -0.4608628749847412,
                    -0.47732916474342346,
                    -0.4734823405742645,
                    -0.45432642102241516,
                    -0.4409671723842621,
                    -0.438747763633728,
                    -0.42292165756225586,
                    -0.43765121698379517,
                    -0.43693017959594727,
                    0.00950438342988491,
                    0.025884946808218956,
                    0.015371355228126049,
                    0.029651662334799767,
                    0.025623228400945663,
                    0.023995986208319664,
                    0.02331620641052723,
                    0.03626576438546181,
                    0.042238593101501465,
                    0.05326130613684654,
                    0.06996522843837738,
                    0.05416791886091232,
                    0.05099474638700485,
                    0.035542700439691544,
                    0.03604983165860176,
                    0.07005912810564041,
                    0.0567542165517807,
                    0.0672926977276802,
                    0.08996175229549408,
                    0.08004484325647354,
                    0.07206105440855026,
                    0.07158391177654266,
                    0.08500777930021286,
                    0.0807405337691307,
                    0.08976089954376221,
                    0.095531165599823,
                    0.09733156859874725,
                    0.12153388559818268,
                    0.0977700874209404,
                    0.061206597834825516,
                    0.06047393009066582,
                    0.08327961713075638,
                    0.07990703731775284,
                    0.07260186225175858,
                    0.1039014384150505,
                    0.1269259750843048,
                    0.0899757668375969,
                    0.05740877985954285,
                    0.05622504651546478,
                    0.055230479687452316,
                    0.013907670974731445,
                    0.007147028110921383,
                    0.015115760266780853,
                    2.5212764739990234e-05,
                    0.008231937885284424,
                    -0.020773105323314667,
                    -0.03419971093535423,
                    -0.04089482128620148,
                    -0.04246025159955025,
                    -0.06925756484270096,
                    -0.06893885135650635,
                    -0.08000175654888153,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971069872379303,
                    -0.1273496150970459,
                    -0.12249225378036499,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.1503489911556244,
                    -0.17081011831760406,
                    -0.20149055123329163,
                    -0.21213491261005402,
                    -0.2273678332567215,
                    -0.24315768480300903,
                    -0.2552821636199951,
                    -0.23703177273273468,
                    -0.2393374741077423,
                    -0.2672199308872223,
                    -0.2880825996398926,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -3.0,delta=1.e-5)

    def test_2DImgcenter_method3searching_range_negativeself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.07990697026252747,
                    0.0726017951965332,
                    0.10390138626098633,
                    0.12692590057849884,
                    0.08997567743062973,
                    0.057408690452575684,
                    0.05622495710849762,
                    0.055230386555194855,
                    0.06047387421131134,
                    0.083279550075531,
                    0.015115716494619846,
                    2.518415385566186e-05,
                    0.008231890387833118,
                    -0.02077317237854004,
                    -0.03419975936412811,
                    -0.04089485853910446,
                    -0.04246028885245323,
                    -0.06925759464502335,
                    0.0139076579362154,
                    0.007146999705582857,
                    -0.11662118881940842,
                    -0.11198502033948898,
                    -0.1197107657790184,
                    -0.1273496448993683,
                    -0.12249229103326797,
                    -0.14533589780330658,
                    -0.14758045971393585,
                    -0.15034903585910797,
                    -0.06893887370824814,
                    -0.08000180870294571,
                    -0.21213501691818237,
                    -0.22736796736717224,
                    -0.24315780401229858,
                    -0.25528228282928467,
                    -0.23703189194202423,
                    -0.23933759331703186,
                    -0.26722002029418945,
                    -0.28808271884918213,
                    -0.17081023752689362,
                    -0.20149067044258118,
                    -0.3517284691333771,
                    -0.36026325821876526,
                    -0.3574156165122986,
                    -0.3575122356414795,
                    -0.38925600051879883,
                    -0.3773261606693268,
                    -0.3859836161136627,
                    -0.392098993062973,
                    -0.3236374855041504,
                    -0.32626208662986755,
                    -0.371152400970459,
                    -0.37047016620635986,
                    -0.3936239182949066,
                    -0.40711334347724915,
                    -0.3925972580909729,
                    -0.4149233102798462,
                    -0.41900211572647095,
                    -0.4641905426979065,
                    -0.3882087767124176,
                    -0.36398178339004517,
                    -0.47732892632484436,
                    -0.4734821617603302,
                    -0.45432621240615845,
                    -0.440966933965683,
                    -0.4387475550174713,
                    -0.42292144894599915,
                    -0.43765100836753845,
                    -0.43692997097969055,
                    -0.46107932925224304,
                    -0.4608626365661621,
                    0.015371562913060188,
                    0.029651865363121033,
                    0.02562340721487999,
                    0.023996181786060333,
                    0.023316407576203346,
                    0.03626594319939613,
                    0.042238786816596985,
                    0.053261492401361465,
                    0.009504588320851326,
                    0.02588515169918537,
                    0.050994690507650375,
                    0.03554262965917587,
                    0.03604977950453758,
                    0.07005906105041504,
                    0.056754156947135925,
                    0.06729266792535782,
                    0.0899617001414299,
                    0.08004476130008698,
                    0.0699651762843132,
                    0.054167840629816055,
                    0.08500783145427704,
                    0.08074060082435608,
                    0.08976096659898758,
                    0.09553123265504837,
                    0.09733163565397263,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066313624382,
                    0.07206108421087265,
                    0.07158397883176804,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_new[1], 2.0,delta=1.e-5)
        self.assertAlmostEqual(return_new[2], 3.0,delta=1.e-5)

#     # todo: BUG! with center_method=4 the parameters 'self_defined_reference' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
    def test_2DImgcenter_method4searching_range_negativeself_defined_referenceTrue(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        """

    def test_2DImgcenter_method5searching_range_negativeself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.4190020263195038,
                    -0.4641904830932617,
                    -0.3882087171077728,
                    -0.363981693983078,
                    -0.3711523413658142,
                    -0.3704700767993927,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925971984863281,
                    -0.4149232506752014,
                    -0.437651127576828,
                    -0.4369301199913025,
                    -0.4610794484615326,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.47348228096961975,
                    -0.4543263614177704,
                    -0.44096705317497253,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    0.04223867505788803,
                    0.05326138064265251,
                    0.00950445607304573,
                    0.025885019451379776,
                    0.015371425077319145,
                    0.029651738703250885,
                    0.025623291730880737,
                    0.023996062576770782,
                    0.023316288366913795,
                    0.036265838891267776,
                    0.08996173739433289,
                    0.08004482835531235,
                    0.06996520608663559,
                    0.054167889058589935,
                    0.05099472403526306,
                    0.03554268181324005,
                    0.03604981303215027,
                    0.07005910575389862,
                    0.05675419792532921,
                    0.06729268282651901,
                    0.0977700874209404,
                    0.06120657920837402,
                    0.07206103950738907,
                    0.07158391922712326,
                    0.08500777184963226,
                    0.0807405561208725,
                    0.08976089954376221,
                    0.0955311730504036,
                    0.09733157604932785,
                    0.12153385579586029,
                    0.05622496455907822,
                    0.055230412632226944,
                    0.06047387048602104,
                    0.083279550075531,
                    0.07990697026252747,
                    0.0726018026471138,
                    0.10390138626098633,
                    0.12692593038082123,
                    0.08997569978237152,
                    0.05740870162844658,
                    -0.04246024042367935,
                    -0.06925756484270096,
                    0.013907666318118572,
                    0.007147038821130991,
                    0.015115763992071152,
                    2.521514761610888e-05,
                    0.008231942541897297,
                    -0.020773107185959816,
                    -0.03419971838593483,
                    -0.04089483246207237,
                    -0.14758038520812988,
                    -0.15034900605678558,
                    -0.06893885135650635,
                    -0.08000175654888153,
                    -0.11662115156650543,
                    -0.1119849756360054,
                    -0.11971069127321243,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.1453358680009842,
                    -0.26722002029418945,
                    -0.28808265924453735,
                    -0.17081019282341003,
                    -0.2014906108379364,
                    -0.21213501691818237,
                    -0.22736790776252747,
                    -0.2431577891111374,
                    -0.2552822530269623,
                    -0.23703187704086304,
                    -0.2393375188112259,
                    -0.38598349690437317,
                    -0.39209896326065063,
                    -0.3236374855041504,
                    -0.32626205682754517,
                    -0.3517284393310547,
                    -0.3602631986141205,
                    -0.3574155867099762,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.37732604146003723,
                ],
            atol= 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_new[1], -2,delta=1.e-5)
        self.assertAlmostEqual(return_new[2], -2,delta=1.e-5)

    def test_2DImgcenter_method6searching_range_negativeself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.3308292329311371,
                    -0.35217273235321045,
                    -0.35512134432792664,
                    -0.350458562374115,
                    -0.359945684671402,
                    -0.39080291986465454,
                    -0.37608614563941956,
                    -0.38802194595336914,
                    -0.38861629366874695,
                    -0.3226930797100067,
                    -0.3868977725505829,
                    -0.3901914656162262,
                    -0.39550280570983887,
                    -0.42173659801483154,
                    -0.42156097292900085,
                    -0.4091739058494568,
                    -0.42963382601737976,
                    -0.44400614500045776,
                    -0.475086510181427,
                    -0.3952586352825165,
                    -0.4318661689758301,
                    -0.44995662569999695,
                    -0.4360677897930145,
                    -0.4133113622665405,
                    -0.40818536281585693,
                    -0.404971718788147,
                    -0.38789165019989014,
                    -0.3995460569858551,
                    -0.40129554271698,
                    -0.43528422713279724,
                    0.06377732008695602,
                    0.0516175776720047,
                    0.06254758685827255,
                    0.05183619260787964,
                    0.057371824979782104,
                    0.057785991579294205,
                    0.06496492028236389,
                    0.07709789276123047,
                    0.08199524879455566,
                    0.04656369239091873,
                    0.03822452574968338,
                    0.03943261504173279,
                    0.022555435076355934,
                    0.03504655137658119,
                    0.06033632159233093,
                    0.044985294342041016,
                    0.06795906275510788,
                    0.08171253651380539,
                    0.06367428600788116,
                    0.055794257670640945,
                    0.08541927486658096,
                    0.09573178738355637,
                    0.08994194120168686,
                    0.10150208324193954,
                    0.10753349214792252,
                    0.11162584275007248,
                    0.12682822346687317,
                    0.09317834675312042,
                    0.07019657641649246,
                    0.08090898394584656,
                    0.07536952197551727,
                    0.07032203674316406,
                    0.06751537322998047,
                    0.1046244278550148,
                    0.11341626942157745,
                    0.06967370957136154,
                    0.043787259608507156,
                    0.04765136539936066,
                    0.04197842627763748,
                    0.05601690709590912,
                    -0.0025441027246415615,
                    0.00407454464584589,
                    -0.012391338124871254,
                    -0.010055913589894772,
                    -0.039092887192964554,
                    -0.04699311777949333,
                    -0.04953114315867424,
                    -0.0624074824154377,
                    -0.06937402486801147,
                    0.015018352307379246,
                    -0.09805400669574738,
                    -0.12606102228164673,
                    -0.11833950877189636,
                    -0.1293073147535324,
                    -0.13296213746070862,
                    -0.13198214769363403,
                    -0.15272535383701324,
                    -0.15730233490467072,
                    -0.15260660648345947,
                    -0.07028576731681824,
                    -0.22714689373970032,
                    -0.22935380041599274,
                    -0.2537437677383423,
                    -0.2669474482536316,
                    -0.27285727858543396,
                    -0.2577541172504425,
                    -0.2574229836463928,
                    -0.29796046018600464,
                    -0.29030466079711914,
                    -0.18199211359024048,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 1.1435747146606445,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2.897319793701172,delta=1.e-5)

    # todo: BUG! with center_method=7 the parameters 'self_defined_reference' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
    def test_2DImgcenter_method7searching_range_negativeself_defined_referenceTrue(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        """

    def test_2DImgcenter_method1searching_range_positiveself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0,delta=1.e-5)

    def test_2DImgcenter_method2searching_range_positiveself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0,delta=1.e-5)

    def test_2DImgcenter_method3searching_range_positiveself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol = 1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0, delta=1.e-5)

    # todo: BUG! with center_method=7 the parameters 'self_defined_reference' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
    def test_2DImgcenter_method4searching_range_positiveself_defined_referenceTrue(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        """

    def test_2DImgcenter_method5searching_range_positiveself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)

    def test_2DImgcenter_method6searching_range_positiveself_defined_referenceTrue(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=True,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.027042336761951447,
                    0.014855020679533482,
                    0.03139965236186981,
                    0.02444201149046421,
                    0.023595666512846947,
                    0.02515534870326519,
                    0.03634452819824219,
                    0.04597470164299011,
                    0.04802733287215233,
                    0.008277766406536102,
                    0.05272015556693077,
                    0.0504411980509758,
                    0.0324363149702549,
                    0.04111085832118988,
                    0.07108588516712189,
                    0.05468011647462845,
                    0.07220085710287094,
                    0.08974235504865646,
                    0.07849472016096115,
                    0.06792011857032776,
                    0.07261677831411362,
                    0.08594388514757156,
                    0.08015126734972,
                    0.09218797832727432,
                    0.09456785023212433,
                    0.1003597304224968,
                    0.12260011583566666,
                    0.09013902395963669,
                    0.061226870864629745,
                    0.07273389399051666,
                    0.08504937589168549,
                    0.07756480574607849,
                    0.07465694844722748,
                    0.10992223769426346,
                    0.1247936487197876,
                    0.08316926658153534,
                    0.055956464260816574,
                    0.05661878362298012,
                    0.05474178493022919,
                    0.06345605105161667,
                    0.005180867854505777,
                    0.01522734947502613,
                    -0.000501713715493679,
                    0.006846952252089977,
                    -0.024385372176766396,
                    -0.03626953437924385,
                    -0.038637466728687286,
                    -0.04929937422275543,
                    -0.06119173392653465,
                    0.019871994853019714,
                    -0.08833656460046768,
                    -0.11706489324569702,
                    -0.11149423569440842,
                    -0.12248949706554413,
                    -0.1253921389579773,
                    -0.12572383880615234,
                    -0.145720437169075,
                    -0.1504371166229248,
                    -0.14209379255771637,
                    -0.061612214893102646,
                    -0.2089587152004242,
                    -0.21109546720981598,
                    -0.23094895482063293,
                    -0.24550728499889374,
                    -0.25363898277282715,
                    -0.23638653755187988,
                    -0.23959262669086456,
                    -0.2770664095878601,
                    -0.2743607759475708,
                    -0.16435973346233368,
                    -0.331535279750824,
                    -0.3530108630657196,
                    -0.3613433241844177,
                    -0.3554689586162567,
                    -0.36153101921081543,
                    -0.39096301794052124,
                    -0.3745373487472534,
                    -0.39116182923316956,
                    -0.38424354791641235,
                    -0.31768864393234253,
                    -0.3667606711387634,
                    -0.3702090382575989,
                    -0.37202930450439453,
                    -0.3985354006290436,
                    -0.4038237929344177,
                    -0.3956374526023865,
                    -0.41437461972236633,
                    -0.4260222911834717,
                    -0.46088534593582153,
                    -0.37698498368263245,
                    -0.461565762758255,
                    -0.4792090356349945,
                    -0.47093281149864197,
                    -0.451316773891449,
                    -0.4412181079387665,
                    -0.43599119782447815,
                    -0.4239910840988159,
                    -0.43809208273887634,
                    -0.43915462493896484,
                    -0.46282583475112915,
                ],
                atol = 1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_new[1], 1.1435747146606445,delta =1.e-5)
        self.assertAlmostEqual(return_new[2], 0,delta=1.e-5)

    # todo: BUG! with center_method=7 the parameters 'self_defined_reference=True' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
    def test_2DImgcenter_method7searching_range_positiveself_defined_referenceTrue(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=True)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        """

    def test_2DImgcenter_method1searching_range_negativeself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.3703499436378479,
                    -0.3887350857257843,
                    -0.39406290650367737,
                    -0.31704390048980713,
                    -0.33054259419441223,
                    -0.3340435028076172,
                    -0.32923534512519836,
                    -0.3400946259498596,
                    -0.3604322671890259,
                    -0.3805030882358551,
                    -0.4799676835536957,
                    -0.5080035924911499,
                    -0.5012468099594116,
                    -0.46102362871170044,
                    -0.46638357639312744,
                    -0.47559505701065063,
                    -0.4862135946750641,
                    -0.4972260296344757,
                    -0.47051724791526794,
                    -0.4670148491859436,
                    -0.214565709233284,
                    -0.20879504084587097,
                    -0.23537161946296692,
                    -0.27080145478248596,
                    -0.2621292471885681,
                    -0.27169129252433777,
                    -0.24054843187332153,
                    -0.22561034560203552,
                    -0.24432404339313507,
                    -0.22685809433460236,
                    0.10862457752227783,
                    0.13046400249004364,
                    0.12984687089920044,
                    0.11155690997838974,
                    0.11670461297035217,
                    0.10330694913864136,
                    0.09238166362047195,
                    0.089042067527771,
                    0.11553214490413666,
                    0.10142993927001953,
                    0.08308745920658112,
                    0.059467729181051254,
                    0.03297220543026924,
                    0.03335859254002571,
                    0.018797576427459717,
                    0.032400548458099365,
                    0.02054790034890175,
                    0.04626963660120964,
                    0.041031841188669205,
                    0.04753470793366432,
                    0.11181235313415527,
                    0.08749543875455856,
                    0.08990707993507385,
                    0.09588098526000977,
                    0.11416783928871155,
                    0.1051185131072998,
                    0.10514253377914429,
                    0.1265401542186737,
                    0.14008067548274994,
                    0.12481226027011871,
                    0.011457648128271103,
                    0.00596990343183279,
                    0.000892100331839174,
                    0.04193740338087082,
                    0.04413039982318878,
                    0.047939855605363846,
                    0.049763184040784836,
                    0.07987479865550995,
                    0.051033299416303635,
                    0.014774000272154808,
                    -0.09101400524377823,
                    -0.1151394248008728,
                    -0.07287856936454773,
                    -0.010011367499828339,
                    -0.04046791046857834,
                    -0.05022193491458893,
                    -0.05946069210767746,
                    -0.0743170902132988,
                    -0.08090417832136154,
                    -0.08884717524051666,
                    -0.17596139013767242,
                    -0.19926026463508606,
                    -0.17419566214084625,
                    -0.09462296962738037,
                    -0.14621615409851074,
                    -0.14760564267635345,
                    -0.1468927562236786,
                    -0.16385626792907715,
                    -0.1634739488363266,
                    -0.16282308101654053,
                    -0.32476934790611267,
                    -0.37476593255996704,
                    -0.31187760829925537,
                    -0.25332340598106384,
                    -0.29557618498802185,
                    -0.3049299418926239,
                    -0.3340802788734436,
                    -0.3325638771057129,
                    -0.33298560976982117,
                    -0.33319368958473206,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], -2.616443395614624,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2.5323870182037354,delta=1.e-5)

    def test_2DImgcenter_method2searching_range_negativeself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.32363757491111755,
                    -0.32626211643218994,
                    -0.35172855854034424,
                    -0.36026331782341003,
                    -0.35741567611694336,
                    -0.35751232504844666,
                    -0.3892560601234436,
                    -0.3773261606693268,
                    -0.3859836161136627,
                    -0.3920990526676178,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.461079478263855,
                    -0.4608628749847412,
                    -0.47732916474342346,
                    -0.4734823405742645,
                    -0.45432642102241516,
                    -0.4409671723842621,
                    -0.438747763633728,
                    -0.42292165756225586,
                    -0.43765121698379517,
                    -0.43693017959594727,
                    0.00950438342988491,
                    0.025884946808218956,
                    0.015371355228126049,
                    0.029651662334799767,
                    0.025623228400945663,
                    0.023995986208319664,
                    0.02331620641052723,
                    0.03626576438546181,
                    0.042238593101501465,
                    0.05326130613684654,
                    0.06996522843837738,
                    0.05416791886091232,
                    0.05099474638700485,
                    0.035542700439691544,
                    0.03604983165860176,
                    0.07005912810564041,
                    0.0567542165517807,
                    0.0672926977276802,
                    0.08996175229549408,
                    0.08004484325647354,
                    0.07206105440855026,
                    0.07158391177654266,
                    0.08500777930021286,
                    0.0807405337691307,
                    0.08976089954376221,
                    0.095531165599823,
                    0.09733156859874725,
                    0.12153388559818268,
                    0.0977700874209404,
                    0.061206597834825516,
                    0.06047393009066582,
                    0.08327961713075638,
                    0.07990703731775284,
                    0.07260186225175858,
                    0.1039014384150505,
                    0.1269259750843048,
                    0.0899757668375969,
                    0.05740877985954285,
                    0.05622504651546478,
                    0.055230479687452316,
                    0.013907670974731445,
                    0.007147028110921383,
                    0.015115760266780853,
                    2.5212764739990234e-05,
                    0.008231937885284424,
                    -0.020773105323314667,
                    -0.03419971093535423,
                    -0.04089482128620148,
                    -0.04246025159955025,
                    -0.06925756484270096,
                    -0.06893885135650635,
                    -0.08000175654888153,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971069872379303,
                    -0.1273496150970459,
                    -0.12249225378036499,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.1503489911556244,
                    -0.17081011831760406,
                    -0.20149055123329163,
                    -0.21213491261005402,
                    -0.2273678332567215,
                    -0.24315768480300903,
                    -0.2552821636199951,
                    -0.23703177273273468,
                    -0.2393374741077423,
                    -0.2672199308872223,
                    -0.2880825996398926,
                ],
           atol=1.e-5 )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -3, delta=1.e-5)

    def test_2DImgcenter_method3searching_range_negativeself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.07990697026252747,
                    0.0726017951965332,
                    0.10390138626098633,
                    0.12692590057849884,
                    0.08997567743062973,
                    0.057408690452575684,
                    0.05622495710849762,
                    0.055230386555194855,
                    0.06047387421131134,
                    0.083279550075531,
                    0.015115716494619846,
                    2.518415385566186e-05,
                    0.008231890387833118,
                    -0.02077317237854004,
                    -0.03419975936412811,
                    -0.04089485853910446,
                    -0.04246028885245323,
                    -0.06925759464502335,
                    0.0139076579362154,
                    0.007146999705582857,
                    -0.11662118881940842,
                    -0.11198502033948898,
                    -0.1197107657790184,
                    -0.1273496448993683,
                    -0.12249229103326797,
                    -0.14533589780330658,
                    -0.14758045971393585,
                    -0.15034903585910797,
                    -0.06893887370824814,
                    -0.08000180870294571,
                    -0.21213501691818237,
                    -0.22736796736717224,
                    -0.24315780401229858,
                    -0.25528228282928467,
                    -0.23703189194202423,
                    -0.23933759331703186,
                    -0.26722002029418945,
                    -0.28808271884918213,
                    -0.17081023752689362,
                    -0.20149067044258118,
                    -0.3517284691333771,
                    -0.36026325821876526,
                    -0.3574156165122986,
                    -0.3575122356414795,
                    -0.38925600051879883,
                    -0.3773261606693268,
                    -0.3859836161136627,
                    -0.392098993062973,
                    -0.3236374855041504,
                    -0.32626208662986755,
                    -0.371152400970459,
                    -0.37047016620635986,
                    -0.3936239182949066,
                    -0.40711334347724915,
                    -0.3925972580909729,
                    -0.4149233102798462,
                    -0.41900211572647095,
                    -0.4641905426979065,
                    -0.3882087767124176,
                    -0.36398178339004517,
                    -0.47732892632484436,
                    -0.4734821617603302,
                    -0.45432621240615845,
                    -0.440966933965683,
                    -0.4387475550174713,
                    -0.42292144894599915,
                    -0.43765100836753845,
                    -0.43692997097969055,
                    -0.46107932925224304,
                    -0.4608626365661621,
                    0.015371562913060188,
                    0.029651865363121033,
                    0.02562340721487999,
                    0.023996181786060333,
                    0.023316407576203346,
                    0.03626594319939613,
                    0.042238786816596985,
                    0.053261492401361465,
                    0.009504588320851326,
                    0.02588515169918537,
                    0.050994690507650375,
                    0.03554262965917587,
                    0.03604977950453758,
                    0.07005906105041504,
                    0.056754156947135925,
                    0.06729266792535782,
                    0.0899617001414299,
                    0.08004476130008698,
                    0.0699651762843132,
                    0.054167840629816055,
                    0.08500783145427704,
                    0.08074060082435608,
                    0.08976096659898758,
                    0.09553123265504837,
                    0.09733163565397263,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066313624382,
                    0.07206108421087265,
                    0.07158397883176804,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 2,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 3,delta=1.e-5)

    "same bug as above"

    def test_2DImgcenter_method4searching_range_negativeself_defined_referenceFalse(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertTrue(array_equal(return_old[1], 15.868728637695312))
        self.assertTrue(array_equal(return_old[2], -13.827560424804688))
        """

    def test_2DImgcenter_method5searching_range_negativeself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.4190020263195038,
                    -0.4641904830932617,
                    -0.3882087171077728,
                    -0.363981693983078,
                    -0.3711523413658142,
                    -0.3704700767993927,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925971984863281,
                    -0.4149232506752014,
                    -0.437651127576828,
                    -0.4369301199913025,
                    -0.4610794484615326,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.47348228096961975,
                    -0.4543263614177704,
                    -0.44096705317497253,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    0.04223867505788803,
                    0.05326138064265251,
                    0.00950445607304573,
                    0.025885019451379776,
                    0.015371425077319145,
                    0.029651738703250885,
                    0.025623291730880737,
                    0.023996062576770782,
                    0.023316288366913795,
                    0.036265838891267776,
                    0.08996173739433289,
                    0.08004482835531235,
                    0.06996520608663559,
                    0.054167889058589935,
                    0.05099472403526306,
                    0.03554268181324005,
                    0.03604981303215027,
                    0.07005910575389862,
                    0.05675419792532921,
                    0.06729268282651901,
                    0.0977700874209404,
                    0.06120657920837402,
                    0.07206103950738907,
                    0.07158391922712326,
                    0.08500777184963226,
                    0.0807405561208725,
                    0.08976089954376221,
                    0.0955311730504036,
                    0.09733157604932785,
                    0.12153385579586029,
                    0.05622496455907822,
                    0.055230412632226944,
                    0.06047387048602104,
                    0.083279550075531,
                    0.07990697026252747,
                    0.0726018026471138,
                    0.10390138626098633,
                    0.12692593038082123,
                    0.08997569978237152,
                    0.05740870162844658,
                    -0.04246024042367935,
                    -0.06925756484270096,
                    0.013907666318118572,
                    0.007147038821130991,
                    0.015115763992071152,
                    2.521514761610888e-05,
                    0.008231942541897297,
                    -0.020773107185959816,
                    -0.03419971838593483,
                    -0.04089483246207237,
                    -0.14758038520812988,
                    -0.15034900605678558,
                    -0.06893885135650635,
                    -0.08000175654888153,
                    -0.11662115156650543,
                    -0.1119849756360054,
                    -0.11971069127321243,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.1453358680009842,
                    -0.26722002029418945,
                    -0.28808265924453735,
                    -0.17081019282341003,
                    -0.2014906108379364,
                    -0.21213501691818237,
                    -0.22736790776252747,
                    -0.2431577891111374,
                    -0.2552822530269623,
                    -0.23703187704086304,
                    -0.2393375188112259,
                    -0.38598349690437317,
                    -0.39209896326065063,
                    -0.3236374855041504,
                    -0.32626205682754517,
                    -0.3517284393310547,
                    -0.3602631986141205,
                    -0.3574155867099762,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.37732604146003723,
                ],
            atol = 1.e-5)
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], -2,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2,delta=1.e-5)

    def test_2DImgcenter_method6searching_range_negativeself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=-1,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    -0.3308292329311371,
                    -0.35217273235321045,
                    -0.35512134432792664,
                    -0.350458562374115,
                    -0.359945684671402,
                    -0.39080291986465454,
                    -0.37608614563941956,
                    -0.38802194595336914,
                    -0.38861629366874695,
                    -0.3226930797100067,
                    -0.3868977725505829,
                    -0.3901914656162262,
                    -0.39550280570983887,
                    -0.42173659801483154,
                    -0.42156097292900085,
                    -0.4091739058494568,
                    -0.42963382601737976,
                    -0.44400614500045776,
                    -0.475086510181427,
                    -0.3952586352825165,
                    -0.4318661689758301,
                    -0.44995662569999695,
                    -0.4360677897930145,
                    -0.4133113622665405,
                    -0.40818536281585693,
                    -0.404971718788147,
                    -0.38789165019989014,
                    -0.3995460569858551,
                    -0.40129554271698,
                    -0.43528422713279724,
                    0.06377732008695602,
                    0.0516175776720047,
                    0.06254758685827255,
                    0.05183619260787964,
                    0.057371824979782104,
                    0.057785991579294205,
                    0.06496492028236389,
                    0.07709789276123047,
                    0.08199524879455566,
                    0.04656369239091873,
                    0.03822452574968338,
                    0.03943261504173279,
                    0.022555435076355934,
                    0.03504655137658119,
                    0.06033632159233093,
                    0.044985294342041016,
                    0.06795906275510788,
                    0.08171253651380539,
                    0.06367428600788116,
                    0.055794257670640945,
                    0.08541927486658096,
                    0.09573178738355637,
                    0.08994194120168686,
                    0.10150208324193954,
                    0.10753349214792252,
                    0.11162584275007248,
                    0.12682822346687317,
                    0.09317834675312042,
                    0.07019657641649246,
                    0.08090898394584656,
                    0.07536952197551727,
                    0.07032203674316406,
                    0.06751537322998047,
                    0.1046244278550148,
                    0.11341626942157745,
                    0.06967370957136154,
                    0.043787259608507156,
                    0.04765136539936066,
                    0.04197842627763748,
                    0.05601690709590912,
                    -0.0025441027246415615,
                    0.00407454464584589,
                    -0.012391338124871254,
                    -0.010055913589894772,
                    -0.039092887192964554,
                    -0.04699311777949333,
                    -0.04953114315867424,
                    -0.0624074824154377,
                    -0.06937402486801147,
                    0.015018352307379246,
                    -0.09805400669574738,
                    -0.12606102228164673,
                    -0.11833950877189636,
                    -0.1293073147535324,
                    -0.13296213746070862,
                    -0.13198214769363403,
                    -0.15272535383701324,
                    -0.15730233490467072,
                    -0.15260660648345947,
                    -0.07028576731681824,
                    -0.22714689373970032,
                    -0.22935380041599274,
                    -0.2537437677383423,
                    -0.2669474482536316,
                    -0.27285727858543396,
                    -0.2577541172504425,
                    -0.2574229836463928,
                    -0.29796046018600464,
                    -0.29030466079711914,
                    -0.18199211359024048,
                ],
                atol= 1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 1.1435747146606445,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], -2.897319793701172,delta=1.e-5)

    # same bug as above
    def test_2DImgcenter_method7searching_range_negativeself_defined_referenceFalse(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=-1,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertTrue(array_equal(return_old[1], -0.8430328369140625))
        self.assertTrue(array_equal(return_old[2], 8.518508911132812))
        """

    def test_2DImgcenter_method1searching_range_positiveself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=1,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)

    def test_2DImgcenter_method2searching_range_positiveself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=2,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol =1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0, delta=1.e-5)

    def test_2DImgcenter_method3searching_range_positiveself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=3,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol= 1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)
#
#     # todo: BUG! with center_method=4 the parameters 'self_defined_reference' will be used as EMData::EMData* (the reference parameter) by 'fondamentals.ccf(image_to_be_centered, reference) but it is a boolean
#     def test_2DImgcenter_method4searching_range_positiveself_defined_referenceFalse(
#         self
#     ):
#         self.assertTrue(True)
#         """
#         return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
#         return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=4,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
#         self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
#         self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
#         self.assertEqual(return_new[1], return_old[1])
#         self.assertEqual(return_new[2], return_old[2])
#         self.assertTrue(array_equal(return_old[1], 0.0))
#         self.assertTrue(array_equal(return_old[2], 0.0))
#         """
#
    def test_2DImgcenter_method5searching_range_positiveself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=5,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.009504487738013268,
                    0.025885045528411865,
                    0.015371453016996384,
                    0.029651757329702377,
                    0.025623315945267677,
                    0.023996081203222275,
                    0.02331630326807499,
                    0.03626584634184837,
                    0.04223868250846863,
                    0.05326139181852341,
                    0.0699651837348938,
                    0.054167866706848145,
                    0.05099470168352127,
                    0.035542648285627365,
                    0.03604979068040848,
                    0.07005907595157623,
                    0.05675417184829712,
                    0.06729266047477722,
                    0.0899617001414299,
                    0.08004478365182877,
                    0.07206102460622787,
                    0.07158391177654266,
                    0.08500776439905167,
                    0.0807405486702919,
                    0.08976089954376221,
                    0.0955311581492424,
                    0.09733156859874725,
                    0.12153387069702148,
                    0.0977700799703598,
                    0.06120658665895462,
                    0.060473889112472534,
                    0.0832795575261116,
                    0.07990698516368866,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.057408712804317474,
                    0.05622498318552971,
                    0.05523041635751724,
                    0.013907660730183125,
                    0.007147015072405338,
                    0.015115739777684212,
                    2.5200843083439395e-05,
                    0.008231916464865208,
                    -0.020773133262991905,
                    -0.034199733287096024,
                    -0.04089483991265297,
                    -0.04246027022600174,
                    -0.06925757974386215,
                    -0.06893885880708694,
                    -0.08000177145004272,
                    -0.11662116646766663,
                    -0.11198499798774719,
                    -0.11971072107553482,
                    -0.1273496150970459,
                    -0.12249227613210678,
                    -0.14533588290214539,
                    -0.14758042991161346,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.201490581035614,
                    -0.2121349424123764,
                    -0.22736789286136627,
                    -0.24315772950649261,
                    -0.2552821934223175,
                    -0.23703181743621826,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.32363754510879517,
                    -0.32626208662986755,
                    -0.3517284393310547,
                    -0.36026325821876526,
                    -0.35741564631462097,
                    -0.3575122654438019,
                    -0.38925600051879883,
                    -0.3773261308670044,
                    -0.38598352670669556,
                    -0.3920990228652954,
                    -0.3882087171077728,
                    -0.3639817237854004,
                    -0.3711523413658142,
                    -0.3704700469970703,
                    -0.39362382888793945,
                    -0.40711328387260437,
                    -0.3925972282886505,
                    -0.4149232506752014,
                    -0.4190019965171814,
                    -0.4641904830932617,
                    -0.4610793888568878,
                    -0.46086275577545166,
                    -0.4773290455341339,
                    -0.473482221364975,
                    -0.4543263018131256,
                    -0.44096702337265015,
                    -0.43874767422676086,
                    -0.4229215383529663,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 0.0,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)

    def test_2DImgcenter_method6searching_range_positiveself_defined_referenceFalse(
        self
    ):
        return_new = fu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        return_old = oldfu.center_2D(
            image_to_be_centered=IMAGE_2D,
            center_method=6,
            searching_range=2,
            Gauss_radius_inner=2,
            Gauss_radius_outter=7,
            self_defined_reference=False,
        )
        self.assertTrue(
            array_equal(return_new[0].get_2dview(), return_old[0].get_2dview())
        )
        self.assertTrue(
            allclose(
                return_new[0].get_2dview().flatten(),
                [
                    0.027042336761951447,
                    0.014855020679533482,
                    0.03139965236186981,
                    0.02444201149046421,
                    0.023595666512846947,
                    0.02515534870326519,
                    0.03634452819824219,
                    0.04597470164299011,
                    0.04802733287215233,
                    0.008277766406536102,
                    0.05272015556693077,
                    0.0504411980509758,
                    0.0324363149702549,
                    0.04111085832118988,
                    0.07108588516712189,
                    0.05468011647462845,
                    0.07220085710287094,
                    0.08974235504865646,
                    0.07849472016096115,
                    0.06792011857032776,
                    0.07261677831411362,
                    0.08594388514757156,
                    0.08015126734972,
                    0.09218797832727432,
                    0.09456785023212433,
                    0.1003597304224968,
                    0.12260011583566666,
                    0.09013902395963669,
                    0.061226870864629745,
                    0.07273389399051666,
                    0.08504937589168549,
                    0.07756480574607849,
                    0.07465694844722748,
                    0.10992223769426346,
                    0.1247936487197876,
                    0.08316926658153534,
                    0.055956464260816574,
                    0.05661878362298012,
                    0.05474178493022919,
                    0.06345605105161667,
                    0.005180867854505777,
                    0.01522734947502613,
                    -0.000501713715493679,
                    0.006846952252089977,
                    -0.024385372176766396,
                    -0.03626953437924385,
                    -0.038637466728687286,
                    -0.04929937422275543,
                    -0.06119173392653465,
                    0.019871994853019714,
                    -0.08833656460046768,
                    -0.11706489324569702,
                    -0.11149423569440842,
                    -0.12248949706554413,
                    -0.1253921389579773,
                    -0.12572383880615234,
                    -0.145720437169075,
                    -0.1504371166229248,
                    -0.14209379255771637,
                    -0.061612214893102646,
                    -0.2089587152004242,
                    -0.21109546720981598,
                    -0.23094895482063293,
                    -0.24550728499889374,
                    -0.25363898277282715,
                    -0.23638653755187988,
                    -0.23959262669086456,
                    -0.2770664095878601,
                    -0.2743607759475708,
                    -0.16435973346233368,
                    -0.331535279750824,
                    -0.3530108630657196,
                    -0.3613433241844177,
                    -0.3554689586162567,
                    -0.36153101921081543,
                    -0.39096301794052124,
                    -0.3745373487472534,
                    -0.39116182923316956,
                    -0.38424354791641235,
                    -0.31768864393234253,
                    -0.3667606711387634,
                    -0.3702090382575989,
                    -0.37202930450439453,
                    -0.3985354006290436,
                    -0.4038237929344177,
                    -0.3956374526023865,
                    -0.41437461972236633,
                    -0.4260222911834717,
                    -0.46088534593582153,
                    -0.37698498368263245,
                    -0.461565762758255,
                    -0.4792090356349945,
                    -0.47093281149864197,
                    -0.451316773891449,
                    -0.4412181079387665,
                    -0.43599119782447815,
                    -0.4239910840988159,
                    -0.43809208273887634,
                    -0.43915462493896484,
                    -0.46282583475112915,
                ],
            )
        )
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertAlmostEqual(return_old[1], 1.1435747146606445,delta=1.e-5)
        self.assertAlmostEqual(return_old[2], 0.0,delta=1.e-5)

    # same bug as above
    def test_2DImgcenter_method7searching_range_positiveself_defined_referenceFalse(
        self
    ):
        self.assertTrue(True)
        """
        return_new = fu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        return_old = oldfu.center_2D(image_to_be_centered=IMAGE_2D ,center_method=7,searching_range=2,Gauss_radius_inner=2,Gauss_radius_outter=7,self_defined_reference=False)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(array_equal(return_new.get_2dview().flatten(), ))
        self.assertEqual(return_new[1], return_old[1])
        self.assertEqual(return_new[2], return_old[2])
        self.assertTrue(array_equal(return_old[1], 0.0))
        self.assertTrue(array_equal(return_old[2], 0.0))
        """


class Test_compose_transform3m(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.compose_transform3()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.compose_transform3()
        self.assertEqual(
            str(cm_new.exception),
            "compose_transform3() missing 14 required positional arguments: 'phi1', 'theta1', 'psi1', 'sx1', 'sy1', 'sz1', 'scale1', 'phi2', 'theta2', 'psi2', 'sx2', 'sy2', 'sz2', and 'scale2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_compose_transform3m(self):
        return_old = oldfu.compose_transform3(
            phi1=1.0,
            theta1=2,
            psi1=2,
            sx1=2.0,
            sy1=3.0,
            sz1=1,
            scale1=1.0,
            phi2=2.0,
            theta2=3,
            psi2=4,
            sx2=3.0,
            sy2=4.0,
            scale2=1.0,
            sz2=2,
        )
        return_new = fu.compose_transform3(
            phi1=1.0,
            theta1=2,
            psi1=2,
            sx1=2.0,
            sy1=3.0,
            sz1=1,
            scale1=1.0,
            phi2=2.0,
            theta2=3,
            psi2=4,
            sx2=3.0,
            sy2=4.0,
            scale2=1.0,
            sz2=2,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_old,
                [
                    3.402106069683171,
                    4.997074136852235,
                    5.60154991083283,
                    5.24754524230957,
                    6.778360366821289,
                    3.108717203140259,
                    1.0,
                ],
                atol=1.e-5
            )
        )


class Test_model_cylinder(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_cylinder()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_cylinder()
        self.assertEqual(
            str(cm_new.exception),
            "model_cylinder() missing 4 required positional arguments: 'radius', 'nx', 'ny', and 'nz'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_model_cylinder(self):
        return_old = oldfu.model_cylinder(radius=2, nx=5, ny=5, nz=5)
        return_new = fu.model_cylinder(radius=2, nx=5, ny=5, nz=5)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )


class Test_model_rotated_rectangle2D(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_rotated_rectangle2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_rotated_rectangle2D()
        self.assertEqual(
            str(cm_new.exception),
            "model_rotated_rectangle2D() missing 4 required positional arguments: 'radius_long', 'radius_short', 'nx', and 'ny'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_return_img(self):
        return_old = oldfu.model_rotated_rectangle2D(
            radius_long=4, radius_short=2, nx=10, ny=10, angle=90, return_numpy=False
        )
        return_new = fu.model_rotated_rectangle2D(
            radius_long=4, radius_short=2, nx=10, ny=10, angle=90, return_numpy=False
        )
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_return_numpy(self):
        return_old = oldfu.model_rotated_rectangle2D(
            radius_long=4, radius_short=2, nx=10, ny=10, angle=90, return_numpy=True
        )
        return_new = fu.model_rotated_rectangle2D(
            radius_long=4, radius_short=2, nx=10, ny=10, angle=90, return_numpy=True
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new.flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )


class Test_send_string_to_all(unittest.TestCase):
    def test_wrong_number_params(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.send_string_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.send_string_to_all()
        self.assertEqual(str(cm_new.exception), "send_string_to_all() missing 1 required positional argument: 'str_to_send'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_send_string_to_all(self):
        return_old = oldfu.send_string_to_all(str_to_send="sphire", source_node=0)
        return_new = fu.send_string_to_all(str_to_send="sphire", source_node=0)
        self.assertEqual(return_new, return_old)

""" end: new in sphire 1.3"""


class Test_amoeba(unittest.TestCase):

    # copied from filter.py --> fit_tanh
    @staticmethod
    def fit_tanh_func(args, data):
        from math import pi, tanh

        v = 0.0
        if data[1][0] < 0.0:
            data[1][0] *= -1.0
        for i in range(len(data[0])):
            fsc = 2 * data[1][i] / (1.0 + data[1][i])
            if args[0] == 0 or args[1] == 0:
                qt = 0
            else:
                qt = fsc - 0.5 * (
                    tanh(pi * (data[0][i] + args[0]) / 2.0 / args[1] / args[0])
                    - tanh(pi * (data[0][i] - args[0]) / 2.0 / args[1] / args[0])
                )
            v -= qt * qt
        return v

    @staticmethod
    def wrongfunction(a, b):
        return a + b

    @staticmethod
    def function_lessParam():
        return 0

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba()
        self.assertEqual(
            str(cm_new.exception), "amoeba() missing 3 required positional arguments: 'var', 'scale', and 'func'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_amoeba(self):
        """
        I did not use 'self.assertTrue(allclose(return_new, return_old, atol=TOLERANCE,equal_nan=True))' because the 'nosetets' spawns the following error
                TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
        """

        return_new = fu.amoeba(
            var=[0.0, 0.1],
            scale=[0.05, 0.05],
            func=self.fit_tanh_func,
            ftolerance=1.0e-4,
            xtolerance=1.0e-4,
            itmax=500,
            data=(
                (0.0, 0.05, 0, 10, 0.15, 0.2),
                (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                (8, 9, 5, 77, 98, 200),
            ),
        )
        return_old = oldfu.amoeba(
            var=[0.0, 0.1],
            scale=[0.05, 0.05],
            func=self.fit_tanh_func,
            ftolerance=1.0e-4,
            xtolerance=1.0e-4,
            itmax=500,
            data=(
                (0.0, 0.05, 0, 10, 0.15, 0.2),
                (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                (8, 9, 5, 77, 98, 200),
            ),
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, ([0.0, 0.1], 0.0, 500)))

    def test_amoeba_with_wrongfunction(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.wrongfunction,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=(
                    (0.0, 0.05, 0, 10, 0.15, 0.2),
                    (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                    (8, 9, 5, 77, 98, 200),
                ),
            )
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.wrongfunction,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=(
                    (0.0, 0.05, 0, 10, 0.15, 0.2),
                    (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                    (8, 9, 5, 77, 98, 200),
                ),
            )
        self.assertEqual(
            str(cm_new.exception),
            "wrongfunction() got an unexpected keyword argument 'data'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_amoeba_with_function_lessParam_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.function_lessParam,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=(
                    (0.0, 0.05, 0, 10, 0.15, 0.2),
                    (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                    (8, 9, 5, 77, 98, 200),
                ),
            )
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.function_lessParam,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=(
                    (0.0, 0.05, 0, 10, 0.15, 0.2),
                    (0, 0.2, 0.4, 0.6, 0.8, 1.0),
                    (8, 9, 5, 77, 98, 200),
                ),
            )
        self.assertEqual(
            str(cm_new.exception), "function_lessParam() got an unexpected keyword argument 'data'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_amoeba_with_NoneType_data_returns_TypeError_NoneType_obj_hasnot_attribute__getitem__(
        self
    ):
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.fit_tanh_func,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=None,
            )
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba(
                var=[0.0, 0.1],
                scale=[0.05, 0.05],
                func=self.fit_tanh_func,
                ftolerance=1.0e-4,
                xtolerance=1.0e-4,
                itmax=500,
                data=None,
            )
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object is not subscriptable"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_compose_transform2(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.compose_transform2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.compose_transform2()
        self.assertEqual(
            str(cm_new.exception),
            "compose_transform2() missing 8 required positional arguments: 'alpha1', 'sx1', 'sy1', 'scale1', 'alpha2', 'sx2', 'sy2', and 'scale2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):
        """ values got from 'pickle files/utilities/utilities.compose_transform2'"""
        return_new = fu.compose_transform2(
            alpha1=0,
            sx1=2.90828285217,
            sy1=-0.879739010334,
            scale1=1.0,
            alpha2=156.512610336,
            sx2=0,
            sy2=0,
            scale2=1.0,
        )
        return_old = oldfu.compose_transform2(
            alpha1=0,
            sx1=2.90828285217,
            sy1=-0.879739010334,
            scale1=1.0,
            alpha2=156.512610336,
            sx2=0,
            sy2=0,
            scale2=1.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(allclose(return_new,(156.51260982858517, -3.0179426670074463, -0.35223737359046936, 1.0),atol=1.e-5))

    def test_null_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform2(
                alpha1=0,
                sx1=2.90828285217,
                sy1=-0.879739010334,
                scale1=0,
                alpha2=0,
                sx2=2.90828285217,
                sy2=-0.879739010334,
                scale2=1.0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform2(
                alpha1=0,
                sx1=2.90828285217,
                sy1=-0.879739010334,
                scale1=0,
                alpha2=0,
                sx2=2.90828285217,
                sy2=-0.879739010334,
                scale2=1.0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(
            msg[3],
            "The scale factor in a Transform object must be positive and non zero",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_negative_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform2(
                alpha1=0,
                sx1=2.90828285217,
                sy1=-0.879739010334,
                scale1=-1.0,
                alpha2=0,
                sx2=2.90828285217,
                sy2=-0.879739010334,
                scale2=1.0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform2(
                alpha1=0,
                sx1=2.90828285217,
                sy1=-0.879739010334,
                scale1=-1.0,
                alpha2=0,
                sx2=2.90828285217,
                sy2=-0.879739010334,
                scale2=1.0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(
            msg[3],
            "The scale factor in a Transform object must be positive and non zero",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_compose_transform3(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.compose_transform3()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.compose_transform3()
        self.assertEqual(
            str(cm_new.exception),
            "compose_transform3() missing 14 required positional arguments: 'phi1', 'theta1', 'psi1', 'sx1', 'sy1', 'sz1', 'scale1', 'phi2', 'theta2', 'psi2', 'sx2', 'sy2', 'sz2', and 'scale2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):
        """ values got from 'pickle files/utilities/utilities.compose_transform3'"""
        return_new = fu.compose_transform3(
            phi1=0.0,
            theta1=0.0,
            psi1=0.0,
            sx1=0.0,
            sy1=0.0,
            sz1=0.0,
            scale1=1.0,
            phi2=0.328125,
            theta2=0.0,
            psi2=0.0,
            sx2=0.001220703125,
            sy2=0.0,
            sz2=0.001220703125,
            scale2=1.0,
        )
        return_old = oldfu.compose_transform3(
            phi1=0.0,
            theta1=0.0,
            psi1=0.0,
            sx1=0.0,
            sy1=0.0,
            sz1=0.0,
            scale1=1.0,
            phi2=0.328125,
            theta2=0.0,
            psi2=0.0,
            sx2=0.001220703125,
            sy2=0.0,
            sz2=0.001220703125,
            scale2=1.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                (
                    0.0,
                    0.0,
                    0.32812498609601065,
                    0.001220703125,
                    0.0,
                    0.001220703125,
                    1.0,
                ),
                atol=1.e-5
            )
        )

    def test_null_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform3(
                phi1=0.0,
                theta1=0.0,
                psi1=0.0,
                sx1=0.0,
                sy1=0.0,
                sz1=0.0,
                scale1=0,
                phi2=0.328125,
                theta2=0.0,
                psi2=0.0,
                sx2=0.001220703125,
                sy2=0.0,
                sz2=0.001220703125,
                scale2=1.0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform3(
                phi1=0.0,
                theta1=0.0,
                psi1=0.0,
                sx1=0.0,
                sy1=0.0,
                sz1=0.0,
                scale1=0,
                phi2=0.328125,
                theta2=0.0,
                psi2=0.0,
                sx2=0.001220703125,
                sy2=0.0,
                sz2=0.001220703125,
                scale2=1.0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(
            msg[3],
            "The scale factor in a Transform object must be positive and non zero",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_negative_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform3(
                phi1=0.0,
                theta1=0.0,
                psi1=0.0,
                sx1=0.0,
                sy1=0.0,
                sz1=0.0,
                scale1=-1.0,
                phi2=0.328125,
                theta2=0.0,
                psi2=0.0,
                sx2=0.001220703125,
                sy2=0.0,
                sz2=0.001220703125,
                scale2=1.0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform3(
                phi1=0.0,
                theta1=0.0,
                psi1=0.0,
                sx1=0.0,
                sy1=0.0,
                sz1=0.0,
                scale1=-1.0,
                phi2=0.328125,
                theta2=0.0,
                psi2=0.0,
                sx2=0.001220703125,
                sy2=0.0,
                sz2=0.001220703125,
                scale2=1.0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(
            msg[3],
            "The scale factor in a Transform object must be positive and non zero",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_combine_params2(unittest.TestCase):
    """ I did not use the 'pickle files/utilities/utilities.combine_params2' values because they are all 0 values"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.combine_params2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.combine_params2()
        self.assertEqual(
            str(cm_new.exception),
            "combine_params2() missing 8 required positional arguments: 'alpha1', 'sx1', 'sy1', 'mirror1', 'alpha2', 'sx2', 'sy2', and 'mirror2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_combine_params2(self):
        return_new = fu.combine_params2(
            alpha1=0.0,
            sx1=1.0,
            sy1=1.0,
            mirror1=1,
            alpha2=1.0,
            sx2=2.0,
            sy2=0.0,
            mirror2=0,
        )
        return_old = oldfu.combine_params2(
            alpha1=0.0,
            sx1=1.0,
            sy1=1.0,
            mirror1=1,
            alpha2=1.0,
            sx2=2.0,
            sy2=0.0,
            mirror2=0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(allclose(return_new,(359.0000000534512, -1.0176047086715698, 1.0173001289367676, 1),atol=1.e-5))


class Test_inverse_transform2(unittest.TestCase):
    """ I did not use the 'pickle files/utilities/utilities.inverse_transform2' values because they are all 0 values"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.inverse_transform2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.inverse_transform2()
        self.assertEqual(
            str(cm_new.exception),
            "inverse_transform2() missing 1 required positional argument: 'alpha'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_inverse_transform2(self):
        return_new = fu.inverse_transform2(alpha=1.0, tx=2.2, ty=1.0, mirror=0)
        return_old = oldfu.inverse_transform2(alpha=1.0, tx=2.2, ty=1.0, mirror=0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(allclose(return_new,(358.9999999938496, -2.1822125911712646, -1.0382429361343384, 0),atol=1.e-5))


""" How may I REALLY test it?"""
"""
class Test_drop_image(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.drop_image()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.drop_image()
        self.assertEqual(str(cm_new.exception), "drop_image() takes at least 2 arguments (0 given)")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_invalid_type_returns_UnboundLocalError_imgtype_referenced_before_assignment(self):
        destination ='output.hdf'
        with self.assertRaises(UnboundLocalError) as cm_new:
            fu.drop_image(IMAGE_2D, destination, itype="invalid")
        with self.assertRaises(UnboundLocalError) as cm_old:
            oldfu.drop_image(IMAGE_2D, destination, itype="invalid")
        self.assertEqual(str(cm_new.exception), "local variable 'imgtype' referenced before assignment")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_destination_is_not_a_file_returns_error_msg(self):
        destination = 3
        return_new = fu.drop_image(IMAGE_2D, destination, itype="h")
        return_old = oldfu.drop_image(IMAGE_2D, destination, itype="h")
        self.assertTrue(return_new is None)
        self.assertTrue(return_old is None)

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_drop_image2D_true_should_return_equal_objects1(self):
        destination ='output.hdf'
        return_new = fu.drop_image(IMAGE_2D, destination, itype="h")
        return_old = oldfu.drop_image(IMAGE_2D, destination, itype="h")

        if return_new is not None   and  return_old is not None:
            self.assertTrue(return_new, return_old)

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_drop_image_true_should_return_equal_objects2(self):
        filepath = path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.drop_image")
        with open(filepath, 'rb') as rb:
            argum = pickle_load(rb)

        print(argum)

        (imagename, destination) = argum[0]
        destination = 'output.hdf'
        return_new = fu.drop_image(imagename, destination, itype="h")
        return_old = oldfu.drop_image(imagename, destination, itype="h")

        if return_new is not None   and  return_old is not None:
            self.assertTrue(return_new, return_old)
"""


class Test_even_angles(unittest.TestCase):
    """ I did not changed the 'phiEqpsi' params because it is used in 'even_angles_cd' I'll test it there"""

    def test_default_values(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="c1",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="c1",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 0.0, 0.0],
                    [102.5624397820863, 8.409807949596694, 257.43756021791364],
                    [175.28184168449116, 11.903989804110001, 184.71815831550884],
                    [234.81899085328783, 14.592550602033418, 125.1810091467122],
                    [286.52113069039967, 16.865343252479008, 73.478869309600327],
                    [332.89249973858841, 18.873236840047255, 27.107500261411587],
                    [15.350997945238817, 20.69354123118596, 344.64900205476124],
                    [54.760293521450905, 22.37214549396397, 305.23970647854912],
                    [91.727719586672706, 23.938926249214624, 268.27228041332728],
                    [126.67925988880424, 25.41462091516098, 233.32074011119573],
                    [159.93126768874427, 26.81431796194859, 200.06873231125576],
                    [191.72626852098327, 28.149400619646084, 168.27373147901676],
                    [222.25501416086877, 29.428707176867, 137.74498583913123],
                    [251.6707339535308, 30.659262305350033, 108.32926604646923],
                    [280.09871166816117, 31.846758629170495, 79.901288331838828],
                    [307.64293448395898, 32.995885473579534, 52.357065516041018],
                    [334.39083847001103, 34.11056017878775, 25.609161529988967],
                    [0.42677669506366556, 35.194095100409235, 359.57322330493639],
                    [25.794606434997782, 36.249320882899376, 334.20539356500217],
                    [50.559654291516139, 37.278679231322116, 309.44034570848385],
                    [74.770232732225381, 38.2842939251198, 285.2297672677746],
                    [98.468827134074971, 39.26802600175335, 261.53117286592499],
                    [121.69303677671941, 40.231517219359155, 238.3069632232806],
                    [144.4763293594925, 41.17622470375671, 215.52367064050748],
                    [166.84865229059051, 42.10344887074584, 193.15134770940949],
                    [188.83693262466142, 43.014356152771704, 171.16306737533864],
                    [210.46548946865465, 43.909997664475156, 149.53451053134535],
                    [231.75637688070145, 44.79132466007832, 128.24362311929855],
                    [252.72967105963514, 45.65920143165515, 107.27032894036483],
                    [273.40371249950607, 46.51441614768202, 86.596287500493929],
                    [293.7953114483945, 47.357690020060026, 66.2046885516055],
                    [313.91992324589262, 48.1896851042214, 46.080076754107381],
                    [333.79179876604201, 49.01101097344977, 26.208201233957993],
                    [353.42411415385686, 49.822230459852115, 6.5758858461431373],
                    [12.839083235960516, 50.62386461673009, 347.16091676403948],
                    [32.02805535274598, 51.41639702767674, 327.97194464725408],
                    [51.011600859315614, 52.20027756457276, 308.98839914068435],
                    [69.799586144482291, 52.975925678303284, 290.2004138555177],
                    [88.401239698292727, 53.743733291363625, 271.59876030170722],
                    [106.82521050148785, 54.50406734974836, 253.17478949851215],
                    [125.07961980182155, 55.25727208199666, 234.92038019817846],
                    [143.17210717208275, 56.00367100552329, 216.82789282791725],
                    [161.10987160517593, 56.74356871403049, 198.89012839482405],
                    [178.89970828662715, 57.4772524745885, 181.10029171337283],
                    [196.54804158963, 58.20499365866951, 163.45195841037003],
                    [214.06095475847701, 58.92704902784667, 145.93904524152299],
                    [231.44421667996505, 59.64366189189109, 128.55578332003495],
                    [248.70330608674968, 60.355063154503576, 111.29669391325035],
                    [265.84343348975648, 61.06147225981934, 94.156566510243522],
                    [282.86956109711195, 61.763098051052104, 77.130438902888045],
                    [299.78642094339619, 62.46013955114206, 60.213579056603805],
                    [316.59853142434207, 63.152786673995614, 43.40146857565793],
                    [333.31021240759083, 63.84122087381428, 26.689787592409175],
                    [349.92559906909207, 64.52561573907757, 10.074400930907927],
                    [6.4586545866518463, 65.20613753694339, 353.54134541334815],
                    [22.893181806532958, 65.88294571313848, 337.10681819346701],
                    [39.242833985512988, 66.55619335181605, 320.75716601448698],
                    [55.511124699098673, 67.22602759934011, 304.48887530090133],
                    [71.701436996410379, 67.8925900555079, 288.29856300358961],
                    [87.81703187337213, 68.55601713533103, 272.18296812662788],
                    [103.86105612808187, 69.21644040415431, 256.13894387191817],
                    [119.8365496554388, 69.87398688859322, 240.16345034456117],
                    [135.74645223213611, 70.52877936550931, 224.25354776786389],
                    [151.59360983787678, 71.18093663101206, 208.40639016212322],
                    [167.38078055404094, 71.83057375127423, 192.61921944595906],
                    [183.11064007694512, 72.47780229676785, 176.88935992305483],
                    [198.78578687921549, 73.12273056137076, 161.21421312078451],
                    [214.40874704959094, 73.76546376765336, 145.59125295040906],
                    [229.98197883862355, 74.40610425953089, 130.01802116137645],
                    [245.50787693521318, 75.04475168335667, 114.49212306478682],
                    [260.98877649665752, 75.68150315843295, 99.011223503342478],
                    [276.42695695288819, 76.31645343782941, 83.57304304711181],
                    [291.82464560376934, 76.94969506032008, 68.175354396230659],
                    [307.18402102672974, 77.58131849418093, 52.815978973270262],
                    [322.50721631056541, 78.21141227352726, 37.492783689434589],
                    [337.79632212996364, 78.84006312781455, 22.203677870036358],
                    [353.0533896741494, 79.46735610507622, 6.9466103258505996],
                    [8.2904334420228452, 80.09337468942728, 351.70956655797715],
                    [23.489433915232105, 80.71820091332246, 336.5105660847679],
                    [38.662340119797371, 81.34191546502161, 321.33765988020264],
                    [53.811072086159413, 81.96459779168268, 306.18892791384064],
                    [68.937523216861678, 82.58632619847424, 291.06247678313832],
                    [84.043562570481001, 83.20717794407292, 275.95643742951904],
                    [99.131037069892173, 83.82722933288893, 260.86896293010784],
                    [114.20177364247999, 84.44655580434149, 245.79822635751998],
                    [129.25758129949423, 85.06523201948858, 230.74241870050582],
                    [144.30025316137389, 85.68333194529811, 215.69974683862608],
                    [159.33156843554312, 86.30092893683496, 200.66843156445691],
                    [174.35329435289955, 86.91809581762422, 185.64670564710048],
                    [189.36718806897298, 87.53490495844152, 170.63281193102705],
                    [204.37499853552671, 88.15142835477144, 155.62500146447326],
                    [219.37846834820326, 88.7677377031675, 140.62153165179677],
                    [234.37933557567774, 89.38390447674091, 125.62066442432229],
                ],
                atol=1.e-5
            )
        )

    def test_null_delta_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.even_angles(
                delta=0,
                theta1=0.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="c1",
                ant=0.0,
            )
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.even_angles(
                delta=0,
                theta1=0.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="c1",
                ant=0.0,
            )
        self.assertEqual(str(cm_new.exception), "float division by zero")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_values_with_not_minus(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="",
            symmetry="c1",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="",
            symmetry="c1",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 0.0, 0.0],
                    [102.5624397820863, 8.409807949596694, 0.0],
                    [175.28184168449116, 11.903989804110001, 0.0],
                    [234.81899085328783, 14.592550602033418, 0.0],
                    [286.52113069039967, 16.865343252479008, 0.0],
                    [332.89249973858841, 18.873236840047255, 0.0],
                    [15.350997945238817, 20.69354123118596, 0.0],
                    [54.760293521450905, 22.37214549396397, 0.0],
                    [91.727719586672706, 23.938926249214624, 0.0],
                    [126.67925988880424, 25.41462091516098, 0.0],
                    [159.93126768874427, 26.81431796194859, 0.0],
                    [191.72626852098327, 28.149400619646084, 0.0],
                    [222.25501416086877, 29.428707176867, 0.0],
                    [251.6707339535308, 30.659262305350033, 0.0],
                    [280.09871166816117, 31.846758629170495, 0.0],
                    [307.64293448395898, 32.995885473579534, 0.0],
                    [334.39083847001103, 34.11056017878775, 0.0],
                    [0.42677669506366556, 35.194095100409235, 0.0],
                    [25.794606434997782, 36.249320882899376, 0.0],
                    [50.559654291516139, 37.278679231322116, 0.0],
                    [74.770232732225381, 38.2842939251198, 0.0],
                    [98.468827134074971, 39.26802600175335, 0.0],
                    [121.69303677671941, 40.231517219359155, 0.0],
                    [144.4763293594925, 41.17622470375671, 0.0],
                    [166.84865229059051, 42.10344887074584, 0.0],
                    [188.83693262466142, 43.014356152771704, 0.0],
                    [210.46548946865465, 43.909997664475156, 0.0],
                    [231.75637688070145, 44.79132466007832, 0.0],
                    [252.72967105963514, 45.65920143165515, 0.0],
                    [273.40371249950607, 46.51441614768202, 0.0],
                    [293.7953114483945, 47.357690020060026, 0.0],
                    [313.91992324589262, 48.1896851042214, 0.0],
                    [333.79179876604201, 49.01101097344977, 0.0],
                    [353.42411415385686, 49.822230459852115, 0.0],
                    [12.839083235960516, 50.62386461673009, 0.0],
                    [32.02805535274598, 51.41639702767674, 0.0],
                    [51.011600859315614, 52.20027756457276, 0.0],
                    [69.799586144482291, 52.975925678303284, 0.0],
                    [88.401239698292727, 53.743733291363625, 0.0],
                    [106.82521050148785, 54.50406734974836, 0.0],
                    [125.07961980182155, 55.25727208199666, 0.0],
                    [143.17210717208275, 56.00367100552329, 0.0],
                    [161.10987160517593, 56.74356871403049, 0.0],
                    [178.89970828662715, 57.4772524745885, 0.0],
                    [196.54804158963, 58.20499365866951, 0.0],
                    [214.06095475847701, 58.92704902784667, 0.0],
                    [231.44421667996505, 59.64366189189109, 0.0],
                    [248.70330608674968, 60.355063154503576, 0.0],
                    [265.84343348975648, 61.06147225981934, 0.0],
                    [282.86956109711195, 61.763098051052104, 0.0],
                    [299.78642094339619, 62.46013955114206, 0.0],
                    [316.59853142434207, 63.152786673995614, 0.0],
                    [333.31021240759083, 63.84122087381428, 0.0],
                    [349.92559906909207, 64.52561573907757, 0.0],
                    [6.4586545866518463, 65.20613753694339, 0.0],
                    [22.893181806532958, 65.88294571313848, 0.0],
                    [39.242833985512988, 66.55619335181605, 0.0],
                    [55.511124699098673, 67.22602759934011, 0.0],
                    [71.701436996410379, 67.8925900555079, 0.0],
                    [87.81703187337213, 68.55601713533103, 0.0],
                    [103.86105612808187, 69.21644040415431, 0.0],
                    [119.8365496554388, 69.87398688859322, 0.0],
                    [135.74645223213611, 70.52877936550931, 0.0],
                    [151.59360983787678, 71.18093663101206, 0.0],
                    [167.38078055404094, 71.83057375127423, 0.0],
                    [183.11064007694512, 72.47780229676785, 0.0],
                    [198.78578687921549, 73.12273056137076, 0.0],
                    [214.40874704959094, 73.76546376765336, 0.0],
                    [229.98197883862355, 74.40610425953089, 0.0],
                    [245.50787693521318, 75.04475168335667, 0.0],
                    [260.98877649665752, 75.68150315843295, 0.0],
                    [276.42695695288819, 76.31645343782941, 0.0],
                    [291.82464560376934, 76.94969506032008, 0.0],
                    [307.18402102672974, 77.58131849418093, 0.0],
                    [322.50721631056541, 78.21141227352726, 0.0],
                    [337.79632212996364, 78.84006312781455, 0.0],
                    [353.0533896741494, 79.46735610507622, 0.0],
                    [8.2904334420228452, 80.09337468942728, 0.0],
                    [23.489433915232105, 80.71820091332246, 0.0],
                    [38.662340119797371, 81.34191546502161, 0.0],
                    [53.811072086159413, 81.96459779168268, 0.0],
                    [68.937523216861678, 82.58632619847424, 0.0],
                    [84.043562570481001, 83.20717794407292, 0.0],
                    [99.131037069892173, 83.82722933288893, 0.0],
                    [114.20177364247999, 84.44655580434149, 0.0],
                    [129.25758129949423, 85.06523201948858, 0.0],
                    [144.30025316137389, 85.68333194529811, 0.0],
                    [159.33156843554312, 86.30092893683496, 0.0],
                    [174.35329435289955, 86.91809581762422, 0.0],
                    [189.36718806897298, 87.53490495844152, 0.0],
                    [204.37499853552671, 88.15142835477144, 0.0],
                    [219.37846834820326, 88.7677377031675, 0.0],
                    [234.37933557567774, 89.38390447674091, 0.0],
                ],
                atol=1.e-5
            )
        )

    @unittest.skip("lead to deadlock")
    def test_default_values_with_P_method_leads_to_deadlock(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        self.assertTrue(array_equal(return_new, return_old))

    def test_with_D_symmetry(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="d1",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="d1",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 0.0, 0.0],
                    [234.81899085328783, 14.592550602033418, 125.1810091467122],
                    [15.340997945238826, 20.69354123118596, 344.65900205476123],
                    [54.750293521450914, 22.37214549396397, 305.24970647854911],
                    [191.71626852098328, 28.149400619646084, 168.28373147901675],
                    [222.24501416086878, 29.428707176867, 137.75498583913122],
                    [251.66073395353081, 30.659262305350033, 108.33926604646922],
                    [0.40677669506368375, 35.194095100409235, 359.59322330493637],
                    [25.7746064349978, 36.249320882899376, 334.22539356500215],
                    [50.539654291516158, 37.278679231322116, 309.46034570848383],
                    [74.750232732225399, 38.2842939251198, 285.24976726777459],
                    [188.81693262466143, 43.014356152771704, 171.18306737533862],
                    [210.44548946865467, 43.909997664475156, 149.55451053134533],
                    [231.73637688070147, 44.79132466007832, 128.26362311929853],
                    [252.70967105963516, 45.65920143165515, 107.29032894036482],
                    [12.809083235960543, 50.62386461673009, 347.19091676403946],
                    [31.998055352746011, 51.41639702767674, 328.00194464725394],
                    [50.981600859315648, 52.20027756457276, 309.01839914068432],
                    [69.769586144482332, 52.975925678303284, 290.23041385551767],
                    [88.371239698292783, 53.743733291363625, 271.62876030170719],
                    [196.51804158963009, 58.20499365866951, 163.48195841036988],
                    [214.03095475847709, 58.92704902784667, 145.96904524152291],
                    [231.41421667996514, 59.64366189189109, 128.58578332003486],
                    [248.67330608674976, 60.355063154503576, 111.32669391325021],
                    [265.81343348975656, 61.06147225981934, 94.186566510243438],
                    [6.4186545866519964, 65.20613753694339, 353.581345413348],
                    [22.853181806533108, 65.88294571313848, 337.14681819346686],
                    [39.202833985513138, 66.55619335181605, 320.79716601448683],
                    [55.471124699098823, 67.22602759934011, 304.52887530090118],
                    [71.661436996410529, 67.8925900555079, 288.33856300358946],
                    [87.77703187337228, 68.55601713533103, 272.22296812662773],
                    [183.07064007694527, 72.47780229676785, 176.92935992305479],
                    [198.74578687921564, 73.12273056137076, 161.25421312078436],
                    [214.36874704959109, 73.76546376765336, 145.63125295040891],
                    [229.9419788386237, 74.40610425953089, 130.0580211613763],
                    [245.46787693521333, 75.04475168335667, 114.53212306478667],
                    [260.94877649665767, 75.68150315843295, 99.051223503342328],
                    [8.2404334420230043, 80.09337468942728, 351.759566557977],
                    [23.439433915232264, 80.71820091332246, 336.56056608476774],
                    [38.61234011979753, 81.34191546502161, 321.38765988020248],
                    [53.761072086159572, 81.96459779168268, 306.23892791384037],
                    [68.887523216861837, 82.58632619847424, 291.11247678313816],
                    [83.99356257048116, 83.20717794407292, 276.00643742951888],
                    [189.31718806897314, 87.53490495844152, 170.68281193102689],
                    [204.32499853552687, 88.15142835477144, 155.6750014644731],
                    [219.32846834820342, 88.7677377031675, 140.67153165179661],
                    [234.3293355756779, 89.38390447674091, 125.67066442432213],
                ],
                atol=1.e-5
            )
        )

    def test_with_S_symmetry(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="sd1",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="sd1",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 90.0, 90.0],
                    [15.0, 90.0, 90.0],
                    [30.0, 90.0, 90.0],
                    [45.0, 90.0, 90.0],
                    [60.0, 90.0, 90.0],
                    [75.0, 90.0, 90.0],
                ],
                atol=1.e-5
            )
        )

    @unittest.skip("Somehow it is giving system exit")
    def test_with_S_symmetry_tooBig_theta1_value_error_msg(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=91.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="sd1",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=91.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="sd1",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        # self.assertTrue(
        #     array_equal(
        #         return_new,
        #         [
        #             [0.0, 90.0, 90.0],
        #             [15.0, 90.0, 90.0],
        #             [30.0, 90.0, 90.0],
        #             [45.0, 90.0, 90.0],
        #             [60.0, 90.0, 90.0],
        #             [75.0, 90.0, 90.0],
        #         ],
        #     )
        # )

    @unittest.skip("Because global var has differente value running it twice it has different outputs")
    def test_with_S_invalid_symmetry_returns_UnboundLocalError_local_var_referenced_before_assignment(
        self
    ):

        with self.assertRaises(UnboundLocalError) as cm_new:
            fu.even_angles(
                delta=15.0,
                theta1=10.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="sp1",
                ant=0.0,
            )

        with self.assertRaises(SystemExit) as cm_old:
            oldfu.even_angles(
                delta=15.0,
                theta1=10.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="sp1",
                ant=0.0,
            )
        self.assertEqual(str(cm_new.exception), "local variable 'k' referenced before assignment")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_S_invalid_symmetry_returns_ValueError_invalid_literal(self):
        with self.assertRaises(ValueError) as cm_new:
            fu.even_angles(
                delta=15.0,
                theta1=10.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="soct",
                ant=0.0,
            )
        with self.assertRaises(ValueError) as cm_old:
            oldfu.even_angles(
                delta=15.0,
                theta1=10.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEqpsi="Minus",
                symmetry="soct",
                ant=0.0,
            )
        self.assertEqual(
            str(cm_new.exception), "invalid literal for int() with base 10: 'ct'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_not_supported_symmetry_Warning_output_msg(self):
        return_new = fu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="oct",
            ant=0.0,
        )
        return_old = oldfu.even_angles(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEqpsi="Minus",
            symmetry="oct",
            ant=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))


class Test_even_angles_cd(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.even_angles_cd()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.even_angles_cd()
        self.assertEqual(
            str(cm_new.exception),
            "even_angles_cd() missing 1 required positional argument: 'delta'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_null_delta_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.even_angles_cd(
                delta=0,
                theta1=0.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEQpsi="Minus",
            )
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.even_angles_cd(
                delta=0,
                theta1=0.0,
                theta2=90.0,
                phi1=0.0,
                phi2=359.99,
                method="S",
                phiEQpsi="Minus",
            )
        self.assertEqual(str(cm_new.exception), "float division by zero")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("lead to deadlock")
    def test_default_values_leads_to_deadlock(self):
        return_new = fu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEQpsi='Minus')
        return_old = oldfu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEQpsi='Minus')
        self.assertTrue(array_equal(return_new, return_old))


    def test_with_S_method(self):
        return_new = fu.even_angles_cd(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEQpsi="Minus",
        )
        return_old = oldfu.even_angles_cd(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEQpsi="Minus",
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 0.0, 0.0],
                    [102.5624397820863, 8.409807949596694, 257.43756021791364],
                    [175.28184168449116, 11.903989804110001, 184.71815831550884],
                    [234.81899085328783, 14.592550602033418, 125.1810091467122],
                    [286.52113069039967, 16.865343252479008, 73.478869309600327],
                    [332.89249973858841, 18.873236840047255, 27.107500261411587],
                    [15.350997945238817, 20.69354123118596, 344.64900205476124],
                    [54.760293521450905, 22.37214549396397, 305.23970647854912],
                    [91.727719586672706, 23.938926249214624, 268.27228041332728],
                    [126.67925988880424, 25.41462091516098, 233.32074011119573],
                    [159.93126768874427, 26.81431796194859, 200.06873231125576],
                    [191.72626852098327, 28.149400619646084, 168.27373147901676],
                    [222.25501416086877, 29.428707176867, 137.74498583913123],
                    [251.6707339535308, 30.659262305350033, 108.32926604646923],
                    [280.09871166816117, 31.846758629170495, 79.901288331838828],
                    [307.64293448395898, 32.995885473579534, 52.357065516041018],
                    [334.39083847001103, 34.11056017878775, 25.609161529988967],
                    [0.42677669506366556, 35.194095100409235, 359.57322330493639],
                    [25.794606434997782, 36.249320882899376, 334.20539356500217],
                    [50.559654291516139, 37.278679231322116, 309.44034570848385],
                    [74.770232732225381, 38.2842939251198, 285.2297672677746],
                    [98.468827134074971, 39.26802600175335, 261.53117286592499],
                    [121.69303677671941, 40.231517219359155, 238.3069632232806],
                    [144.4763293594925, 41.17622470375671, 215.52367064050748],
                    [166.84865229059051, 42.10344887074584, 193.15134770940949],
                    [188.83693262466142, 43.014356152771704, 171.16306737533864],
                    [210.46548946865465, 43.909997664475156, 149.53451053134535],
                    [231.75637688070145, 44.79132466007832, 128.24362311929855],
                    [252.72967105963514, 45.65920143165515, 107.27032894036483],
                    [273.40371249950607, 46.51441614768202, 86.596287500493929],
                    [293.7953114483945, 47.357690020060026, 66.2046885516055],
                    [313.91992324589262, 48.1896851042214, 46.080076754107381],
                    [333.79179876604201, 49.01101097344977, 26.208201233957993],
                    [353.42411415385686, 49.822230459852115, 6.5758858461431373],
                    [12.839083235960516, 50.62386461673009, 347.16091676403948],
                    [32.02805535274598, 51.41639702767674, 327.97194464725408],
                    [51.011600859315614, 52.20027756457276, 308.98839914068435],
                    [69.799586144482291, 52.975925678303284, 290.2004138555177],
                    [88.401239698292727, 53.743733291363625, 271.59876030170722],
                    [106.82521050148785, 54.50406734974836, 253.17478949851215],
                    [125.07961980182155, 55.25727208199666, 234.92038019817846],
                    [143.17210717208275, 56.00367100552329, 216.82789282791725],
                    [161.10987160517593, 56.74356871403049, 198.89012839482405],
                    [178.89970828662715, 57.4772524745885, 181.10029171337283],
                    [196.54804158963, 58.20499365866951, 163.45195841037003],
                    [214.06095475847701, 58.92704902784667, 145.93904524152299],
                    [231.44421667996505, 59.64366189189109, 128.55578332003495],
                    [248.70330608674968, 60.355063154503576, 111.29669391325035],
                    [265.84343348975648, 61.06147225981934, 94.156566510243522],
                    [282.86956109711195, 61.763098051052104, 77.130438902888045],
                    [299.78642094339619, 62.46013955114206, 60.213579056603805],
                    [316.59853142434207, 63.152786673995614, 43.40146857565793],
                    [333.31021240759083, 63.84122087381428, 26.689787592409175],
                    [349.92559906909207, 64.52561573907757, 10.074400930907927],
                    [6.4586545866518463, 65.20613753694339, 353.54134541334815],
                    [22.893181806532958, 65.88294571313848, 337.10681819346701],
                    [39.242833985512988, 66.55619335181605, 320.75716601448698],
                    [55.511124699098673, 67.22602759934011, 304.48887530090133],
                    [71.701436996410379, 67.8925900555079, 288.29856300358961],
                    [87.81703187337213, 68.55601713533103, 272.18296812662788],
                    [103.86105612808187, 69.21644040415431, 256.13894387191817],
                    [119.8365496554388, 69.87398688859322, 240.16345034456117],
                    [135.74645223213611, 70.52877936550931, 224.25354776786389],
                    [151.59360983787678, 71.18093663101206, 208.40639016212322],
                    [167.38078055404094, 71.83057375127423, 192.61921944595906],
                    [183.11064007694512, 72.47780229676785, 176.88935992305483],
                    [198.78578687921549, 73.12273056137076, 161.21421312078451],
                    [214.40874704959094, 73.76546376765336, 145.59125295040906],
                    [229.98197883862355, 74.40610425953089, 130.01802116137645],
                    [245.50787693521318, 75.04475168335667, 114.49212306478682],
                    [260.98877649665752, 75.68150315843295, 99.011223503342478],
                    [276.42695695288819, 76.31645343782941, 83.57304304711181],
                    [291.82464560376934, 76.94969506032008, 68.175354396230659],
                    [307.18402102672974, 77.58131849418093, 52.815978973270262],
                    [322.50721631056541, 78.21141227352726, 37.492783689434589],
                    [337.79632212996364, 78.84006312781455, 22.203677870036358],
                    [353.0533896741494, 79.46735610507622, 6.9466103258505996],
                    [8.2904334420228452, 80.09337468942728, 351.70956655797715],
                    [23.489433915232105, 80.71820091332246, 336.5105660847679],
                    [38.662340119797371, 81.34191546502161, 321.33765988020264],
                    [53.811072086159413, 81.96459779168268, 306.18892791384064],
                    [68.937523216861678, 82.58632619847424, 291.06247678313832],
                    [84.043562570481001, 83.20717794407292, 275.95643742951904],
                    [99.131037069892173, 83.82722933288893, 260.86896293010784],
                    [114.20177364247999, 84.44655580434149, 245.79822635751998],
                    [129.25758129949423, 85.06523201948858, 230.74241870050582],
                    [144.30025316137389, 85.68333194529811, 215.69974683862608],
                    [159.33156843554312, 86.30092893683496, 200.66843156445691],
                    [174.35329435289955, 86.91809581762422, 185.64670564710048],
                    [189.36718806897298, 87.53490495844152, 170.63281193102705],
                    [204.37499853552671, 88.15142835477144, 155.62500146447326],
                    [219.37846834820326, 88.7677377031675, 140.62153165179677],
                    [234.37933557567774, 89.38390447674091, 125.62066442432229],
                ],
                atol=1.e-5
            )
        )

    def test_with_S_method_with_not_Minus(self):
        return_new = fu.even_angles_cd(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEQpsi="not_Minus",
        )
        return_old = oldfu.even_angles_cd(
            delta=15.0,
            theta1=0.0,
            theta2=90.0,
            phi1=0.0,
            phi2=359.99,
            method="S",
            phiEQpsi="not_Minus",
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.0, 0.0, 0.0],
                    [102.5624397820863, 8.409807949596694, 0.0],
                    [175.28184168449116, 11.903989804110001, 0.0],
                    [234.81899085328783, 14.592550602033418, 0.0],
                    [286.52113069039967, 16.865343252479008, 0.0],
                    [332.89249973858841, 18.873236840047255, 0.0],
                    [15.350997945238817, 20.69354123118596, 0.0],
                    [54.760293521450905, 22.37214549396397, 0.0],
                    [91.727719586672706, 23.938926249214624, 0.0],
                    [126.67925988880424, 25.41462091516098, 0.0],
                    [159.93126768874427, 26.81431796194859, 0.0],
                    [191.72626852098327, 28.149400619646084, 0.0],
                    [222.25501416086877, 29.428707176867, 0.0],
                    [251.6707339535308, 30.659262305350033, 0.0],
                    [280.09871166816117, 31.846758629170495, 0.0],
                    [307.64293448395898, 32.995885473579534, 0.0],
                    [334.39083847001103, 34.11056017878775, 0.0],
                    [0.42677669506366556, 35.194095100409235, 0.0],
                    [25.794606434997782, 36.249320882899376, 0.0],
                    [50.559654291516139, 37.278679231322116, 0.0],
                    [74.770232732225381, 38.2842939251198, 0.0],
                    [98.468827134074971, 39.26802600175335, 0.0],
                    [121.69303677671941, 40.231517219359155, 0.0],
                    [144.4763293594925, 41.17622470375671, 0.0],
                    [166.84865229059051, 42.10344887074584, 0.0],
                    [188.83693262466142, 43.014356152771704, 0.0],
                    [210.46548946865465, 43.909997664475156, 0.0],
                    [231.75637688070145, 44.79132466007832, 0.0],
                    [252.72967105963514, 45.65920143165515, 0.0],
                    [273.40371249950607, 46.51441614768202, 0.0],
                    [293.7953114483945, 47.357690020060026, 0.0],
                    [313.91992324589262, 48.1896851042214, 0.0],
                    [333.79179876604201, 49.01101097344977, 0.0],
                    [353.42411415385686, 49.822230459852115, 0.0],
                    [12.839083235960516, 50.62386461673009, 0.0],
                    [32.02805535274598, 51.41639702767674, 0.0],
                    [51.011600859315614, 52.20027756457276, 0.0],
                    [69.799586144482291, 52.975925678303284, 0.0],
                    [88.401239698292727, 53.743733291363625, 0.0],
                    [106.82521050148785, 54.50406734974836, 0.0],
                    [125.07961980182155, 55.25727208199666, 0.0],
                    [143.17210717208275, 56.00367100552329, 0.0],
                    [161.10987160517593, 56.74356871403049, 0.0],
                    [178.89970828662715, 57.4772524745885, 0.0],
                    [196.54804158963, 58.20499365866951, 0.0],
                    [214.06095475847701, 58.92704902784667, 0.0],
                    [231.44421667996505, 59.64366189189109, 0.0],
                    [248.70330608674968, 60.355063154503576, 0.0],
                    [265.84343348975648, 61.06147225981934, 0.0],
                    [282.86956109711195, 61.763098051052104, 0.0],
                    [299.78642094339619, 62.46013955114206, 0.0],
                    [316.59853142434207, 63.152786673995614, 0.0],
                    [333.31021240759083, 63.84122087381428, 0.0],
                    [349.92559906909207, 64.52561573907757, 0.0],
                    [6.4586545866518463, 65.20613753694339, 0.0],
                    [22.893181806532958, 65.88294571313848, 0.0],
                    [39.242833985512988, 66.55619335181605, 0.0],
                    [55.511124699098673, 67.22602759934011, 0.0],
                    [71.701436996410379, 67.8925900555079, 0.0],
                    [87.81703187337213, 68.55601713533103, 0.0],
                    [103.86105612808187, 69.21644040415431, 0.0],
                    [119.8365496554388, 69.87398688859322, 0.0],
                    [135.74645223213611, 70.52877936550931, 0.0],
                    [151.59360983787678, 71.18093663101206, 0.0],
                    [167.38078055404094, 71.83057375127423, 0.0],
                    [183.11064007694512, 72.47780229676785, 0.0],
                    [198.78578687921549, 73.12273056137076, 0.0],
                    [214.40874704959094, 73.76546376765336, 0.0],
                    [229.98197883862355, 74.40610425953089, 0.0],
                    [245.50787693521318, 75.04475168335667, 0.0],
                    [260.98877649665752, 75.68150315843295, 0.0],
                    [276.42695695288819, 76.31645343782941, 0.0],
                    [291.82464560376934, 76.94969506032008, 0.0],
                    [307.18402102672974, 77.58131849418093, 0.0],
                    [322.50721631056541, 78.21141227352726, 0.0],
                    [337.79632212996364, 78.84006312781455, 0.0],
                    [353.0533896741494, 79.46735610507622, 0.0],
                    [8.2904334420228452, 80.09337468942728, 0.0],
                    [23.489433915232105, 80.71820091332246, 0.0],
                    [38.662340119797371, 81.34191546502161, 0.0],
                    [53.811072086159413, 81.96459779168268, 0.0],
                    [68.937523216861678, 82.58632619847424, 0.0],
                    [84.043562570481001, 83.20717794407292, 0.0],
                    [99.131037069892173, 83.82722933288893, 0.0],
                    [114.20177364247999, 84.44655580434149, 0.0],
                    [129.25758129949423, 85.06523201948858, 0.0],
                    [144.30025316137389, 85.68333194529811, 0.0],
                    [159.33156843554312, 86.30092893683496, 0.0],
                    [174.35329435289955, 86.91809581762422, 0.0],
                    [189.36718806897298, 87.53490495844152, 0.0],
                    [204.37499853552671, 88.15142835477144, 0.0],
                    [219.37846834820326, 88.7677377031675, 0.0],
                    [234.37933557567774, 89.38390447674091, 0.0],
                ],
                atol=1.e-5
            )
        )


class Test_gauss_edge(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.gauss_edge()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.gauss_edge()
        self.assertEqual(
            str(cm_new.exception), "gauss_edge() missing 1 required positional argument: 'sharp_edge_image'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.gauss_edge(None)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.gauss_edge(None)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'get_ndim'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_value_2Dreal_img(self):
        return_new = fu.gauss_edge(
            sharp_edge_image=IMAGE_2D, kernel_size=7, gauss_standard_dev=3
        )
        return_old = oldfu.gauss_edge(
            sharp_edge_image=IMAGE_2D, kernel_size=7, gauss_standard_dev=3
        )
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    -0.13465632498264313,
                    -0.13546007871627808,
                    -0.134829580783844,
                    -0.1335931271314621,
                    -0.13253170251846313,
                    -0.13204187154769897,
                    -0.13220487534999847,
                    -0.13221487402915955,
                    -0.13232742249965668,
                    -0.1337665468454361,
                    -0.06852434575557709,
                    -0.06880658864974976,
                    -0.06777483969926834,
                    -0.06598402559757233,
                    -0.0647275447845459,
                    -0.06409801542758942,
                    -0.06481462717056274,
                    -0.0652804896235466,
                    -0.06612081080675125,
                    -0.06761974841356277,
                    -0.022264748811721802,
                    -0.02200571447610855,
                    -0.020655043423175812,
                    -0.019159983843564987,
                    -0.018887672573328018,
                    -0.01891341246664524,
                    -0.01985529437661171,
                    -0.01982933096587658,
                    -0.020445043221116066,
                    -0.021704547107219696,
                    -0.005446895956993103,
                    -0.0036098735872656107,
                    -0.0015185611555352807,
                    0.00028625220875255764,
                    -0.0018038542475551367,
                    -0.004057552665472031,
                    -0.0074673667550086975,
                    -0.007335766218602657,
                    -0.007089833728969097,
                    -0.006572901736944914,
                    -0.062402140349149704,
                    -0.05936679244041443,
                    -0.056522615253925323,
                    -0.054644547402858734,
                    -0.05874261260032654,
                    -0.06292443722486496,
                    -0.06814932078123093,
                    -0.06764056533575058,
                    -0.06658145785331726,
                    -0.06484474986791611,
                    -0.1351991444826126,
                    -0.13071101903915405,
                    -0.1271258443593979,
                    -0.12464220821857452,
                    -0.1300903856754303,
                    -0.1362408697605133,
                    -0.14354917407035828,
                    -0.14375917613506317,
                    -0.1421736180782318,
                    -0.1391114443540573,
                    -0.2177044302225113,
                    -0.21358831226825714,
                    -0.21049849689006805,
                    -0.20857857167720795,
                    -0.21429932117462158,
                    -0.22052235901355743,
                    -0.22717159986495972,
                    -0.22686269879341125,
                    -0.22466568648815155,
                    -0.22149845957756042,
                    -0.24495716392993927,
                    -0.24219506978988647,
                    -0.24050326645374298,
                    -0.23946698009967804,
                    -0.24440476298332214,
                    -0.24958965182304382,
                    -0.2547557055950165,
                    -0.2540545165538788,
                    -0.25141072273254395,
                    -0.24826845526695251,
                    -0.23753224313259125,
                    -0.2367689162492752,
                    -0.23625515401363373,
                    -0.2358333319425583,
                    -0.23901799321174622,
                    -0.24205103516578674,
                    -0.24468548595905304,
                    -0.24341563880443573,
                    -0.24087902903556824,
                    -0.23916129767894745,
                    -0.1973155289888382,
                    -0.197978213429451,
                    -0.19792386889457703,
                    -0.1971890926361084,
                    -0.19790858030319214,
                    -0.198713481426239,
                    -0.19994543492794037,
                    -0.19909298419952393,
                    -0.197785884141922,
                    -0.19749222695827484,
                ],
                atol=1.e-5
            )
        )

    def test_default_value_3Dreal_img(self):
        return_new = fu.gauss_edge(
            sharp_edge_image=IMAGE_3D, kernel_size=7, gauss_standard_dev=3
        )
        return_old = oldfu.gauss_edge(
            sharp_edge_image=IMAGE_3D, kernel_size=7, gauss_standard_dev=3
        )

        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    -0.3821377456188202,
                    -0.38477593660354614,
                    -0.38564532995224,
                    -0.3848218619823456,
                    -0.38031768798828125,
                    -0.37607041001319885,
                    -0.3727336525917053,
                    -0.37334394454956055,
                    -0.3756125867366791,
                    -0.3789021670818329,
                    -0.35474997758865356,
                    -0.35638177394866943,
                    -0.3565954566001892,
                    -0.35552269220352173,
                    -0.3519652485847473,
                    -0.34885260462760925,
                    -0.34676575660705566,
                    -0.3476618826389313,
                    -0.3497673273086548,
                    -0.3523935079574585,
                    -0.33886396884918213,
                    -0.3395621180534363,
                    -0.33929628133773804,
                    -0.3382933437824249,
                    -0.3361724019050598,
                    -0.3344022035598755,
                    -0.33357003331184387,
                    -0.3343340754508972,
                    -0.3358710706233978,
                    -0.3375495672225952,
                    -0.33741381764411926,
                    -0.33650967478752136,
                    -0.33523687720298767,
                    -0.333883672952652,
                    -0.3336937427520752,
                    -0.3341248631477356,
                    -0.3355773985385895,
                    -0.33653461933135986,
                    -0.3374081552028656,
                    -0.3376966118812561,
                    -0.3544465899467468,
                    -0.3527055084705353,
                    -0.35095182061195374,
                    -0.3494855463504791,
                    -0.3506280183792114,
                    -0.35247039794921875,
                    -0.3553317189216614,
                    -0.3562195301055908,
                    -0.3564341068267822,
                    -0.3557356297969818,
                    -0.38188254833221436,
                    -0.37997275590896606,
                    -0.37831366062164307,
                    -0.3770351707935333,
                    -0.3787494897842407,
                    -0.38118863105773926,
                    -0.38440120220184326,
                    -0.38505932688713074,
                    -0.384756863117218,
                    -0.3835076689720154,
                    -0.4096095561981201,
                    -0.40803688764572144,
                    -0.40678682923316956,
                    -0.4058643877506256,
                    -0.407475084066391,
                    -0.4097420275211334,
                    -0.4125012159347534,
                    -0.412929505109787,
                    -0.4123894274234772,
                    -0.41106510162353516,
                    -0.42710575461387634,
                    -0.4269286096096039,
                    -0.4266727566719055,
                    -0.4261814057826996,
                    -0.42619654536247253,
                    -0.42661571502685547,
                    -0.42734473943710327,
                    -0.4275282323360443,
                    -0.4274507164955139,
                    -0.42723923921585083,
                    -0.42604726552963257,
                    -0.427217036485672,
                    -0.4276130795478821,
                    -0.4270658493041992,
                    -0.4251582622528076,
                    -0.4235444962978363,
                    -0.4224027097225189,
                    -0.42265504598617554,
                    -0.42344430088996887,
                    -0.4246865510940552,
                    -0.40891507267951965,
                    -0.41115355491638184,
                    -0.4119035303592682,
                    -0.4110800623893738,
                    -0.40723463892936707,
                    -0.4037247598171234,
                    -0.4010475277900696,
                    -0.40163320302963257,
                    -0.4034925401210785,
                    -0.4062225818634033,
                    -0.3912156820297241,
                    -0.39305198192596436,
                    -0.39355185627937317,
                    -0.3928839862346649,
                    -0.38965797424316406,
                    -0.38660651445388794,
                    -0.38435032963752747,
                    -0.38484278321266174,
                    -0.3866077661514282,
                    -0.3890122175216675,
                    -0.3711863160133362,
                    -0.37203288078308105,
                    -0.3719569742679596,
                    -0.37113863229751587,
                    -0.3689132034778595,
                    -0.36694109439849854,
                    -0.36587607860565186,
                    -0.3666207194328308,
                    -0.3682072162628174,
                    -0.3699294626712799,
                    -0.36050644516944885,
                    -0.3606247901916504,
                    -0.36022618412971497,
                    -0.35948821902275085,
                    -0.3582903742790222,
                    -0.3572496175765991,
                    -0.35703587532043457,
                    -0.3577428460121155,
                    -0.35895442962646484,
                    -0.3600172698497772,
                    -0.3602280616760254,
                    -0.35916683077812195,
                    -0.35803502798080444,
                    -0.3569867014884949,
                    -0.35714292526245117,
                    -0.3576701283454895,
                    -0.35909977555274963,
                    -0.35999271273612976,
                    -0.36075741052627563,
                    -0.36086776852607727,
                    -0.375320166349411,
                    -0.37388816475868225,
                    -0.3725152313709259,
                    -0.3712904453277588,
                    -0.37209367752075195,
                    -0.37337610125541687,
                    -0.3755508065223694,
                    -0.3763548731803894,
                    -0.3767181634902954,
                    -0.3763483166694641,
                    -0.39708593487739563,
                    -0.39584803581237793,
                    -0.39473891258239746,
                    -0.3936821222305298,
                    -0.3946853280067444,
                    -0.39611825346946716,
                    -0.398246169090271,
                    -0.3987112045288086,
                    -0.3986874520778656,
                    -0.39807364344596863,
                    -0.41818785667419434,
                    -0.4172874391078949,
                    -0.41651278734207153,
                    -0.41571927070617676,
                    -0.41661834716796875,
                    -0.41792425513267517,
                    -0.4196811616420746,
                    -0.41987019777297974,
                    -0.4196160137653351,
                    -0.41893699765205383,
                    -0.4295043349266052,
                    -0.42973893880844116,
                    -0.4297823905944824,
                    -0.4294702112674713,
                    -0.429243803024292,
                    -0.4291606843471527,
                    -0.4293249845504761,
                    -0.4292168915271759,
                    -0.42921534180641174,
                    -0.42930638790130615,
                    -0.42604804039001465,
                    -0.42712831497192383,
                    -0.4275137484073639,
                    -0.42709648609161377,
                    -0.42553946375846863,
                    -0.4241502285003662,
                    -0.42315244674682617,
                    -0.42319002747535706,
                    -0.42381566762924194,
                    -0.42487001419067383,
                    -0.4118221402168274,
                    -0.4135490953922272,
                    -0.4140479862689972,
                    -0.4133703410625458,
                    -0.4105096161365509,
                    -0.4078657627105713,
                    -0.40594369173049927,
                    -0.4063188135623932,
                    -0.4077594578266144,
                    -0.4098513722419739,
                    -0.38247594237327576,
                    -0.38328540325164795,
                    -0.3834470212459564,
                    -0.3832317292690277,
                    -0.38158345222473145,
                    -0.37993067502975464,
                    -0.37867259979248047,
                    -0.3789934813976288,
                    -0.38012051582336426,
                    -0.38146695494651794,
                    -0.3824981451034546,
                    -0.38264790177345276,
                    -0.3824903070926666,
                    -0.3822273910045624,
                    -0.381197452545166,
                    -0.3801577091217041,
                    -0.37961244583129883,
                    -0.3801221549510956,
                    -0.38119956851005554,
                    -0.38212278485298157,
                    -0.38405823707580566,
                    -0.3839455842971802,
                    -0.3836837112903595,
                    -0.3834293782711029,
                    -0.38257017731666565,
                    -0.38161465525627136,
                    -0.3811814486980438,
                    -0.38179996609687805,
                    -0.38295337557792664,
                    -0.3838604986667633,
                    -0.383934885263443,
                    -0.3834984004497528,
                    -0.38292980194091797,
                    -0.3822791278362274,
                    -0.3814595937728882,
                    -0.38074636459350586,
                    -0.38074755668640137,
                    -0.3816338777542114,
                    -0.3829190135002136,
                    -0.3838299810886383,
                    -0.3821064829826355,
                    -0.38185280561447144,
                    -0.38127586245536804,
                    -0.38035261631011963,
                    -0.3793410658836365,
                    -0.37853068113327026,
                    -0.37846866250038147,
                    -0.37930363416671753,
                    -0.38055703043937683,
                    -0.38168150186538696,
                    -0.3813129663467407,
                    -0.3815315365791321,
                    -0.3813159465789795,
                    -0.3804851472377777,
                    -0.37926605343818665,
                    -0.3782138526439667,
                    -0.37776118516921997,
                    -0.3782813549041748,
                    -0.37931859493255615,
                    -0.38050174713134766,
                    -0.3796204626560211,
                    -0.3798236548900604,
                    -0.3796258866786957,
                    -0.3788682222366333,
                    -0.37781450152397156,
                    -0.3770614564418793,
                    -0.3767288327217102,
                    -0.3771408498287201,
                    -0.37791818380355835,
                    -0.37885501980781555,
                    -0.38218429684638977,
                    -0.38290756940841675,
                    -0.3831421434879303,
                    -0.38281816244125366,
                    -0.3814617097377777,
                    -0.3801942467689514,
                    -0.37913304567337036,
                    -0.37926217913627625,
                    -0.3800077438354492,
                    -0.38113224506378174,
                    -0.3815701901912689,
                    -0.382333904504776,
                    -0.38247978687286377,
                    -0.3820807635784149,
                    -0.380545437335968,
                    -0.37921157479286194,
                    -0.37815728783607483,
                    -0.3784247040748596,
                    -0.3792915344238281,
                    -0.3804819583892822,
                    -0.3821311295032501,
                    -0.38305598497390747,
                    -0.3832103908061981,
                    -0.382811576128006,
                    -0.3810395300388336,
                    -0.3793621063232422,
                    -0.3781077563762665,
                    -0.37842339277267456,
                    -0.3795252740383148,
                    -0.38097113370895386,
                    -0.3664366900920868,
                    -0.3662530779838562,
                    -0.3661535084247589,
                    -0.3662697374820709,
                    -0.36628347635269165,
                    -0.36619144678115845,
                    -0.36622166633605957,
                    -0.36637961864471436,
                    -0.3666793406009674,
                    -0.3667016625404358,
                    -0.36995846033096313,
                    -0.36931243538856506,
                    -0.36904096603393555,
                    -0.369276225566864,
                    -0.3697783052921295,
                    -0.37004944682121277,
                    -0.37048402428627014,
                    -0.3706955313682556,
                    -0.3709809184074402,
                    -0.370699942111969,
                    -0.3733263909816742,
                    -0.37261298298835754,
                    -0.37231165170669556,
                    -0.3725414574146271,
                    -0.372867614030838,
                    -0.3728877902030945,
                    -0.37315458059310913,
                    -0.37349995970726013,
                    -0.37406405806541443,
                    -0.3740153908729553,
                    -0.37368154525756836,
                    -0.3729812800884247,
                    -0.3725188076496124,
                    -0.3723191022872925,
                    -0.37222930788993835,
                    -0.3719947934150696,
                    -0.37225666642189026,
                    -0.37287747859954834,
                    -0.3737737238407135,
                    -0.3740995526313782,
                    -0.37346741557121277,
                    -0.3732798993587494,
                    -0.3728979229927063,
                    -0.37223953008651733,
                    -0.3713136613368988,
                    -0.3704129457473755,
                    -0.3701668083667755,
                    -0.3708849251270294,
                    -0.372087299823761,
                    -0.37312090396881104,
                    -0.3711106479167938,
                    -0.37165606021881104,
                    -0.371722936630249,
                    -0.37103700637817383,
                    -0.36952531337738037,
                    -0.3679867684841156,
                    -0.3670799732208252,
                    -0.3675389289855957,
                    -0.3686904311180115,
                    -0.37007343769073486,
                    -0.36654719710350037,
                    -0.3670535981655121,
                    -0.3671291768550873,
                    -0.3664003014564514,
                    -0.3649819493293762,
                    -0.3636917173862457,
                    -0.3629530072212219,
                    -0.363406777381897,
                    -0.3643617630004883,
                    -0.3655400574207306,
                    -0.36357828974723816,
                    -0.36424699425697327,
                    -0.3646293878555298,
                    -0.3643794655799866,
                    -0.3632587790489197,
                    -0.36205193400382996,
                    -0.36109352111816406,
                    -0.3611939549446106,
                    -0.36180055141448975,
                    -0.3626990020275116,
                    -0.3608068823814392,
                    -0.36103197932243347,
                    -0.36108219623565674,
                    -0.3607760965824127,
                    -0.3601134121417999,
                    -0.3595626652240753,
                    -0.35923928022384644,
                    -0.35949623584747314,
                    -0.35994136333465576,
                    -0.3604139983654022,
                    -0.3629007041454315,
                    -0.36295995116233826,
                    -0.36291658878326416,
                    -0.36276811361312866,
                    -0.3624532222747803,
                    -0.3621242940425873,
                    -0.361998051404953,
                    -0.3621915280818939,
                    -0.36255934834480286,
                    -0.3628433048725128,
                    -0.36048710346221924,
                    -0.359912633895874,
                    -0.3598225712776184,
                    -0.36015036702156067,
                    -0.36076077818870544,
                    -0.36119213700294495,
                    -0.3615723252296448,
                    -0.3617156445980072,
                    -0.3617185652256012,
                    -0.3611924946308136,
                    -0.3676016330718994,
                    -0.36681652069091797,
                    -0.3667088449001312,
                    -0.3672465980052948,
                    -0.36816754937171936,
                    -0.3687450587749481,
                    -0.36921021342277527,
                    -0.3692670464515686,
                    -0.3692221939563751,
                    -0.36854010820388794,
                    -0.3721582591533661,
                    -0.37149474024772644,
                    -0.371416300535202,
                    -0.37192121148109436,
                    -0.37243175506591797,
                    -0.37254154682159424,
                    -0.3726809024810791,
                    -0.3728633522987366,
                    -0.37317851185798645,
                    -0.3728754222393036,
                    -0.371265172958374,
                    -0.3708285987377167,
                    -0.3706411123275757,
                    -0.3706745505332947,
                    -0.37044355273246765,
                    -0.37000370025634766,
                    -0.3698778748512268,
                    -0.3703601360321045,
                    -0.37114188075065613,
                    -0.3714606463909149,
                    -0.36659181118011475,
                    -0.3666282892227173,
                    -0.36644694209098816,
                    -0.3659711480140686,
                    -0.3648283779621124,
                    -0.3636910319328308,
                    -0.3630834221839905,
                    -0.36379310488700867,
                    -0.3649739921092987,
                    -0.36606448888778687,
                    -0.35958385467529297,
                    -0.36027634143829346,
                    -0.36047694087028503,
                    -0.35998111963272095,
                    -0.3583260774612427,
                    -0.3566321134567261,
                    -0.35545894503593445,
                    -0.35594090819358826,
                    -0.35705745220184326,
                    -0.3584437966346741,
                    -0.35111716389656067,
                    -0.351470947265625,
                    -0.3514878451824188,
                    -0.3508411943912506,
                    -0.3494682013988495,
                    -0.3482993245124817,
                    -0.3476743996143341,
                    -0.3483455181121826,
                    -0.3492904305458069,
                    -0.350301057100296,
                    -0.34736186265945435,
                    -0.3476449251174927,
                    -0.3478076159954071,
                    -0.34750333428382874,
                    -0.34657031297683716,
                    -0.34567251801490784,
                    -0.34507957100868225,
                    -0.3454735577106476,
                    -0.3461090326309204,
                    -0.34677451848983765,
                    -0.34657108783721924,
                    -0.34622514247894287,
                    -0.345979779958725,
                    -0.34558165073394775,
                    -0.34529203176498413,
                    -0.34525033831596375,
                    -0.34551042318344116,
                    -0.3461056351661682,
                    -0.34656211733818054,
                    -0.3466539978981018,
                    -0.35244062542915344,
                    -0.3519161641597748,
                    -0.3516790568828583,
                    -0.3515729308128357,
                    -0.35179823637008667,
                    -0.3520481288433075,
                    -0.3524213135242462,
                    -0.3528153896331787,
                    -0.35304972529411316,
                    -0.35287126898765564,
                    -0.3647647798061371,
                    -0.36418208479881287,
                    -0.3642468750476837,
                    -0.3646332919597626,
                    -0.36553332209587097,
                    -0.3662360608577728,
                    -0.36688393354415894,
                    -0.366953581571579,
                    -0.36658257246017456,
                    -0.3656717538833618,
                    -0.3690146505832672,
                    -0.3684218227863312,
                    -0.36856764554977417,
                    -0.36920005083084106,
                    -0.37024062871932983,
                    -0.3708644211292267,
                    -0.37132999300956726,
                    -0.37119320034980774,
                    -0.3708060681819916,
                    -0.3699055016040802,
                    -0.37065771222114563,
                    -0.3702855110168457,
                    -0.3705209195613861,
                    -0.3712226152420044,
                    -0.3718530833721161,
                    -0.3719650208950043,
                    -0.37198343873023987,
                    -0.37183380126953125,
                    -0.37176215648651123,
                    -0.37125611305236816,
                    -0.3682839572429657,
                    -0.36804690957069397,
                    -0.3681577146053314,
                    -0.3684707581996918,
                    -0.3685314357280731,
                    -0.36824530363082886,
                    -0.36810413002967834,
                    -0.3682217299938202,
                    -0.36853548884391785,
                    -0.3685009181499481,
                    -0.3665229380130768,
                    -0.36645379662513733,
                    -0.3663560152053833,
                    -0.3661184012889862,
                    -0.3654700517654419,
                    -0.36479395627975464,
                    -0.3645399808883667,
                    -0.3650699555873871,
                    -0.3658144772052765,
                    -0.36634403467178345,
                    -0.36386439204216003,
                    -0.3641652762889862,
                    -0.3642709255218506,
                    -0.36394003033638,
                    -0.36297929286956787,
                    -0.36206039786338806,
                    -0.3616335093975067,
                    -0.3621430993080139,
                    -0.36280137300491333,
                    -0.36339256167411804,
                    -0.36034706234931946,
                    -0.36030489206314087,
                    -0.360228031873703,
                    -0.35968613624572754,
                    -0.3588773012161255,
                    -0.35838186740875244,
                    -0.3584986925125122,
                    -0.3593284785747528,
                    -0.35994237661361694,
                    -0.3602142930030823,
                    -0.35711219906806946,
                    -0.35699060559272766,
                    -0.35709288716316223,
                    -0.35682785511016846,
                    -0.35641998052597046,
                    -0.35618001222610474,
                    -0.3563562035560608,
                    -0.3569578528404236,
                    -0.3572675585746765,
                    -0.35719606280326843,
                    -0.3557076156139374,
                    -0.35514411330223083,
                    -0.35497531294822693,
                    -0.3546294867992401,
                    -0.3547267019748688,
                    -0.3551170527935028,
                    -0.3558845520019531,
                    -0.3565790355205536,
                    -0.35672736167907715,
                    -0.3562590181827545,
                    -0.35926082730293274,
                    -0.3585658669471741,
                    -0.3584374189376831,
                    -0.3583720922470093,
                    -0.35896268486976624,
                    -0.35961008071899414,
                    -0.3604288399219513,
                    -0.3608790934085846,
                    -0.360767662525177,
                    -0.36007148027420044,
                    -0.38353872299194336,
                    -0.3839106261730194,
                    -0.38455578684806824,
                    -0.38493502140045166,
                    -0.38476595282554626,
                    -0.38425272703170776,
                    -0.3837456703186035,
                    -0.383640319108963,
                    -0.38357019424438477,
                    -0.3834265172481537,
                    -0.38225385546684265,
                    -0.3824799060821533,
                    -0.38304778933525085,
                    -0.38353344798088074,
                    -0.3835611939430237,
                    -0.3831128776073456,
                    -0.38264399766921997,
                    -0.3824412226676941,
                    -0.38237935304641724,
                    -0.38221582770347595,
                    -0.3804895579814911,
                    -0.38072359561920166,
                    -0.3812800645828247,
                    -0.38190779089927673,
                    -0.38193267583847046,
                    -0.3813820481300354,
                    -0.38080033659935,
                    -0.3804938793182373,
                    -0.3805101215839386,
                    -0.38044115900993347,
                    -0.3780417740345001,
                    -0.37800559401512146,
                    -0.37821292877197266,
                    -0.37845295667648315,
                    -0.37847810983657837,
                    -0.3781541585922241,
                    -0.3780163824558258,
                    -0.37798088788986206,
                    -0.3781314492225647,
                    -0.3780914545059204,
                    -0.37898263335227966,
                    -0.3787417411804199,
                    -0.3785719871520996,
                    -0.3783801198005676,
                    -0.37818777561187744,
                    -0.3780147433280945,
                    -0.37821489572525024,
                    -0.3786243498325348,
                    -0.37899670004844666,
                    -0.37910225987434387,
                    -0.38104021549224854,
                    -0.3808723986148834,
                    -0.38066110014915466,
                    -0.38027867674827576,
                    -0.3799606263637543,
                    -0.3798595070838928,
                    -0.3802486062049866,
                    -0.3808075785636902,
                    -0.3811226785182953,
                    -0.3811313211917877,
                    -0.38274309039115906,
                    -0.3822171092033386,
                    -0.38183093070983887,
                    -0.38126710057258606,
                    -0.3810393810272217,
                    -0.3813141882419586,
                    -0.38219159841537476,
                    -0.383136123418808,
                    -0.3834758400917053,
                    -0.383184015750885,
                    -0.3831103444099426,
                    -0.3828172981739044,
                    -0.38275840878486633,
                    -0.38234949111938477,
                    -0.38196587562561035,
                    -0.3819521367549896,
                    -0.382455050945282,
                    -0.38324984908103943,
                    -0.3835708200931549,
                    -0.3833446800708771,
                    -0.3826925754547119,
                    -0.38244372606277466,
                    -0.3825046122074127,
                    -0.38215503096580505,
                    -0.38187283277511597,
                    -0.3818875253200531,
                    -0.38232070207595825,
                    -0.3829936385154724,
                    -0.38322409987449646,
                    -0.38292887806892395,
                    -0.38305240869522095,
                    -0.3830714225769043,
                    -0.38339751958847046,
                    -0.38328227400779724,
                    -0.3829415440559387,
                    -0.3826143443584442,
                    -0.38255175948143005,
                    -0.38298025727272034,
                    -0.38317084312438965,
                    -0.3830721974372864,
                    -0.3943803012371063,
                    -0.395620733499527,
                    -0.3966880142688751,
                    -0.3969501554965973,
                    -0.3956514298915863,
                    -0.3940049707889557,
                    -0.3925009071826935,
                    -0.39240026473999023,
                    -0.39265820384025574,
                    -0.3933584988117218,
                    -0.38052064180374146,
                    -0.38147035241127014,
                    -0.38232922554016113,
                    -0.3825684189796448,
                    -0.3815730810165405,
                    -0.3801800608634949,
                    -0.3789682686328888,
                    -0.3788571059703827,
                    -0.3791002333164215,
                    -0.37967345118522644,
                    -0.37093329429626465,
                    -0.3716665506362915,
                    -0.372367799282074,
                    -0.3727833330631256,
                    -0.3722687363624573,
                    -0.3712294399738312,
                    -0.3702545464038849,
                    -0.36988842487335205,
                    -0.36995768547058105,
                    -0.37033259868621826,
                    -0.3675563633441925,
                    -0.3675349950790405,
                    -0.36762362718582153,
                    -0.36761894822120667,
                    -0.3678603768348694,
                    -0.36778733134269714,
                    -0.36798951029777527,
                    -0.3678346872329712,
                    -0.36773571372032166,
                    -0.36759307980537415,
                    -0.3773539364337921,
                    -0.3767411708831787,
                    -0.37623903155326843,
                    -0.37587425112724304,
                    -0.37654802203178406,
                    -0.37723299860954285,
                    -0.378335177898407,
                    -0.3785083293914795,
                    -0.3783790171146393,
                    -0.37792670726776123,
                    -0.3924289345741272,
                    -0.3915630877017975,
                    -0.3908892571926117,
                    -0.390359491109848,
                    -0.39127227663993835,
                    -0.39244818687438965,
                    -0.3941056430339813,
                    -0.3944939970970154,
                    -0.39417946338653564,
                    -0.3933242857456207,
                    -0.40781787037849426,
                    -0.4067437946796417,
                    -0.4060603380203247,
                    -0.40551161766052246,
                    -0.40641528367996216,
                    -0.4077812731266022,
                    -0.4096459448337555,
                    -0.41034168004989624,
                    -0.41005250811576843,
                    -0.4089740514755249,
                    -0.4150322377681732,
                    -0.4146050214767456,
                    -0.41455405950546265,
                    -0.41423818469047546,
                    -0.414465993642807,
                    -0.41499048471450806,
                    -0.41593050956726074,
                    -0.4164859354496002,
                    -0.4163168966770172,
                    -0.4156271815299988,
                    -0.41404786705970764,
                    -0.4141782820224762,
                    -0.41455814242362976,
                    -0.4143288731575012,
                    -0.41394752264022827,
                    -0.4137026071548462,
                    -0.41381654143333435,
                    -0.41424626111984253,
                    -0.41428259015083313,
                    -0.4140793979167938,
                    -0.40626591444015503,
                    -0.4070640206336975,
                    -0.4078441560268402,
                    -0.4077230393886566,
                    -0.40656429529190063,
                    -0.40535667538642883,
                    -0.40450170636177063,
                    -0.40482035279273987,
                    -0.40513908863067627,
                    -0.4055996835231781,
                    -0.41885659098625183,
                    -0.42131492495536804,
                    -0.4227679967880249,
                    -0.42270973324775696,
                    -0.41943734884262085,
                    -0.41590622067451477,
                    -0.4128054678440094,
                    -0.41283518075942993,
                    -0.41406503319740295,
                    -0.41627949476242065,
                    -0.3956318497657776,
                    -0.3973403573036194,
                    -0.3982406258583069,
                    -0.3979751765727997,
                    -0.3953690230846405,
                    -0.3926393985748291,
                    -0.3904675543308258,
                    -0.3907109498977661,
                    -0.3918781876564026,
                    -0.39366036653518677,
                    -0.38209158182144165,
                    -0.38303351402282715,
                    -0.38347357511520386,
                    -0.38332727551460266,
                    -0.3819707930088043,
                    -0.3804125189781189,
                    -0.3792954981327057,
                    -0.379304438829422,
                    -0.3799806833267212,
                    -0.38098809123039246,
                    -0.38175246119499207,
                    -0.38124701380729675,
                    -0.3806651830673218,
                    -0.3800373375415802,
                    -0.380350261926651,
                    -0.3807532489299774,
                    -0.3817982077598572,
                    -0.38205328583717346,
                    -0.38221776485443115,
                    -0.3820449113845825,
                    -0.39868664741516113,
                    -0.39736536145210266,
                    -0.3961714804172516,
                    -0.39530396461486816,
                    -0.39657989144325256,
                    -0.3981863260269165,
                    -0.4005056619644165,
                    -0.4009484648704529,
                    -0.4007614552974701,
                    -0.39987146854400635,
                    -0.4229772686958313,
                    -0.42143604159355164,
                    -0.4201308488845825,
                    -0.41916996240615845,
                    -0.420681893825531,
                    -0.4227404296398163,
                    -0.4254900813102722,
                    -0.4260745942592621,
                    -0.4256822466850281,
                    -0.4244292378425598,
                    -0.4457162916660309,
                    -0.4443646967411041,
                    -0.4433742165565491,
                    -0.4426092207431793,
                    -0.4438222646713257,
                    -0.4456271529197693,
                    -0.4480002522468567,
                    -0.44869983196258545,
                    -0.44832298159599304,
                    -0.44707605242729187,
                    -0.45768627524375916,
                    -0.45750394463539124,
                    -0.4574507772922516,
                    -0.4569981098175049,
                    -0.4568597674369812,
                    -0.45709341764450073,
                    -0.4577668607234955,
                    -0.45827528834342957,
                    -0.4582612216472626,
                    -0.45791181921958923,
                    -0.45563605427742004,
                    -0.45656171441078186,
                    -0.45725056529045105,
                    -0.45695391297340393,
                    -0.4555310010910034,
                    -0.45421719551086426,
                    -0.4533090889453888,
                    -0.45363011956214905,
                    -0.45407769083976746,
                    -0.45472651720046997,
                    -0.44087105989456177,
                    -0.44283807277679443,
                    -0.44405052065849304,
                    -0.44373786449432373,
                    -0.4408068060874939,
                    -0.4378720223903656,
                    -0.4354739487171173,
                    -0.4358327388763428,
                    -0.4369576573371887,
                    -0.4387741982936859,
                    -0.39159807562828064,
                    -0.394734650850296,
                    -0.3961910307407379,
                    -0.39563411474227905,
                    -0.3907441198825836,
                    -0.38592076301574707,
                    -0.38189440965652466,
                    -0.3823642432689667,
                    -0.3845553994178772,
                    -0.3879776895046234,
                    -0.3590905964374542,
                    -0.36123692989349365,
                    -0.3620152175426483,
                    -0.36124032735824585,
                    -0.3573490381240845,
                    -0.35370439291000366,
                    -0.35094302892684937,
                    -0.35165953636169434,
                    -0.35362622141838074,
                    -0.3563570976257324,
                    -0.3396156132221222,
                    -0.34077537059783936,
                    -0.34100353717803955,
                    -0.3403472900390625,
                    -0.338126003742218,
                    -0.33604177832603455,
                    -0.33470162749290466,
                    -0.3351411521434784,
                    -0.33639514446258545,
                    -0.3380300998687744,
                    -0.33772534132003784,
                    -0.3371044099330902,
                    -0.3361755311489105,
                    -0.3351198732852936,
                    -0.33516693115234375,
                    -0.33560463786125183,
                    -0.33689451217651367,
                    -0.33748170733451843,
                    -0.3379290997982025,
                    -0.3379612863063812,
                    -0.35747694969177246,
                    -0.3558446168899536,
                    -0.35425281524658203,
                    -0.3530149757862091,
                    -0.3545582890510559,
                    -0.35663363337516785,
                    -0.3596058487892151,
                    -0.36017584800720215,
                    -0.35996779799461365,
                    -0.35890278220176697,
                    -0.389560729265213,
                    -0.3876199722290039,
                    -0.38602206110954285,
                    -0.3849220871925354,
                    -0.38716164231300354,
                    -0.38998863101005554,
                    -0.3935115933418274,
                    -0.39392927289009094,
                    -0.39318639039993286,
                    -0.39146628975868225,
                    -0.4219921827316284,
                    -0.42032769322395325,
                    -0.41917774081230164,
                    -0.4184437692165375,
                    -0.42054930329322815,
                    -0.42316314578056335,
                    -0.426236629486084,
                    -0.42653658986091614,
                    -0.4256211221218109,
                    -0.42380595207214355,
                    -0.44261497259140015,
                    -0.4424866735935211,
                    -0.4425007700920105,
                    -0.44220539927482605,
                    -0.4425297975540161,
                    -0.4430912137031555,
                    -0.44393423199653625,
                    -0.443991482257843,
                    -0.4435661733150482,
                    -0.44295862317085266,
                    -0.4423797130584717,
                    -0.443717360496521,
                    -0.4445270597934723,
                    -0.44418370723724365,
                    -0.4423232674598694,
                    -0.44056230783462524,
                    -0.43924108147621155,
                    -0.4394039511680603,
                    -0.43999579548835754,
                    -0.4410370886325836,
                    -0.4228721261024475,
                    -0.42550981044769287,
                    -0.4268014132976532,
                    -0.4261927604675293,
                    -0.42204585671424866,
                    -0.4180772006511688,
                    -0.4148692190647125,
                    -0.4153769016265869,
                    -0.4171401858329773,
                    -0.4199066162109375,
                ],
                atol=1.e-5
            )
        )

    def test_null_kernel_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.gauss_edge(
                sharp_edge_image=IMAGE_2D, kernel_size=0, gauss_standard_dev=3
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.gauss_edge(
                sharp_edge_image=IMAGE_2D, kernel_size=0, gauss_standard_dev=3
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_negative_kernel_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.gauss_edge(
                sharp_edge_image=IMAGE_2D, kernel_size=-2, gauss_standard_dev=3
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.gauss_edge(
                sharp_edge_image=IMAGE_2D, kernel_size=-2, gauss_standard_dev=3
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])


class Test_get_image(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_image()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_image()
        self.assertEqual(
            str(cm_new.exception), "get_image() missing 1 required positional argument: 'imagename'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_returns_input_img(self):
        """ I do not insert all the params because in this case they are not used"""
        return_new = fu.get_image(imagename=IMAGE_2D, nx=0, ny=1, nz=1, im=0)
        return_old = oldfu.get_image(imagename=IMAGE_2D, nx=0, ny=1, nz=1, im=0)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))

        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )

    def test_None_input_img_returns_new_EMData_with_default_size(self):
        """ I do not insert all the params because in this case they are not used"""
        nx = 0
        return_new = fu.get_image(imagename=None, nx=nx, ny=1, nz=1, im=0)
        return_old = oldfu.get_image(imagename=None, nx=nx, ny=1, nz=1, im=0)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertEqual(return_new.get_3dview().flatten().tolist(), [])

    def test_None_input_img_returns_new_EMData__with_given_size(self):
        """ I do not insert all the params because in this case they are not used"""
        nx, ny, nz = 3, 4, 3
        return_new = fu.get_image(imagename=None, nx=nx, ny=ny, nz=nz, im=0)
        return_old = oldfu.get_image(imagename=None, nx=nx, ny=ny, nz=nz, im=0)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_invalid_path_returns_RuntimeError_FileAccessException(self):
        """ I do not insert all the params because in this case they are not used"""
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_image(imagename="image_not_here", nx=0, ny=1, nz=1, im=0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_image(imagename="image_not_here", nx=0, ny=1, nz=1, im=0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "FileAccessException")
        self.assertEqual(msg[3], "cannot access file ")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])


class Test_get_im(unittest.TestCase):
    img_list = [IMAGE_3D, IMAGE_2D]

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_im(stackname=None, im=0)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_im(stackname=None, im=0)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object is not subscriptable"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_im()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_im()
        self.assertEqual(
            str(cm_new.exception), "get_im() missing 1 required positional argument: 'stackname'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_returns_first_img_of_a_list(self):
        return_new = fu.get_im(stackname=self.img_list, im=0)
        return_old = oldfu.get_im(stackname=self.img_list, im=0)

        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(array_equal(return_new.get_3dview(), IMAGE_3D.get_3dview()))

    def test_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.get_im(stackname=self.img_list, im=10)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.get_im(stackname=self.img_list, im=10)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_get_image_data(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_image_data()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_image_data()
        self.assertEqual(
            str(cm_new.exception), "get_image_data() missing 1 required positional argument: 'img'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_image_data(self):
        return_new = fu.get_image_data(img=IMAGE_2D)
        return_old = oldfu.get_image_data(img=IMAGE_2D)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new.flatten(),
                [
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                ],
                atol=1.e-5
            )
        )

    def test_NoneType_as_input_image_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)

    # the first value is a random value
    def test_emptyimage_as_input_image(self):
        return_old = oldfu.get_image_data(img=EMData(5, 5, 5))
        return_new = fu.get_image_data(img=EMData(5, 5, 5))
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_old[1:].flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )


class Test_get_symt(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_symt()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_symt()
        self.assertEqual(
            str(cm_new.exception), "get_symt() missing 1 required positional argument: 'symmetry'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_symt(self):
        self.assertTrue(True)
        return_new = fu.get_symt(symmetry="c3")
        return_old = oldfu.get_symt(symmetry="c3")


    @unittest.skip("Somehow not working")
    def test_get_symt_with_invaliSym_returns_IndexError(self):
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_new:
            fu.get_symt(symmetry="invaliSym")
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_old:
            oldfu.get_symt(symmetry="invaliSym")

        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

        self.assertEqual(
            str(cm_new.exception), str(1)
        )


class Test_get_input_from_string(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_input_from_string()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_input_from_string()
        self.assertEqual(
            str(cm_new.exception),
            "get_input_from_string() missing 1 required positional argument: 'str_input'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_input_from_string_integer_case(self):
        return_new = fu.get_input_from_string(str_input="5")
        return_old = oldfu.get_input_from_string(str_input="5")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [5])

    def test_get_input_from_string_negative_number_case(self):
        return_new = fu.get_input_from_string(str_input="-5")
        return_old = oldfu.get_input_from_string(str_input="-5")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [-5])

    def test_get_input_from_string_float_case(self):
        return_new = fu.get_input_from_string(str_input="5.3")
        return_old = oldfu.get_input_from_string(str_input="5.3")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [5.3])

    def test_get_input_from_string_invalid_case(self):
        with self.assertRaises(ValueError) as cm_new:
            fu.get_input_from_string(str_input="not_a_number")
        with self.assertRaises(ValueError) as cm_old:
            oldfu.get_input_from_string(str_input="not_a_number")
        self.assertEqual(
            str(cm_new.exception),
            "invalid literal for int() with base 10: 'not_a_number'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_input_from_string_list_of_values_number_case(self):
        return_new = fu.get_input_from_string(str_input="-5,3.11,5")
        return_old = oldfu.get_input_from_string(str_input="-5,3.11,5")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [-5, 3.11, 5])

class Test_model_circle(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_circle()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_circle()
        self.assertEqual(
            str(cm_new.exception), "model_circle() missing 3 required positional arguments: 'r', 'nx', and 'ny'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):
        return_new = fu.model_circle(r=2, nx=5, ny=5, nz=1)
        return_old = oldfu.model_circle(r=2, nx=5, ny=5, nz=1)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r=145, nx=352, ny=0, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r=145, nx=352, ny=0, nz=1)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r=145, nx=0, ny=252, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r=145, nx=0, ny=252, nz=1)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r=145, nx=252, ny=252, nz=0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r=145, nx=252, ny=252, nz=0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_R_size_(self):
        return_new = fu.model_circle(r=0, nx=5, ny=5, nz=1)
        return_old = oldfu.model_circle(r=0, nx=5, ny=5, nz=1)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_negative_R_size_(self):
        return_new = fu.model_circle(r=-1, nx=5, ny=5, nz=1)
        return_old = oldfu.model_circle(r=-1, nx=5, ny=5, nz=1)
        self.assertTrue(array_equal(return_new.get_2dview(), return_old.get_2dview()))
        self.assertTrue(
            allclose(
                return_new.get_2dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )


class Test_model_gauss(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_gauss()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_gauss()
        self.assertEqual(
            str(cm_new.exception), "model_gauss() missing 2 required positional arguments: 'xsigma' and 'nx'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_values(self):
        return_new = fu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        return_old = oldfu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_old.get_3dview().flatten(),
                [
                    0.00876415055245161,
                    0.02699548378586769,
                    0.06475879997015,
                    0.12098536640405655,
                    0.1760326623916626,
                    0.1994711458683014,
                    0.1760326623916626,
                    0.12098536640405655,
                    0.06475879997015,
                    0.02699548378586769,
                ],
                atol=1.e-5
            )
        )

    def test_null_Xsigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(
            xsigma=0,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        return_old = oldfu.model_gauss(
            xsigma=0,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        self.assertTrue(
            allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True)
        )
        self.assertTrue(
            allclose(
                return_new.get_3dview(),
                [
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                ],
                equal_nan=True,
            )
        )

    def test_null_Ysigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=0,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        return_old = oldfu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=0,
            zsigma=None,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        self.assertTrue(
            allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True)
        )
        self.assertTrue(
            allclose(
                return_new.get_3dview(),
                [
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                ],
                equal_nan=True,
            )
        )

    def test_null_Zsigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=0,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        return_old = oldfu.model_gauss(
            xsigma=2,
            nx=10,
            ny=1,
            nz=1,
            ysigma=None,
            zsigma=0,
            xcenter=None,
            ycenter=None,
            zcenter=None,
        )
        self.assertTrue(
            allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True)
        )
        self.assertTrue(
            allclose(
                return_new.get_3dview(),
                [
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                    float("NaN"),
                ],
                equal_nan=True,
            )
        )

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(
                xsigma=2,
                nx=352,
                ny=0,
                nz=1,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(
                xsigma=2,
                nx=352,
                ny=0,
                nz=1,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(
                xsigma=2,
                nx=0,
                ny=1,
                nz=1,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(
                xsigma=2,
                nx=0,
                ny=1,
                nz=1,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(
                xsigma=2,
                nx=352,
                ny=1,
                nz=0,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(
                xsigma=2,
                nx=352,
                ny=1,
                nz=0,
                ysigma=None,
                zsigma=None,
                xcenter=None,
                ycenter=None,
                zcenter=None,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])


class Test_model_gauss_noise(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_gauss_noise()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_gauss_noise()
        self.assertEqual(
            str(cm_new.exception),
            "model_gauss_noise() missing 2 required positional arguments: 'sigma' and 'nx'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("for definition it is a random value matrix. not testabel")
    def test_model_gauss_noise(self):
        self.assertTrue(True)
        """
          This function creates random noise each time so arrays cannot be compared
        return_new = fu.model_gauss_noise(sigma = 1, nx = 352, ny=1, nz=1)
        return_old = oldfu.model_gauss_noise(sigma =1, nx = 352, ny=1, nz=1)
        self.assertTrue(allclose(return_new.get_3dview(), return_old.get_3dview(), atol=1000))
        """

    def test_null_sigma(self):
        return_new = fu.model_gauss_noise(sigma=0.0, nx=10, ny=1, nz=1)
        return_old = oldfu.model_gauss_noise(sigma=0.0, nx=10, ny=1, nz=1)
        self.assertTrue(allclose(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            )
        )

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma=1, nx=1, ny=0, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma=1, nx=1, ny=0, nz=1)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma=1, nx=0, ny=10, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma=1, nx=0, ny=10, nz=1)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma=1, nx=352, ny=1, nz=0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma=1, nx=352, ny=1, nz=0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])


class Test_model_blank(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_blank()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_blank()
        self.assertEqual(
            str(cm_new.exception), "model_blank() missing 1 required positional argument: 'nx'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_values(self):
        return_new = fu.model_blank(nx=10, ny=1, nz=1, bckg=0.0)
        return_old = oldfu.model_blank(nx=10, ny=1, nz=1, bckg=0.0)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            array_equal(
                return_new.get_3dview().flatten(),
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            )
        )

    def test_default_values_with_bckg(self):
        return_new = fu.model_blank(nx=10, ny=1, nz=1, bckg=10.0)
        return_old = oldfu.model_blank(nx=10, ny=1, nz=1, bckg=10.0)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            array_equal(
                return_new.get_3dview().flatten(),
                [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
            )
        )

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx=0, ny=1, nz=1, bckg=0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx=0, ny=1, nz=1, bckg=0.0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx=10, ny=0, nz=1, bckg=0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx=10, ny=0, nz=1, bckg=0.0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx=10, ny=1, nz=0, bckg=0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx=10, ny=1, nz=0, bckg=0.0)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])


class Test_peak_search(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.peak_search()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.peak_search()
        self.assertEqual(
            str(cm_new.exception), "peak_search() missing 1 required positional argument: 'e'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_values(self):
        return_new = fu.peak_search(e=IMAGE_2D, npeak=3, invert=1, print_screen=0)
        return_old = oldfu.peak_search(e=IMAGE_2D, npeak=3, invert=1, print_screen=0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [0.12692593038082123, 5.0, 3.0, 1.0, 0.0, -2.0],
                    [0.12153391540050507, 7.0, 2.0, 0.9575183987617493, 2.0, -3.0],
                    [0.08500781655311584, 2.0, 2.0, 0.6697434782981873, -3.0, -3.0],
                ],
                atol=1.e-5
            )
        )

    def test_inverted_sort(self):
        return_new = fu.peak_search(e=IMAGE_2D, npeak=3, invert=-1, print_screen=0)
        return_old = oldfu.peak_search(e=IMAGE_2D, npeak=3, invert=-1, print_screen=0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [[1.0, 5.0, 5.0, 1.0, 0.0, 0.0]]))

    @unittest.skip("skip because segmentation fault")
    def test_null_npeak_crashes_because_signal11SIGSEV(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.peak_search(img, npeak = 0, invert = 1, print_screen = 0)
        return_old = oldfu.peak_search(img, npeak = 0, invert = 1, print_screen = 0)
        self.assertTrue(array_equal(return_new, return_old))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.peak_search(e=None, npeak=3, invert=-1, print_screen=0)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.peak_search(e=None, npeak=3, invert=-1, print_screen=0)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'peak_search'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("skip because segmentation fault")
    def test_Empty_img_crashes_because_signal11SIGSEV(self):
        fu.peak_search(EMData(), npeak = 3, invert = -1, print_screen = 0)
        oldfu.peak_search(EMData(), npeak = 3, invert = -1, print_screen = 0)


class Test_pad(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.pad()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.pad()
        self.assertEqual(
            str(cm_new.exception), "pad() missing 2 required positional arguments: 'image_to_be_padded' and 'new_nx'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_returns_RuntimeError_ImageDimensionException_padder_cannot_be_lower_than_sizee_img(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(
                image_to_be_padded=IMAGE_2D,
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(
                image_to_be_padded=IMAGE_2D,
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(
            msg[1],
            "The size of the padded image cannot be lower than the input image size.",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_returns_RuntimeError_ImageDimensionException_offset_inconsistent(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(
                image_to_be_padded=IMAGE_2D,
                new_nx=IMAGE_2D.get_xsize() + 10,
                new_ny=IMAGE_2D.get_ysize() + 10,
                new_nz=IMAGE_2D.get_zsize() + 10,
                background="average",
                off_center_nx=100,
                off_center_ny=100,
                off_center_nz=100,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(
                image_to_be_padded=IMAGE_2D,
                new_nx=IMAGE_2D.get_xsize() + 10,
                new_ny=IMAGE_2D.get_ysize() + 10,
                new_nz=IMAGE_2D.get_zsize() + 10,
                background="average",
                off_center_nx=100,
                off_center_ny=100,
                off_center_nz=100,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(
            msg[1],
            "The offset inconsistent with the input image size. Solution: Change the offset parameters",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_values(self):
        return_new = fu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="average",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        return_old = oldfu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="average",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    -0.13252077996730804,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    -0.13252077996730804,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    -0.13252077996730804,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    -0.13252077996730804,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    -0.13252077996730804,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    -0.13252077996730804,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.13252077996730804,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    -0.13252077996730804,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    -0.13252077996730804,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                    -0.13252077996730804,
                ],
                atol=1.e-5
            )
        )

    def test_default_values_with_circumference_bckg(self):
        return_new = fu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="circumference",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        return_old = oldfu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="circumference",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    -0.03757849335670471,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    -0.03757849335670471,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    -0.03757849335670471,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    -0.03757849335670471,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    -0.03757849335670471,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    -0.03757849335670471,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    -0.03757849335670471,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    -0.03757849335670471,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    -0.03757849335670471,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                    -0.03757849335670471,
                ],
                atol=1.e-5
            )
        )

    def test_default_values_with_unknown_bckg(self):
        return_new = fu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="unknown",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        return_old = oldfu.pad(
            image_to_be_padded=IMAGE_2D,
            new_nx=IMAGE_2D.get_xsize() + 1,
            new_ny=IMAGE_2D.get_ysize() + 1,
            new_nz=IMAGE_2D.get_zsize() + 1,
            background="unknown",
            off_center_nx=0,
            off_center_ny=0,
            off_center_nz=0,
        )
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(
            allclose(
                return_new.get_3dview().flatten(),
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.009504491463303566,
                    0.025885052978992462,
                    0.015371464192867279,
                    0.029651766642928123,
                    0.025623319670557976,
                    0.023996084928512573,
                    0.023316310718655586,
                    0.03626585379242897,
                    0.042238689959049225,
                    0.053261399269104004,
                    0.0,
                    0.06996519863605499,
                    0.05416787788271904,
                    0.050994712859392166,
                    0.03554266691207886,
                    0.03604980185627937,
                    0.07005909085273743,
                    0.056754179298877716,
                    0.06729267537593842,
                    0.0899617150425911,
                    0.08004479855298996,
                    0.0,
                    0.07206107676029205,
                    0.07158395648002625,
                    0.08500781655311584,
                    0.08074058592319489,
                    0.08976095914840698,
                    0.09553121030330658,
                    0.09733162075281143,
                    0.12153391540050507,
                    0.09777011722326279,
                    0.0612066276371479,
                    0.0,
                    0.060473889112472534,
                    0.0832795649766922,
                    0.07990699261426926,
                    0.0726018100976944,
                    0.10390139371156693,
                    0.12692593038082123,
                    0.08997570723295212,
                    0.05740871652960777,
                    0.05622498691082001,
                    0.05523042380809784,
                    0.0,
                    0.013907668180763721,
                    0.0071470243856310844,
                    0.01511574536561966,
                    2.5205374186043628e-05,
                    0.008231919258832932,
                    -0.020773129537701607,
                    -0.034199729561805725,
                    -0.04089483618736267,
                    -0.042460259050130844,
                    -0.06925757229328156,
                    0.0,
                    -0.06893884390592575,
                    -0.08000176399946213,
                    -0.11662115156650543,
                    -0.111984983086586,
                    -0.11971071362495422,
                    -0.1273496150970459,
                    -0.12249226123094559,
                    -0.1453358680009842,
                    -0.14758040010929108,
                    -0.15034900605678558,
                    0.0,
                    -0.17081016302108765,
                    -0.2014905959367752,
                    -0.2121349573135376,
                    -0.22736789286136627,
                    -0.24315771460533142,
                    -0.2552821934223175,
                    -0.23703180253505707,
                    -0.2393375188112259,
                    -0.2672199606895447,
                    -0.28808265924453735,
                    0.0,
                    -0.3236375153064728,
                    -0.3262620270252228,
                    -0.35172849893569946,
                    -0.3602631986141205,
                    -0.35741564631462097,
                    -0.3575122356414795,
                    -0.38925597071647644,
                    -0.377326101064682,
                    -0.38598355650901794,
                    -0.39209896326065063,
                    0.0,
                    -0.3882087767124176,
                    -0.3639817535877228,
                    -0.3711523711681366,
                    -0.37047016620635986,
                    -0.39362388849258423,
                    -0.40711337327957153,
                    -0.3925972580909729,
                    -0.4149233400821686,
                    -0.41900205612182617,
                    -0.4641905426979065,
                    0.0,
                    -0.46107935905456543,
                    -0.46086275577545166,
                    -0.4773290157318115,
                    -0.473482221364975,
                    -0.4543262720108032,
                    -0.44096702337265015,
                    -0.4387476146221161,
                    -0.4229215085506439,
                    -0.4376510977745056,
                    -0.4369300603866577,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_NoneType_as_img_returns_RuntimeError_NullPointerException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(
                image_to_be_padded=None,
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(
                image_to_be_padded=None,
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NullPointerException")
        self.assertEqual(msg[1], "NULL input image")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_Empty_img_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(
                image_to_be_padded=EMData(),
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(
                image_to_be_padded=EMData(),
                new_nx=10,
                new_ny=1,
                new_nz=1,
                background="average",
                off_center_nx=0,
                off_center_ny=0,
                off_center_nz=0,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_chooseformat(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.chooseformat()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.chooseformat()
        self.assertEqual(
            str(cm_new.exception), "chooseformat() missing 1 required positional argument: 't'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_exponential_number(self):
        return_new = fu.chooseformat(
            t=0.00000000000000000000000000003, form_float="  %12.5f"
        )
        return_old = fu.chooseformat(
            t=0.00000000000000000000000000003, form_float="  %12.5f"
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, "  %12.5e")

    def test_float(self):
        return_new = fu.chooseformat(t=0.3, form_float="  %12.5f")
        return_old = fu.chooseformat(t=0.3, form_float="  %12.5f")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, "  %12.5f")

    def test_typeError_float_argument_required(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.chooseformat(t="w", form_float="  %12.5f")
        with self.assertRaises(TypeError) as cm_old:
            oldfu.chooseformat(t="w", form_float="  %12.5f")
        self.assertEqual(str(cm_new.exception), "must be real number, not str")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_read_text_row(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_text_row()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_text_row()
        self.assertEqual(
            str(cm_new.exception), "read_text_row() missing 1 required positional argument: 'fnam'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_file_not_found(self):
        with self.assertRaises(IOError) as cm_new:
            fu.read_text_row(fnam="no_file.txt", format="", skip=";")
        with self.assertRaises(IOError) as cm_old:
            oldfu.read_text_row(fnam="no_file.txt", format="", skip=";")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)


    def test_default_case(self):
        partids = path.join(
            ABSOLUTE_PATH_TO_RESOURCES,
            "../07_RVIPER/main001/this_iteration_index_keep_images.txt",
        )
        return_new = fu.read_text_row(fnam=partids, format="", skip=";")
        return_old = oldfu.read_text_row(fnam=partids, format="", skip=";")
        self.assertEqual(return_new , return_old)
        expected_res = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 144, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 227, 229, 231, 232, 233, 234]
        for i,v in enumerate(return_new):
            self.assertEqual(v[0], expected_res[i])


class Test_write_text_row(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_text_row()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_text_row()
        self.assertEqual(
            str(cm_new.exception),
            "write_text_row() missing 2 required positional arguments: 'data' and 'file_name'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("Writing file is not necessary for CI")
    def test_write_text_row(self):
        data = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
        f = path.join(ABSOLUTE_PATH_TO_RESOURCES, "filefu.txt")
        fold = path.join(ABSOLUTE_PATH_TO_RESOURCES, "filefold.txt")
        fu.write_text_row(
            data=data, file_name=f, form_float="  %14.6f", form_int="  %12d"
        )
        oldfu.write_text_row(
            data=data, file_name=fold, form_float="  %14.6f", form_int="  %12d"
        )
        self.assertEqual(returns_values_in_file(f), returns_values_in_file(fold))
        remove_list_of_file([f, fold])


class Test_read_text_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_text_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_text_file()
        self.assertEqual(
            str(cm_new.exception),
            "read_text_file() missing 1 required positional argument: 'file_name'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_file_not_found(self):
        with self.assertRaises(IOError) as cm_new:
            fu.read_text_file(file_name="no_file.txt", ncol=0)
        with self.assertRaises(IOError) as cm_old:
            oldfu.read_text_file(file_name="no_file.txt", ncol=0)
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)

    def test_default_case(self):
        partids = path.join(
            ABSOLUTE_PATH_TO_RESOURCES,
            "../07_RVIPER/main001/this_iteration_index_keep_images.txt",
        )
        return_new = fu.read_text_file(file_name=partids, ncol=0)
        return_old = oldfu.read_text_file(file_name=partids, ncol=0)
        self.assertEqual(return_new , return_old)
        self.assertEqual(
                return_new,
                [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 144, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 227, 229, 231, 232, 233, 234]
        )

class Test_write_text_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_text_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_text_file()
        self.assertEqual(
            str(cm_new.exception),
            "write_text_file() missing 2 required positional arguments: 'data' and 'file_name'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("Writing  not required")
    def test_write_text_row(self):
        data = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
        f = path.join(ABSOLUTE_PATH, "filefu.txt")
        fold = path.join(ABSOLUTE_PATH, "filefold.txt")
        fu.write_text_file(
            data=data, file_name=f, form_float="  %14.6f", form_int="  %12d"
        )
        oldfu.write_text_file(
            data=data, file_name=fold, form_float="  %14.6f", form_int="  %12d"
        )
        self.assertEqual(returns_values_in_file(f), returns_values_in_file(fold))
        remove_list_of_file([f, fold])


class Test_rotate_shift_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotate_shift_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotate_shift_params()
        self.assertEqual(
            str(cm_new.exception),
            "rotate_shift_params() missing 2 required positional arguments: 'paramsin' and 'transf'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_rotate_shift_params(self):
        paramsin = [[0.25, 1.25, 0.5]]
        transf = [0.25, 1.25, 0.5]
        return_new = fu.rotate_shift_params(paramsin=paramsin, transf=transf)
        return_old = oldfu.rotate_shift_params(paramsin=paramsin, transf=transf)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [[0.0, 0.0, 1.2820115403810843e-08]]))

    def test_rotate_shift_params2(self):
        paramsin = [[0.25, 1.25, 0, 0, 0.5]]
        transf = [0.25, 1.25, 0.5, 0.25, 1.25, 0.5]
        return_new = fu.rotate_shift_params(paramsin=paramsin, transf=transf)
        return_old = oldfu.rotate_shift_params(paramsin=paramsin, transf=transf)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    [
                        0.0,
                        0.0,
                        359.50000008558703,
                        0.23908232152462006,
                        1.752134084701538,
                    ]
                ],
                atol=1.e-5
            )
        )

    def test_less_transf_params_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25, 1.25, 0, 0, 0.5]]
        transf = [0.25, 1.25, 0.5]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin=paramsin, transf=transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin=paramsin, transf=transf)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_less_transf_params2_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25, 1.25, 0]]
        transf = [0.25, 1.25]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin=paramsin, transf=transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin=paramsin, transf=transf)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_less_paramsin_params_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25]]
        transf = [0.25, 1.25, 0.5]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin=paramsin, transf=transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin=paramsin, transf=transf)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_reshape_1d(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.reshape_1d'"""

    input_obj = [
        0.999,
        0.999,
        0.999,
        0.999,
        0.999,
        0.999,
        0.999,
        0.999,
        0.999,
        0.9984012789768186,
        0.9914368216668327,
        0.9878146959140469,
        0.9881703862020976,
        0.982612488476065,
        0.9789244545589472,
        0.9747235387045814,
        0.9622078763024153,
        0.9406924390622574,
        0.9300175631598249,
        0.8976592373307525,
        0.8474726574046705,
        0.7942852016327994,
        0.8065378605172119,
        0.7981892234519837,
        0.7980760586172797,
        0.7834690256016978,
        0.7732854546260584,
        0.759479194158529,
        0.7302534821351329,
        0.735749496632646,
        0.7505776906379105,
        0.7832464000713297,
        0.799354031902547,
        0.7829602489012508,
        0.7467401462021503,
        0.7216741559492451,
        0.7573457050470969,
        0.7735999645280006,
        0.7360206933666649,
        0.7074315960216845,
        0.6838418535731124,
        0.6814918195422979,
        0.6604400166044002,
        0.6276571502978614,
        0.5967298971705947,
        0.5924074015096022,
        0.6113438607798904,
        0.5589193571016572,
        0.4169423800381157,
        0.33547900293137645,
        0.43509084125025116,
        0.5143369854093631,
        0.4505998230268216,
        0.3017867022488365,
        0.29393725698240897,
        0.3395667841020214,
        0.34234494237984336,
        0.31531353786458843,
        0.3120432449453534,
        0.2864549161874622,
        0.23450693792899116,
        0.20246505335938672,
        0.22577560951692183,
        0.21569461751208094,
        0.21511112191209886,
        0.2091532904083915,
        0.18334792795777813,
        0.1954858454475899,
        0.21231959169076153,
        0.20199531221828237,
        0.21190821007216915,
        0.21429959199533707,
        0.18398541329970813,
        0.20171364365585326,
        0.22936964071672247,
        0.20705888033218262,
        0.2310040684684463,
        0.23322049365816364,
        0.25365125929269,
        0.2687457179832018,
        0.252646215129461,
        0.24715492782090853,
        0.23387479872417344,
        0.23315205998051616,
        0.2312238364934745,
        0.21601984544387764,
        0.23373779370670353,
        0.21445443670567088,
        0.210741700365644,
        0.2089851778417197,
        0.19984641965828376,
        0.18358602895051426,
        0.16600398773363803,
        0.14936583739921497,
        0.14684159823845128,
        0.14034187449397328,
        0.11227281827686696,
        0.09549423222286733,
        0.09699040681889236,
        0.08368778954783127,
        0.07285201615715135,
        0.06609239822815444,
        0.06712766581830018,
        0.06571178890380885,
        0.05876124933827422,
        0.047775744976412994,
        0.04517043724966535,
        0.04086780062968338,
        0.035162664167093884,
        0.02501739454518543,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    length_current = 2 * len(input_obj)
    length_interpolated = 4 * len(input_obj)

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.reshape_1d()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.reshape_1d()
        self.assertEqual(
            str(cm_new.exception), "reshape_1d() missing 1 required positional argument: 'input_object'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_null_list_as_input_obj(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.reshape_1d(
                input_object=[],
                length_current=self.length_current,
                length_interpolated=self.length_interpolated,
                Pixel_size_current=0.0,
                Pixel_size_interpolated=0.0,
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.reshape_1d(
                input_object=[],
                length_current=self.length_current,
                length_interpolated=self.length_interpolated,
                Pixel_size_current=0.0,
                Pixel_size_interpolated=0.0,
            )
        self.assertEqual(str(cm_new.exception), str('list index out of range'))
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):
        return_new = fu.reshape_1d(
            input_object=self.input_obj,
            length_current=self.length_current,
            length_interpolated=self.length_interpolated,
            Pixel_size_current=0.0,
            Pixel_size_interpolated=0.0,
        )
        return_old = oldfu.reshape_1d(
            input_object=self.input_obj,
            length_current=self.length_current,
            length_interpolated=self.length_interpolated,
            Pixel_size_current=0.0,
            Pixel_size_interpolated=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.9987006394884093,
                    0.9984012789768186,
                    0.9949190503218257,
                    0.9914368216668327,
                    0.9896257587904398,
                    0.9878146959140469,
                    0.9879925410580723,
                    0.9881703862020976,
                    0.9853914373390813,
                    0.982612488476065,
                    0.980768471517506,
                    0.9789244545589472,
                    0.9768239966317642,
                    0.9747235387045814,
                    0.9684657075034984,
                    0.9622078763024153,
                    0.9514501576823364,
                    0.9406924390622574,
                    0.9353550011110412,
                    0.9300175631598249,
                    0.9138384002452886,
                    0.8976592373307525,
                    0.8725659473677114,
                    0.8474726574046705,
                    0.8208789295187349,
                    0.7942852016327994,
                    0.8004115310750056,
                    0.8065378605172119,
                    0.8023635419845978,
                    0.7981892234519837,
                    0.7981326410346317,
                    0.7980760586172797,
                    0.7907725421094888,
                    0.7834690256016978,
                    0.7783772401138781,
                    0.7732854546260584,
                    0.7663823243922937,
                    0.759479194158529,
                    0.744866338146831,
                    0.7302534821351329,
                    0.7330014893838894,
                    0.735749496632646,
                    0.7431635936352783,
                    0.7505776906379105,
                    0.7669120453546201,
                    0.7832464000713297,
                    0.7913002159869383,
                    0.799354031902547,
                    0.7911571404018989,
                    0.7829602489012508,
                    0.7648501975517006,
                    0.7467401462021503,
                    0.7342071510756978,
                    0.7216741559492451,
                    0.7395099304981709,
                    0.7573457050470969,
                    0.7654728347875488,
                    0.7735999645280006,
                    0.7548103289473327,
                    0.7360206933666649,
                    0.7217261446941747,
                    0.7074315960216845,
                    0.6956367247973985,
                    0.6838418535731124,
                    0.6826668365577051,
                    0.6814918195422979,
                    0.670965918073349,
                    0.6604400166044002,
                    0.6440485834511308,
                    0.6276571502978614,
                    0.612193523734228,
                    0.5967298971705947,
                    0.5945686493400985,
                    0.5924074015096022,
                    0.6018756311447464,
                    0.6113438607798904,
                    0.5851316089407739,
                    0.5589193571016572,
                    0.48793086856988643,
                    0.4169423800381157,
                    0.37621069148474606,
                    0.33547900293137645,
                    0.3852849220908138,
                    0.43509084125025116,
                    0.47471391332980717,
                    0.5143369854093631,
                    0.48246840421809234,
                    0.4505998230268216,
                    0.37619326263782904,
                    0.3017867022488365,
                    0.2978619796156228,
                    0.29393725698240897,
                    0.3167520205422152,
                    0.3395667841020214,
                    0.3409558632409324,
                    0.34234494237984336,
                    0.3288292401222159,
                    0.31531353786458843,
                    0.3136783914049709,
                    0.3120432449453534,
                    0.2992490805664078,
                    0.2864549161874622,
                    0.2604809270582267,
                    0.23450693792899116,
                    0.21848599564418894,
                    0.20246505335938672,
                    0.2141203314381543,
                    0.22577560951692183,
                    0.22073511351450137,
                    0.21569461751208094,
                    0.21540286971208988,
                    0.21511112191209886,
                    0.2121322061602452,
                    0.2091532904083915,
                    0.19625060918308482,
                    0.18334792795777813,
                    0.18941688670268403,
                    0.1954858454475899,
                    0.20390271856917572,
                    0.21231959169076153,
                    0.20715745195452195,
                    0.20199531221828237,
                    0.20695176114522576,
                    0.21190821007216915,
                    0.2131039010337531,
                    0.21429959199533707,
                    0.1991425026475226,
                    0.18398541329970813,
                    0.1928495284777807,
                    0.20171364365585326,
                    0.21554164218628785,
                    0.22936964071672247,
                    0.21821426052445253,
                    0.20705888033218262,
                    0.21903147440031445,
                    0.2310040684684463,
                    0.23211228106330495,
                    0.23322049365816364,
                    0.2434358764754268,
                    0.25365125929269,
                    0.2611984886379459,
                    0.2687457179832018,
                    0.2606959665563314,
                    0.252646215129461,
                    0.24990057147518477,
                    0.24715492782090853,
                    0.24051486327254099,
                    0.23387479872417344,
                    0.23351342935234481,
                    0.23315205998051616,
                    0.23218794823699535,
                    0.2312238364934745,
                    0.22362184096867607,
                    0.21601984544387764,
                    0.2248788195752906,
                    0.23373779370670353,
                    0.22409611520618722,
                    0.21445443670567088,
                    0.21259806853565744,
                    0.210741700365644,
                    0.20986343910368183,
                    0.2089851778417197,
                    0.2044157987500017,
                    0.19984641965828376,
                    0.191716224304399,
                    0.18358602895051426,
                    0.17479500834207615,
                    0.16600398773363803,
                    0.1576849125664265,
                    0.14936583739921497,
                    0.14810371781883314,
                    0.14684159823845128,
                    0.14359173636621228,
                    0.14034187449397328,
                    0.12630734638542013,
                    0.11227281827686696,
                    0.10388352524986715,
                    0.09549423222286733,
                    0.09624231952087985,
                    0.09699040681889236,
                    0.0903390981833618,
                    0.08368778954783127,
                    0.0782699028524913,
                    0.07285201615715135,
                    0.0694722071926529,
                    0.06609239822815444,
                    0.06661003202322731,
                    0.06712766581830018,
                    0.06641972736105452,
                    0.06571178890380885,
                    0.06223651912104154,
                    0.05876124933827422,
                    0.05326849715734361,
                    0.047775744976412994,
                    0.04647309111303917,
                    0.04517043724966535,
                    0.04301911893967436,
                    0.04086780062968338,
                    0.03801523239838863,
                    0.035162664167093884,
                    0.030090029356139657,
                    0.02501739454518543,
                    0.012508697272592715,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    def test_null_length_interpolated_pixel_sizes_identical_error_msg(self):
        sp_global_def.BATCH = False
        return_new = fu.reshape_1d(
            input_object=self.input_obj,
            length_current=self.length_current,
            length_interpolated=0,
            Pixel_size_current=0.5,
            Pixel_size_interpolated=0.5,
        )
        sp_global_def.BATCH = False
        return_old = oldfu.reshape_1d(
            input_object=self.input_obj,
            length_current=self.length_current,
            length_interpolated=0,
            Pixel_size_current=0.5,
            Pixel_size_interpolated=0.5,
        )
        self.assertEqual(return_new, [])
        self.assertEqual(return_old, [])

    def test_null_length_current(self):
        sp_global_def.BATCH = False
        return_new = fu.reshape_1d(
            input_object=self.input_obj,
            length_current=0,
            length_interpolated=self.length_interpolated,
            Pixel_size_current=0.0,
            Pixel_size_interpolated=0.0,
        )
        sp_global_def.BATCH = False
        return_old = oldfu.reshape_1d(
            input_object=self.input_obj,
            length_current=0,
            length_interpolated=self.length_interpolated,
            Pixel_size_current=0.0,
            Pixel_size_interpolated=0.0,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                [
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.999,
                    0.9988503197442047,
                    0.9987006394884093,
                    0.9985509592326139,
                    0.9984012789768186,
                    0.9966601646493222,
                    0.9949190503218257,
                    0.9931779359943291,
                    0.9914368216668327,
                    0.9905312902286363,
                    0.9896257587904398,
                    0.9887202273522433,
                    0.9878146959140469,
                    0.9879036184860596,
                    0.9879925410580723,
                    0.988081463630085,
                    0.9881703862020976,
                    0.9867809117705895,
                    0.9853914373390813,
                    0.9840019629075731,
                    0.982612488476065,
                    0.9816904799967855,
                    0.980768471517506,
                    0.9798464630382266,
                    0.9789244545589472,
                    0.9778742255953558,
                    0.9768239966317642,
                    0.9757737676681728,
                    0.9747235387045814,
                    0.9715946231040399,
                    0.9684657075034984,
                    0.9653367919029568,
                    0.9622078763024153,
                    0.9568290169923759,
                    0.9514501576823364,
                    0.9460712983722969,
                    0.9406924390622574,
                    0.9380237200866492,
                    0.9353550011110412,
                    0.932686282135433,
                    0.9300175631598249,
                    0.9219279817025567,
                    0.9138384002452886,
                    0.9057488187880206,
                    0.8976592373307525,
                    0.885112592349232,
                    0.8725659473677114,
                    0.860019302386191,
                    0.8474726574046705,
                    0.8341757934617027,
                    0.8208789295187349,
                    0.8075820655757672,
                    0.7942852016327994,
                    0.7973483663539025,
                    0.8004115310750056,
                    0.8034746957961088,
                    0.8065378605172119,
                    0.8044507012509048,
                    0.8023635419845978,
                    0.8002763827182908,
                    0.7981892234519837,
                    0.7981609322433078,
                    0.7981326410346317,
                    0.7981043498259557,
                    0.7980760586172797,
                    0.7944243003633842,
                    0.7907725421094888,
                    0.7871207838555934,
                    0.7834690256016978,
                    0.7809231328577879,
                    0.7783772401138781,
                    0.7758313473699683,
                    0.7732854546260584,
                    0.7698338895091761,
                    0.7663823243922937,
                    0.7629307592754113,
                    0.759479194158529,
                    0.75217276615268,
                    0.744866338146831,
                    0.7375599101409819,
                    0.7302534821351329,
                    0.7316274857595111,
                    0.7330014893838894,
                    0.7343754930082678,
                    0.735749496632646,
                    0.7394565451339621,
                    0.7431635936352783,
                    0.7468706421365944,
                    0.7505776906379105,
                    0.7587448679962653,
                    0.7669120453546201,
                    0.7750792227129749,
                    0.7832464000713297,
                    0.7872733080291341,
                    0.7913002159869383,
                    0.7953271239447426,
                    0.799354031902547,
                    0.7952555861522229,
                    0.7911571404018989,
                    0.7870586946515749,
                    0.7829602489012508,
                    0.7739052232264757,
                    0.7648501975517006,
                    0.7557951718769255,
                    0.7467401462021503,
                    0.7404736486389241,
                    0.7342071510756978,
                    0.7279406535124714,
                    0.7216741559492451,
                    0.7305920432237081,
                    0.7395099304981709,
                    0.7484278177726339,
                    0.7573457050470969,
                    0.7614092699173228,
                    0.7654728347875488,
                    0.7695363996577747,
                    0.7735999645280006,
                    0.7642051467376667,
                    0.7548103289473327,
                    0.7454155111569988,
                    0.7360206933666649,
                    0.7288734190304198,
                    0.7217261446941747,
                    0.7145788703579296,
                    0.7074315960216845,
                    0.7015341604095415,
                    0.6956367247973985,
                    0.6897392891852554,
                    0.6838418535731124,
                    0.6832543450654088,
                    0.6826668365577051,
                    0.6820793280500015,
                    0.6814918195422979,
                    0.6762288688078235,
                    0.670965918073349,
                    0.6657029673388746,
                    0.6604400166044002,
                    0.6522443000277656,
                    0.6440485834511308,
                    0.635852866874496,
                    0.6276571502978614,
                    0.6199253370160447,
                    0.612193523734228,
                    0.6044617104524114,
                    0.5967298971705947,
                    0.5956492732553466,
                    0.5945686493400985,
                    0.5934880254248504,
                    0.5924074015096022,
                    0.5971415163271743,
                    0.6018756311447464,
                    0.6066097459623184,
                    0.6113438607798904,
                    0.5982377348603322,
                    0.5851316089407739,
                    0.5720254830212155,
                    0.5589193571016572,
                    0.5234251128357719,
                    0.48793086856988643,
                    0.45243662430400106,
                    0.4169423800381157,
                    0.39657653576143087,
                    0.37621069148474606,
                    0.35584484720806125,
                    0.33547900293137645,
                    0.3603819625110951,
                    0.3852849220908138,
                    0.4101878816705325,
                    0.43509084125025116,
                    0.45490237729002914,
                    0.47471391332980717,
                    0.49452544936958515,
                    0.5143369854093631,
                    0.49840269481372773,
                    0.48246840421809234,
                    0.466534113622457,
                    0.4505998230268216,
                    0.41339654283232535,
                    0.37619326263782904,
                    0.3389899824433328,
                    0.3017867022488365,
                    0.29982434093222965,
                    0.2978619796156228,
                    0.29589961829901584,
                    0.29393725698240897,
                    0.3053446387623121,
                    0.3167520205422152,
                    0.32815940232211827,
                    0.3395667841020214,
                    0.3402613236714769,
                    0.3409558632409324,
                    0.3416504028103879,
                    0.34234494237984336,
                    0.33558709125102965,
                    0.3288292401222159,
                    0.32207138899340215,
                    0.31531353786458843,
                    0.3144959646347797,
                    0.3136783914049709,
                    0.31286081817516215,
                    0.3120432449453534,
                    0.30564616275588063,
                    0.2992490805664078,
                    0.292851998376935,
                    0.2864549161874622,
                    0.27346792162284445,
                    0.2604809270582267,
                    0.24749393249360893,
                    0.23450693792899116,
                    0.22649646678659005,
                    0.21848599564418894,
                    0.21047552450178783,
                    0.20246505335938672,
                    0.2082926923987705,
                    0.2141203314381543,
                    0.21994797047753806,
                    0.22577560951692183,
                    0.2232553615157116,
                    0.22073511351450137,
                    0.21821486551329117,
                    0.21569461751208094,
                    0.21554874361208542,
                    0.21540286971208988,
                    0.21525699581209437,
                    0.21511112191209886,
                    0.21362166403617203,
                    0.2121322061602452,
                    0.21064274828431834,
                    0.2091532904083915,
                    0.20270194979573816,
                    0.19625060918308482,
                    0.18979926857043147,
                    0.18334792795777813,
                    0.18638240733023106,
                    0.18941688670268403,
                    0.19245136607513696,
                    0.1954858454475899,
                    0.1996942820083828,
                    0.20390271856917572,
                    0.20811115512996864,
                    0.21231959169076153,
                    0.20973852182264174,
                    0.20715745195452195,
                    0.20457638208640216,
                    0.20199531221828237,
                    0.20447353668175405,
                    0.20695176114522576,
                    0.20942998560869747,
                    0.21190821007216915,
                    0.21250605555296112,
                    0.2131039010337531,
                    0.2137017465145451,
                    0.21429959199533707,
                    0.20672104732142985,
                    0.1991425026475226,
                    0.19156395797361536,
                    0.18398541329970813,
                    0.18841747088874441,
                    0.1928495284777807,
                    0.19728158606681698,
                    0.20171364365585326,
                    0.20862764292107056,
                    0.21554164218628785,
                    0.22245564145150518,
                    0.22936964071672247,
                    0.22379195062058752,
                    0.21821426052445253,
                    0.21263657042831757,
                    0.20705888033218262,
                    0.21304517736624853,
                    0.21903147440031445,
                    0.22501777143438037,
                    0.2310040684684463,
                    0.23155817476587562,
                    0.23211228106330495,
                    0.2326663873607343,
                    0.23322049365816364,
                    0.23832818506679523,
                    0.2434358764754268,
                    0.2485435678840584,
                    0.25365125929269,
                    0.25742487396531794,
                    0.2611984886379459,
                    0.26497210331057386,
                    0.2687457179832018,
                    0.2647208422697666,
                    0.2606959665563314,
                    0.2566710908428962,
                    0.252646215129461,
                    0.2512733933023229,
                    0.24990057147518477,
                    0.24852774964804664,
                    0.24715492782090853,
                    0.24383489554672477,
                    0.24051486327254099,
                    0.2371948309983572,
                    0.23387479872417344,
                    0.23369411403825913,
                    0.23351342935234481,
                    0.23333274466643047,
                    0.23315205998051616,
                    0.23267000410875574,
                    0.23218794823699535,
                    0.23170589236523492,
                    0.2312238364934745,
                    0.22742283873107527,
                    0.22362184096867607,
                    0.21982084320627687,
                    0.21601984544387764,
                    0.22044933250958412,
                    0.2248788195752906,
                    0.22930830664099705,
                    0.23373779370670353,
                    0.22891695445644536,
                    0.22409611520618722,
                    0.21927527595592905,
                    0.21445443670567088,
                    0.21352625262066416,
                    0.21259806853565744,
                    0.2116698844506507,
                    0.210741700365644,
                    0.2103025697346629,
                    0.20986343910368183,
                    0.20942430847270077,
                    0.2089851778417197,
                    0.2067004882958607,
                    0.2044157987500017,
                    0.20213110920414273,
                    0.19984641965828376,
                    0.19578132198134138,
                    0.191716224304399,
                    0.18765112662745664,
                    0.18358602895051426,
                    0.1791905186462952,
                    0.17479500834207615,
                    0.1703994980378571,
                    0.16600398773363803,
                    0.16184445015003227,
                    0.1576849125664265,
                    0.15352537498282073,
                    0.14936583739921497,
                    0.14873477760902404,
                    0.14810371781883314,
                    0.1474726580286422,
                    0.14684159823845128,
                    0.1452166673023318,
                    0.14359173636621228,
                    0.14196680543009277,
                    0.14034187449397328,
                    0.1333246104396967,
                    0.12630734638542013,
                    0.11929008233114353,
                    0.11227281827686696,
                    0.10807817176336705,
                    0.10388352524986715,
                    0.09968887873636724,
                    0.09549423222286733,
                    0.09586827587187359,
                    0.09624231952087985,
                    0.0966163631698861,
                    0.09699040681889236,
                    0.09366475250112709,
                    0.0903390981833618,
                    0.08701344386559653,
                    0.08368778954783127,
                    0.08097884620016128,
                    0.0782699028524913,
                    0.07556095950482133,
                    0.07285201615715135,
                    0.07116211167490212,
                    0.0694722071926529,
                    0.06778230271040367,
                    0.06609239822815444,
                    0.06635121512569087,
                    0.06661003202322731,
                    0.06686884892076375,
                    0.06712766581830018,
                    0.06677369658967736,
                    0.06641972736105452,
                    0.06606575813243168,
                    0.06571178890380885,
                    0.06397415401242519,
                    0.06223651912104154,
                    0.06049888422965788,
                    0.05876124933827422,
                    0.05601487324780892,
                    0.05326849715734361,
                    0.0505221210668783,
                    0.047775744976412994,
                    0.047124418044726085,
                    0.04647309111303917,
                    0.04582176418135226,
                    0.04517043724966535,
                    0.044094778094669856,
                    0.04301911893967436,
                    0.04194345978467887,
                    0.04086780062968338,
                    0.039441516514036004,
                    0.03801523239838863,
                    0.03658894828274126,
                    0.035162664167093884,
                    0.03262634676161677,
                    0.030090029356139657,
                    0.027553711950662543,
                    0.02501739454518543,
                    0.018763045908889074,
                    0.012508697272592715,
                    0.006254348636296356,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                atol=1.e-5
            )
        )

    #@unittest.skip("Somehow systemexit is not raised")
    def test_all_the_values_are_null_or_empty_list_error_msg(self):
        sp_global_def.BATCH = False
        return_new = fu.reshape_1d(
                input_object=[],
                length_current=0,
                length_interpolated=0,
                Pixel_size_current=0.0,
                Pixel_size_interpolated=0.0,
            )
        sp_global_def.BATCH = False
        return_old = oldfu.reshape_1d(
                input_object=[],
                length_current=0,
                length_interpolated=0,
                Pixel_size_current=0.0,
                Pixel_size_interpolated=0.0,
            )

        self.assertEqual(return_new, [])
        self.assertEqual(return_old, return_old)

    def test_invalid_pixel_sizes_combination_in_null_value_as_length_interpolated_returns_ZeroDivisionError(
        self
    ):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.reshape_1d(
                input_object=self.input_obj,
                length_current=self.length_current,
                length_interpolated=0,
                Pixel_size_current=0.3,
                Pixel_size_interpolated=0.0,
            )
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.reshape_1d(
                input_object=self.input_obj,
                length_current=self.length_current,
                length_interpolated=0,
                Pixel_size_current=0.3,
                Pixel_size_interpolated=0.0,
            )
        self.assertEqual(str(cm_new.exception), "float division by zero")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


'''
@unittest.skip("I m not sure how test them")
class Test_estimate_3D_center_MPI(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.estimate_3D_center_MPI'"""
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.estimate_3D_center_MPI"))

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.estimate_3D_center_MPI()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.estimate_3D_center_MPI()
        self.assertEqual(str(cm_new.exception), "estimate_3D_center_MPI() takes at least 5 arguments (0 given)")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_myid_not_identical_to_main_node(self):
        (data, nima, myid, number_of_proc, main_node) = self.argum[0]
        return_new = fu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        return_old = oldfu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        self.assertTrue(array_equal(return_old, [0.0, 0.0, 0.0, 0.0, 0.0]))
        self.assertTrue(array_equal(return_new, [0.0, 0.0, 0.0, 0.0, 0.0]))

    def test_myid_not_identical_to_main_node1(self):
        (data, nima, myid, number_of_proc, main_node) = self.argum[0]
        main_node=myid
        return_new = fu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        return_old = oldfu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        self.assertTrue(array_equal(return_old, [0.0, 0.0, 0.0, 0.0, 0.0]))
        self.assertTrue(array_equal(return_new, [0.0, 0.0, 0.0, 0.0, 0.0]))
'''


class Test_rotate_3D_shift(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.rotate_3D_shift'"""

    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl")
    )
    (data, notUsed) = argum[0]
    shift3d = [10.1, 0.2, 10.0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotate_3D_shift()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotate_3D_shift()
        self.assertEqual(
            str(cm_new.exception),
            "rotate_3D_shift() missing 2 required positional arguments: 'data' and 'shift3d'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_image(self):
        data, not_used = get_real_data(dim=3)
        with self.assertRaises(RuntimeError) as cm_new:
            fu.rotate_3D_shift(data=[data], shift3d=self.shift3d)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.rotate_3D_shift(data=[data], shift3d=self.shift3d)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_Nonetype_image(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.rotate_3D_shift(data=[None], shift3d=self.shift3d)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.rotate_3D_shift(data=[None], shift3d=self.shift3d)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'get_attr'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):

        fu_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        fu_data[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        oldfu_data[0].set_attr_dict(self.data[0].get_attr_dict())


        return_new = fu.rotate_3D_shift(data=fu_data, shift3d=self.shift3d)
        return_old = oldfu.rotate_3D_shift(data=oldfu_data, shift3d=self.shift3d)
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)

        for i in range(len(fu_data)):
            self.assertTrue(
                array_equal(
                    fu_data[i].get_attr("xform.projection"),
                    oldfu_data[i].get_attr("xform.projection"),
                )
            )
            self.assertFalse(
                array_equal(
                    self.data[i].get_attr("xform.projection"),
                    fu_data[i].get_attr("xform.projection"),
                )
            )

    def test_returns_IndexError_list_index_out_of_range(self):
        shift3d = [0, 0.1]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_3D_shift(data=self.data, shift3d=shift3d)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_3D_shift(data=self.data, shift3d=shift3d)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_set_arb_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_arb_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_arb_params()
        self.assertEqual(
            str(cm_new.exception),
            "set_arb_params() missing 3 required positional arguments: 'img', 'params', and 'par_str'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_1Attr(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = "lowpassfilter"
        params = "0.50"
        return_new = fu.set_arb_params(fu_img, [params], [par_str])
        return_old = oldfu.set_arb_params(oldfu_img, [params], [par_str])
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)
        self.assertEqual(fu_img.get_attr(par_str), fu_img.get_attr(par_str))
        self.assertEqual(fu_img.get_attr(par_str), params)

    def test_with_ListAttr(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = ["lowpassfilter", "fake_par"]
        params = ["0.50", "3"]
        return_new = fu.set_arb_params(fu_img, params, par_str)
        return_old = oldfu.set_arb_params(oldfu_img, params, par_str)
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)
        self.assertEqual(fu_img.get_attr(par_str[0]), fu_img.get_attr(par_str[0]))
        self.assertEqual(fu_img.get_attr(par_str[1]), fu_img.get_attr(par_str[1]))
        self.assertEqual(fu_img.get_attr(par_str[0]), params[0])
        self.assertEqual(fu_img.get_attr(par_str[1]), params[1])

    def test_with_BadListAttr_returns_IndexError_list_index_out_of_range(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = ["lowpassfilter", "fake_par"]
        params = ["0.50"]
        with self.assertRaises(IndexError) as cm_new:
            fu.set_arb_params(fu_img, params, par_str)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_arb_params(oldfu_img, params, par_str)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_get_arb_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_arb_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_arb_params()
        self.assertEqual(
            str(cm_new.exception),
            "get_arb_params() missing 2 required positional arguments: 'img' and 'par_str'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_1Attr(self):
        return_new = fu.get_arb_params(EMData(), ["datatype"])
        return_old = oldfu.get_arb_params(EMData(), ["datatype"])
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [EMData().get_attr("datatype")])

    def test_with_ListAttr(self):
        list_of_attribute = ["datatype", "is_complex_ri"]
        return_new = fu.get_arb_params(EMData(), list_of_attribute)
        return_old = oldfu.get_arb_params(EMData(), list_of_attribute)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertEqual(return_new[0], EMData().get_attr("datatype"))
        self.assertEqual(return_new[1], EMData().get_attr("is_complex_ri"))

    def test_notValid_params_returns_RuntimeError_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_arb_params(EMData(), ["invalid_param"])
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_arb_params(EMData(), ["invalid_param"])
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_reduce_EMData_to_root(unittest.TestCase):

    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl")
    )
    (data, notUsed) = argum[0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.reduce_EMData_to_root()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.reduce_EMData_to_root()
        self.assertEqual(
            str(cm_new.exception),
            "reduce_EMData_to_root() missing 2 required positional arguments: 'data' and 'myid'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("skip because segmentation fault")
    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        return_new = fu.reduce_EMData_to_root(None, myid=74, main_node=0, comm = -1)
        return_old = oldfu.reduce_EMData_to_root(None, myid=74, main_node=0, comm = -1)
        self.assertEqual(return_new, return_old)

    def test_default_values(self):
        new_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        new_data[0].set_attr_dict(self.data[0].get_attr_dict())
        old_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        old_data[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.reduce_EMData_to_root(new_data[0], myid=74, main_node=0, comm=-1)
        return_old = oldfu.reduce_EMData_to_root(old_data[0], myid=74, main_node=0, comm=-1)

        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        new_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        new_data[0].set_attr_dict(self.data[0].get_attr_dict())
        old_data = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        old_data[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.reduce_EMData_to_root(
            new_data[0], myid=74, main_node=0, comm=MPI_COMM_WORLD
        )
        return_old = oldfu.reduce_EMData_to_root(
            old_data[0], myid=74, main_node=0, comm=MPI_COMM_WORLD
        )
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)


class Test_bcast_compacted_EMData_all_to_all(unittest.TestCase):
    """
    It does not matter which of my images I-ll use, I got always the following typeerror:
    Error
Traceback (most recent call last):
  File "/home/lusnig/SPHIRE_1_1/lib/python2.7/unittest/case.py", line 329, in run
    testMethod()
  File "/home/lusnig/EMAN2/eman2/sphire/tests/test_utilities.py", line 1451, in test_bcast_compacted_EMData_all_to_all_true_should_return_equal_objects
    return_new = fu.bcast_compacted_EMData_all_to_all(list_of_em_objects, myid)
  File "/home/lusnig/EMAN2/eman2/sphire/libpy/sparx_utilities.py", line 1105, in bcast_compacted_EMData_all_to_all
    em_dict = dict_received["em_dict"]
TypeError: 'NoneType' object has no attribute '__getitem__'
    """

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all()
        self.assertEqual(
            str(cm_new.exception),
            "bcast_compacted_EMData_all_to_all() missing 2 required positional arguments: 'list_of_em_objects' and 'myid'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_NoneType_data_returns_TypeError_NoneType_obj_hasnot_attribute__getitem__(
        self
    ):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all([None, None], myid=74, comm=-1)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all([None, None], myid=74, comm=-1)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object is not subscriptable"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_image(self):
        data = [IMAGE_3D, IMAGE_3D]
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all(data, myid=74, comm=-1)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all(data, myid=74, comm=-1)

        self.assertEqual(str(cm_new.exception), str(cm_old.exception))
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object is not subscriptable"
        )


class Test_bcast_EMData_to_all(unittest.TestCase):
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl"))
    (data, notUsed) = argum[0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_EMData_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_EMData_to_all()
        self.assertEqual(
            str(cm_new.exception),
            "bcast_EMData_to_all() missing 2 required positional arguments: 'tavg' and 'myid'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_default_values(self):
        tavg_new = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_new[0].set_attr_dict(self.data[0].get_attr_dict())
        tavg_old = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_old[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.bcast_EMData_to_all(tavg_new[0], myid=11, source_node=0, comm=-1)
        return_old = oldfu.bcast_EMData_to_all(tavg_old[0], myid=11, source_node=0, comm=-1)

        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_myid_equal_sourcenode_default_valuqes(self):
        tavg_new = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_new[0].set_attr_dict(self.data[0].get_attr_dict())
        tavg_old = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_old[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.bcast_EMData_to_all(tavg_new[0], myid=0, source_node=0, comm=-1)
        return_old = oldfu.bcast_EMData_to_all(tavg_old[0], myid=0, source_node=0, comm=-1)

        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        tavg_new = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_new[0].set_attr_dict(self.data[0].get_attr_dict())
        tavg_old = [EMNumPy.numpy2em(deepcopy(self.data[0].get_3dview()))]
        tavg_old[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.bcast_EMData_to_all(tavg_new[0], myid=0, source_node=0, comm=MPI_COMM_WORLD)

        return_old = oldfu.bcast_EMData_to_all(tavg_old[0], myid=0, source_node=0, comm=MPI_COMM_WORLD)

        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    @unittest.skip("skip because segmentation fault")
    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        return_new = fu.bcast_EMData_to_all(None, 11, source_node =0, comm= -1)
        return_old = oldfu.bcast_EMData_to_all(None, 11, source_node =0, comm= -1)
        self.assertEqual(return_new, return_old)



class Test_send_EMData(unittest.TestCase):
    # argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.send_EMData"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.send_EMData()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.send_EMData()
        self.assertEqual(
            str(cm_new.exception), "send_EMData() missing 3 required positional arguments: 'img', 'dst', and 'tag'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.send_EMData(None, 0, 0)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.send_EMData(None, 0, 0)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'get_xsize'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_send_EMData_true_should_return_equal_objects(self):
    #     filepath = path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.send_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle_load(rb)
    #
    #     print(argum[0])
    #
    #     (img, dst, tag, comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)


class Test_recv_EMData(unittest.TestCase):
    # argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.recv_EMData"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_EMData()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_EMData()
        self.assertEqual(
            str(cm_new.exception), "recv_EMData() missing 2 required positional arguments: 'src' and 'tag'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_recv_EMData_true_should_return_equal_objects(self):
    #     filepath = path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.recv_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle_load(rb)
    #
    #     print(argum[0])
    #
    #     (src, tag,comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)


class Test_bcast_number_to_all(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_number_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_number_to_all()
        self.assertEqual(
            str(cm_new.exception),
            "bcast_number_to_all() missing 1 required positional argument: 'number_to_send'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_number_to_send_is_null(self):
        return_new = fu.bcast_number_to_all(
            number_to_send=0, source_node=0, mpi_comm=-1
        )
        return_old = oldfu.bcast_number_to_all(
            number_to_send=0, source_node=0, mpi_comm=-1
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)

    def test_with_MPI_COMM_WORLD(self):
        return_new = fu.bcast_number_to_all(
            number_to_send=0, source_node=0, mpi_comm=MPI_COMM_WORLD
        )
        return_old = oldfu.bcast_number_to_all(
            number_to_send=0, source_node=0, mpi_comm=MPI_COMM_WORLD
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)

    def test_number_to_send_is_not_null(self):
        return_new = fu.bcast_number_to_all(
            number_to_send=3, source_node=0, mpi_comm=-1
        )
        return_old = oldfu.bcast_number_to_all(
            number_to_send=3, source_node=0, mpi_comm=-1
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 3)

    def test_invalid_number_to_send_error_msg(self):
        return_new = fu.bcast_number_to_all(
            number_to_send=None, source_node=0, mpi_comm=-1
        )
        return_old = oldfu.bcast_number_to_all(
            number_to_send=None, source_node=0, mpi_comm=-1
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, None)


class Test_bcast_list_to_all(unittest.TestCase):
    myid = 74
    source_node = 0
    list_to_send = [1, 2]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_list_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_list_to_all()
        self.assertEqual(
            str(cm_new.exception),
            "bcast_list_to_all() missing 2 required positional arguments: 'list_to_send' and 'myid'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


    def test_with_empty_list(self):
        return_new = fu.bcast_list_to_all([], myid = self.myid, source_node =self.source_node, mpi_comm= -1)
        return_old = oldfu.bcast_list_to_all([], myid= self.myid, source_node = self.source_node, mpi_comm= -1)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new,[]))

    def test_defualt_values(self):
        return_new = fu.bcast_list_to_all(
            self.list_to_send, myid=self.myid, source_node=self.source_node, mpi_comm=-1
        )
        return_old = oldfu.bcast_list_to_all(
            self.list_to_send, myid=self.myid, source_node=self.source_node, mpi_comm=-1
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))

    def test_defualt_values_with_MPI_COMM_WORLD(self):
        return_new = fu.bcast_list_to_all(
            self.list_to_send,
            myid=self.myid,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        return_old = oldfu.bcast_list_to_all(
            self.list_to_send,
            myid=self.myid,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))

    def test_myid_equal_sourcenode(self):
        return_new = fu.bcast_list_to_all(
            self.list_to_send,
            myid=self.source_node,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        return_old = oldfu.bcast_list_to_all(
            self.list_to_send,
            myid=self.source_node,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, self.list_to_send))


    def test_myid_equal_sourcenode_and_wrong_type_in_listsender_returns_ValueError(self):
        list_to_send=[IMAGE_2D]
        sp_global_def.BATCH = False
        with self.assertRaises(ValueError) as cm_new:
            fu.bcast_list_to_all(list_to_send, myid = self.source_node, source_node =self.source_node, mpi_comm= MPI_COMM_WORLD)
        sp_global_def.BATCH = False
        with self.assertRaises(ValueError) as cm_old:
            oldfu.bcast_list_to_all(list_to_send, myid= self.source_node, source_node = self.source_node, mpi_comm= MPI_COMM_WORLD)
        self.assertEqual(str(cm_new.exception), "setting an array element with a sequence.")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_type_in_listsender(self):
        list_to_send = [IMAGE_2D]
        return_new = fu.bcast_list_to_all(
            list_to_send,
            myid=self.myid,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        return_old = oldfu.bcast_list_to_all(
            list_to_send,
            myid=self.myid,
            source_node=self.source_node,
            mpi_comm=MPI_COMM_WORLD,
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))


class Test_recv_attr_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_attr_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_attr_dict()
        self.assertEqual(
            str(cm_new.exception),
            "recv_attr_dict() missing 7 required positional arguments: 'main_node', 'stack', 'data', 'list_params', 'image_start', 'image_end', and 'number_of_proc'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_send_attr_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.send_attr_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.send_attr_dict()
        self.assertEqual(
            str(cm_new.exception),
            "send_attr_dict() missing 5 required positional arguments: 'main_node', 'data', 'list_params', 'image_start', and 'image_end'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_recv_attr_dict_bdb(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_attr_dict_bdb()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_attr_dict_bdb()
        self.assertEqual(
            str(cm_new.exception),
            "recv_attr_dict_bdb() missing 7 required positional arguments: 'main_node', 'stack', 'data', 'list_params', 'image_start', 'image_end', and 'number_of_proc'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_print_begin_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_begin_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_begin_msg()
        self.assertEqual(
            str(cm_new.exception),
            "print_begin_msg() missing 1 required positional argument: 'program_name'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("print showing different msgs")
    def test_print_begin_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_begin_msg("test_pgr", onscreen=False)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_begin_msg("test_pgr", onscreen=False)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout

    def test_print_begin_msg_onscreen_True(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_begin_msg("test_pgr", onscreen=True)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_begin_msg("test_pgr", onscreen=True)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout


class Test_print_end_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_end_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_end_msg()
        self.assertEqual(
            str(cm_new.exception), "print_end_msg() missing 1 required positional argument: 'program_name'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("print showing different msgs")
    def test_print_end_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_end_msg("test_pgr", onscreen=False)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_end_msg("test_pgr", onscreen=False)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout

    def test_print_end_msg_onscreen_True(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_end_msg("test_pgr", onscreen=True)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_end_msg("test_pgr", onscreen=True)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout


class Test_print_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_msg()
        self.assertEqual(
            str(cm_new.exception), "print_msg() missing 1 required positional argument: 'msg'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("print showing different msgs")
    def test_print_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_msg("test_pgr")
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_msg("test_pgr")
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout


class Test_read_fsc(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_fsc()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_fsc()
        self.assertEqual(
            str(cm_new.exception), "read_fsc() missing 1 required positional argument: 'filename'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("No writing on CI")
    def test_write_text_row(self):
        data = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
        f = path.join(ABSOLUTE_PATH_TO_RESOURCES, "filefu.txt")
        fu.write_text_file(data, f)
        return_new = fu.read_fsc(f)
        return_old = oldfu.read_fsc(f)
        remove_list_of_file([f])
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, data))


class Test_circumference(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.circumference()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.circumference()
        self.assertEqual(
            str(cm_new.exception), "circumference() missing 1 required positional argument: 'img'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_default_values_2Dimg(self):
        return_new = fu.circumference(deepcopy(IMAGE_BLANK_2D), inner=-1, outer=-1)
        return_old = oldfu.circumference(deepcopy(IMAGE_BLANK_2D), inner=-1, outer=-1)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_with_default_values_3Dimg(self):
        return_new = fu.circumference(deepcopy(IMAGE_BLANK_3D), inner=-1, outer=-1)
        return_old = oldfu.circumference(deepcopy(IMAGE_BLANK_3D), inner=-1, outer=-1)
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_with_invalid_mask_returns_RuntimeError_ImageFormatException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.circumference(
                deepcopy(IMAGE_BLANK_2D),
                inner=IMAGE_BLANK_2D.get_xsize() + 10,
                outer=-1,
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.circumference(
                deepcopy(IMAGE_BLANK_2D),
                inner=IMAGE_BLANK_2D.get_xsize() + 10,
                outer=-1,
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageFormatException")
        self.assertEqual(msg[1], "Invalid mask")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_wrong_outer_value(self):
        return_new = fu.circumference(
            deepcopy(IMAGE_BLANK_2D), inner=-1, outer=IMAGE_BLANK_2D.get_xsize() + 10
        )
        return_old = oldfu.circumference(
            deepcopy(IMAGE_BLANK_2D), inner=-1, outer=IMAGE_BLANK_2D.get_xsize() + 10
        )
        self.assertTrue(array_equal(return_new.get_3dview(), return_old.get_3dview()))


class Test_write_headers(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_headers()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_headers()
        self.assertEqual(
            str(cm_new.exception), "write_headers() missing 3 required positional arguments: 'filename', 'data', and 'lima'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    # The following tests sometimes failed in the nosetests
    @unittest.skip("No writing on CI")
    def test_hdf_type(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_headers(path_fu, [IMAGE_2D], [1])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertEqual(
            returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
        )
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu, path_oldfu])

    @unittest.skip("No writing on CI")
    def test_overwrite_hdf_file(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        f = open(path_fu, "w+")
        f.close()
        f = open(path_oldfu, "w+")
        f.close()
        fu.write_headers(path_fu, [IMAGE_2D], [1])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertEqual(
            returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
        )
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu, path_oldfu])

    @unittest.skip("No writing on CI")
    def test_hdf_type_AssertError_list_differ(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_headers(path_fu, [IMAGE_2D], [2])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        with self.assertRaises(AssertionError) as cm:
            self.assertEqual(
                returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
            )
        msg = str(cm.exception).split("'")
        self.assertEqual(msg[0].split(":")[0], "Lists differ")
        self.assertEqual(
            msg[8], "\n\nDiff is 45477 characters long. Set self.maxDiff to None to see it."
        )
        remove_list_of_file([path_fu, path_oldfu])

    def test_bdf_type(self):
        """
        in the code they inserted the following comment:
        #  For unknown reasons this does not work on Linux, but works on Mac ??? Really?
        """
        self.assertTrue(True)

    @unittest.skip("No writing on CI")
    def test_invalid_filetype_error_msg(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.txt")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.txt")
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_new:
            fu.write_headers(path_fu, [IMAGE_2D], [1])
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_old:
            oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])

        # self.assertEqual(str(cm_new.exception), str(cm_old.exception))
        # self.assertFalse(path.isfile(path_fu))
        # self.assertFalse(path.isfile(path_oldfu))


class Test_write_header(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_header()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_header()
        self.assertEqual(
            str(cm_new.exception), "write_header() missing 3 required positional arguments: 'filename', 'data', and 'lima'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("No writing on CI")
    def test_hdf_type(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_header(path_fu, IMAGE_2D, 1)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertEqual(
            returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
        )
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu, path_oldfu])

    @unittest.skip("No writing on CI")
    def test_overwrite_hdf_file(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        f = open(path_fu, "w+")
        f.close()
        f = open(path_oldfu, "w+")
        f.close()
        fu.write_header(path_fu, IMAGE_2D, 1)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertEqual(
            returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
        )
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu, path_oldfu])

    @unittest.skip("No writing on CI")
    def test_hdf_type_AssertError_list_differ(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_header(path_fu, IMAGE_2D, 2)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        with self.assertRaises(AssertionError) as cm:
            self.assertEqual(
                returns_values_in_file(path_fu), returns_values_in_file(path_oldfu)
            )
        msg = str(cm.exception).split("'")
        self.assertEqual(msg[0].split(":")[0], "Lists differ")
        self.assertEqual(
            msg[8], "\n\nDiff is 45477 characters long. Set self.maxDiff to None to see it."
        )
        remove_list_of_file([path_fu, path_oldfu])

    @unittest.skip("No writing on CI")
    def test_invalid_systemexit_error_msg(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.txt")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.txt")
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_new:
            fu.write_header(path_fu, IMAGE_2D, 1)

        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_old:
            oldfu.write_header(path_oldfu, IMAGE_2D, 1)

        self.assertEqual(str(cm_new.exception), str(cm_old.exception))
        # self.assertFalse(path.isfile(path_fu))
        # self.assertFalse(path.isfile(path_oldfu))


class Test_file_type(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.file_type()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.file_type()
        self.assertEqual(
            str(cm_new.exception), "file_type() missing 1 required positional argument: 'name'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_bdb_filetype(self):
        fu.file_type("bdb:bdbfile")
        oldfu.file_type("bdb:bdbfile")
        self.assertTrue(True)

    def test_valid_filetype(self):
        fu.file_type("hdf.hdf")
        oldfu.file_type("hdf.hdf")
        self.assertTrue(True)

    @unittest.skip("System Exit not raised")
    def test_invalid_filetype_error_msg(self):
        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_new:
            fu.file_type("invalid.cc")

        sp_global_def.BATCH = True
        with self.assertRaises(SystemExit) as cm_old:
            oldfu.file_type("invalid.cc")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))
        self.assertTrue(True)


class Test_get_params2D(unittest.TestCase):
    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.get_params2D.pkl")
    )

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params2D()
        self.assertEqual(
            str(cm_new.exception), "get_params2D() missing 1 required positional argument: 'ima'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_params2D(self):
        (ima,) = self.argum[0]
        return_new = fu.get_params2D(ima, xform="xform.align2d")
        return_old = oldfu.get_params2D(ima, xform="xform.align2d")
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (0.0, 0.0, 0.0, 0, 1.0)))

    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        (ima,) = self.argum[0]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(ima, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(ima, xform="xform.align3d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_input_2dimg_returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(IMAGE_2D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(IMAGE_2D, xform="xform.align2d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_input_3dimg_returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(IMAGE_3D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(IMAGE_3D, xform="xform.align2d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("skip because segmentation fault")
    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params2D(None, xform="xform.align2d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params2D(None, xform="xform.align2d")
        self.assertEqual(str(cm_new.exception), "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))



class Test_set_params2D(unittest.TestCase):
    # argum = get_arg_from_pickle_file(
    #     path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params2D")
    # )
    params = [1, 2, 3, 4, 5]

    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl")
    )
    (data, notUsed) = argum[0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params2D()
        self.assertEqual(
            str(cm_new.exception), "set_params2D() missing 2 required positional arguments: 'ima' and 'p'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_set_params2D_using_wrongxform(self):

        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        fu2_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu2_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params2D(fu_img[0], self.params, xform="xform.align2d")
        oldfu.set_params2D(
            fu2_img[0], self.params, xform="xform.projection"
        )  # is not setting the params
        self.assertFalse(
            array_equal(fu.get_params2D(fu_img[0]), oldfu.get_params2D(fu2_img[0]))
        )

    def test_set_params2D_using_wrongxform2(self):
        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        fu2_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu2_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params2D(
            fu_img[0], self.params, xform="xform.projection"
        )  # is not setting the params
        oldfu.set_params2D(
            fu2_img[0], self.params, xform="xform.projection"
        )  # is not setting the params
        self.assertTrue(
            array_equal(fu.get_params2D(fu_img[0]), oldfu.get_params2D(fu2_img[0]))
        )

    def test_set_params2D(self):
        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params2D(fu_img[0], self.params, xform="xform.align2d")
        oldfu.set_params2D(oldfu_img[0], self.params, xform="xform.align2d")
        self.assertTrue(
            array_equal(fu.get_params2D(fu_img[0]), oldfu.get_params2D(oldfu_img[0]))
        )

    def test_less_params(self):
        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        with self.assertRaises(IndexError) as cm_new:
            fu.set_params2D(fu_img, [0, 1], xform="xform.align2d")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params2D(oldfu_img, [0, 1], xform="xform.align2d")
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_xform_does_not_change_the_values_IS_IT_OK_OR_NOT(self):
        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params2D(
            fu_img[0], self.params, xform="xform.align3d"
        )  # is not setting the params
        oldfu.set_params2D(
            oldfu_img[0], self.params, xform="xform.align3d"
        )  # is not setting the params
        self.assertTrue(
            array_equal(fu.get_params2D(fu_img[0]), oldfu.get_params2D(oldfu_img[0]))
        )

    def test_wrong_input_img(self):
        # I called it wrong image just because in the 'get_params2D' there was an error due to the missing xform key
        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params2D(fu_img[0], self.params, xform="xform.align2d")
        oldfu.set_params2D(oldfu_img[0], self.params, xform="xform.align2d")
        self.assertTrue(
            array_equal(fu.get_params2D(fu_img[0]), oldfu.get_params2D(oldfu_img[0]))
        )

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params2D(None, self.params, xform="xform.align2d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params2D(None, self.params, xform="xform.align2d")
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'set_attr'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_get_params3D(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params3D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params3D()
        self.assertEqual(
            str(cm_new.exception), "get_params3D() missing 1 required positional argument: 'ima'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

#     # todo: I need a 3D image with 'xform.align3d' key
#     """
#     def test_get_params3D(self):
#         return_new = fu.get_params3D(IMAGE_3D, xform="xform.align3d")
#         return_old = oldfu.get_params3D(IMAGE_3D, xform="xform.align3d")
#         self.assertTrue(array_equal(return_new,return_old))
#         self.assertTrue(array_equal(return_new,(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 1.0)))
#     """
# 
    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params3D(IMAGE_3D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params3D(IMAGE_3D, xform="xform.align2d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_input_img_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params3D(IMAGE_2D, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params3D(IMAGE_2D, xform="xform.align3d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("skip because segmentation fault")
    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params3D(IMAGE_3D, xform="xform.align3d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params3D(IMAGE_3D, xform="xform.align3d")
        self.assertEqual(str(cm_new.exception), "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


# # todo: I need a 3D image with 'xform.align3d' key
"""
class Test_set_params3D(unittest.TestCase):
    params=[1,2,3,4,5,6,7,8]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params3D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params3D()
        self.assertEqual(str(cm_new.exception), "set_params3D() takes at least 2 arguments (0 given)")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_set_params3D(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        fu.set_params3D(fu_img, self.params, xform="xform.align3d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align3d")
        self.assertTrue(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        self.assertFalse(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_less_params(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        with self.assertRaises(IndexError) as cm_new:
            fu.set_params3D(fu_img, [0,1], xform="xform.align3d")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params3D(oldfu_img, [0,1], xform="xform.align3d")
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_xform_does_not_change_the_values_IS_IT_OK_OR_NOT(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        fu.set_params3D(fu_img, self.params, xform="xform.align2d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align2d")
        self.assertTrue(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        #self.assertFalse(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_wrong_input_img(self):
        # I called it wrong image just because in the 'get_params2D' there was an error due to the missing xform key
        fu_img = deepcopy(IMAGE_2D)
        oldfu_img = deepcopy(IMAGE_2D)
        fu.set_params3D(fu_img, self.params, xform="xform.align3d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align3d")
        self.assertTrue(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        self.assertFalse(array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params3D(None, self.params, xform="xform.align3d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params3D(None, self.params, xform="xform.align3d")
        self.assertEqual(str(cm_new.exception), "'NoneType' object has no attribute 'set_attr'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))
# """


class Test_get_params_proj(unittest.TestCase):
    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.get_params_proj.pkl")
    )

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params_proj()
        self.assertEqual(
            str(cm_new.exception),
            "get_params_proj() missing 1 required positional argument: 'ima'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_params_proj(self):
        (ima,) = self.argum[0]
        return_new = fu.get_params_proj(ima, xform="xform.projection")
        return_old = oldfu.get_params_proj(ima, xform="xform.projection")
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                (14.71329548619616, 101.3719902962565, 220.4187405823029, -0.0, -0.0),
            )
        )

    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        (ima,) = self.argum[0]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(ima, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(ima, xform="xform.align3d")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_input_2dimg_returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(IMAGE_2D, xform="xform.projection")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(IMAGE_2D, xform="xform.projection")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_input_3dimg_returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(IMAGE_3D, xform="xform.projection")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(IMAGE_3D, xform="xform.projection")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params_proj(None, xform="xform.projection")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params_proj(None, xform="xform.projection")
        self.assertEqual(str(cm_new.exception), "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))
        """


class Test_set_params_proj(unittest.TestCase):
    params = [1, 2, 3, 4, 5]
    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl")
    )
    (data, notUsed) = argum[0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params_proj()
        self.assertEqual(
            str(cm_new.exception),
            "set_params_proj() missing 2 required positional arguments: 'ima' and 'p'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_set_params_proj_using_wrongxform_returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):  # error is ok
        # fu_img = deepcopy(IMAGE_2D)

        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        return_new = fu.set_params_proj(fu_img[0], self.params, xform="xform.align2d")

        return_old = fu.set_params_proj(oldfu_img[0], self.params, xform="xform.align2d")
        self.assertEqual(return_new, return_old)
        # with self.assertRaises(RuntimeError) as cm:
        #     fu.get_params_proj(fu_img[0], xform="xform.projection")
        # msg = str(cm.exception).split("'")
        # self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        # self.assertEqual(msg[3], "The requested key does not exist")

    def test_set_params_proj_using_wrongxform2returns_NotExistingObjectException_key_doesnot_exist(
        self
    ):
        # fu_img = deepcopy(IMAGE_2D)
        # fu2_img = deepcopy(IMAGE_2D)

        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())


        return_new = fu.set_params_proj(
            fu_img[0], self.params, xform="xform.align2d"
        )  # is not setting the params
        return_old = oldfu.set_params_proj(
            oldfu_img[0], self.params, xform="xform.align2d"
        )  # is not setting the params
        # with self.assertRaises(RuntimeError) as cm_new:

        self.assertEqual(return_new,return_old )
        return_new = fu.get_params_proj(fu_img[0], xform="xform.projection")
        # with self.assertRaises(RuntimeError) as cm_old:
        return_old = oldfu.get_params_proj(oldfu_img[0], xform="xform.projection")

        self.assertEqual(return_new, return_old)
        # msg = str(cm_new.exception).split("'")
        # msg_old = str(cm_old.exception).split("'")
        # self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        # self.assertEqual(msg[3], "The requested key does not exist")
        # self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        # self.assertEqual(msg[3], msg_old[3])
        # self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_set_params_proj(self):
        # fu_img = deepcopy(IMAGE_2D)
        # oldfu_img = deepcopy(IMAGE_2D)

        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_params_proj(fu_img[0], self.params, xform="xform.projection")
        oldfu.set_params_proj(oldfu_img[0], self.params, xform="xform.projection")
        self.assertTrue(
            array_equal(
                fu.get_params_proj(fu_img[0], xform="xform.projection"),
                oldfu.get_params_proj(oldfu_img[0], xform="xform.projection"),
            )
        )
        # self.assertFalse(array_equal(fu.get_params_proj(fu_img), fu.get_params_proj(IMAGE_2D))) # IMAGE2D has not key ''xform.projection'

    def test_less_params(self):
        # fu_img = deepcopy(IMAGE_2D)
        # oldfu_img = deepcopy(IMAGE_2D)

        fu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        fu_img[0].set_attr_dict(self.data[0].get_attr_dict())
        oldfu_img = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        oldfu_img[0].set_attr_dict(self.data[0].get_attr_dict())


        with self.assertRaises(IndexError) as cm_new:
            fu.set_params_proj(fu_img[0], [0, 1], xform="xform.projection")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params_proj(oldfu_img[0], [0, 1], xform="xform.projection")
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params_proj(None, self.params, xform="xform.projection")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params_proj(None, self.params, xform="xform.projection")
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'set_attr'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_get_ctf(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_ctf()
        self.assertEqual(
            str(cm_new.exception), "get_ctf() missing 1 required positional argument: 'ima'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_wrong_img_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_ctf(IMAGE_2D)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_ctf(IMAGE_2D)
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_ctf(self):
        img_with_ctf = get_arg_from_pickle_file(
            path.join(ABSOLUTE_PATH_TO_RESOURCES, "alignment.ali2d_single_iter")
        )[0][0][0]
        return_new = fu.get_ctf(img_with_ctf)
        return_old = oldfu.get_ctf(img_with_ctf)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                (
                    1.1349999904632568,
                    0.009999999776482582,
                    300.0,
                    5.699999809265137,
                    0.0,
                    10.0,
                    0.04473999887704849,
                    130.39999389648438,
                ),
                atol=1.e-5
            )
        )


class Test_same_ctf(unittest.TestCase):
    params = [1, 2, 3, 4, 5, 6]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.same_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.same_ctf()
        self.assertEqual(
            str(cm_new.exception), "same_ctf() missing 2 required positional arguments: 'c1' and 'c2'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_same_ctf(self):
        self.assertTrue(
            fu.same_ctf(fu.generate_ctf(self.params), oldfu.generate_ctf(self.params))
        )

    def test_not_same_ctf(self):
        self.assertFalse(
            fu.same_ctf(
                fu.generate_ctf(self.params), oldfu.generate_ctf([0, 1, 2, 3, 4, 5])
            )
        )


class Test_generate_ctf(unittest.TestCase):
    """ params = [defocus, cs, voltage, apix, bfactor, ampcont, astigmatism_amplitude, astigmatism_angle] """

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.generate_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.generate_ctf()
        self.assertEqual(
            str(cm_new.exception), "generate_ctf() missing 1 required positional argument: 'p'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_generate_ctf_with6Values(self):
        self.assertTrue(
            fu.same_ctf(
                fu.generate_ctf([1, 2, 3, 4, 5, 6]),
                oldfu.generate_ctf([1, 2, 3, 4, 5, 6]),
            )
        )

    def test_generate_ctf_with8Values(self):
        self.assertTrue(
            fu.same_ctf(
                fu.generate_ctf([1, 2, 3, 4, 5, 6, 7, 8]),
                oldfu.generate_ctf([1, 2, 3, 4, 5, 6, 7, 8]),
            )
        )

    def test_generate_ctf_with_incorrect_number_of_params_warning_msg(self):
        self.assertTrue(fu.generate_ctf([1, 2, 3, 4, 5, 6, 7]) is None)
        self.assertTrue(oldfu.generate_ctf([1, 2, 3, 4, 5, 6, 7]) is None)


class Test_delete_bdb(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.delete_bdb()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.delete_bdb()
        self.assertEqual(
            str(cm_new.exception), "delete_bdb() missing 1 required positional argument: 'name'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_disable_bdb_cache(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.disable_bdb_cache(3)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.disable_bdb_cache(3)
        self.assertEqual(
            str(cm_new.exception), "disable_bdb_cache() takes 0 positional arguments but 1 was given"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_disable_bdb_cache(self):
        import EMAN2db

        EMAN2db.BDB_CACHE_DISABLE = False
        self.assertFalse(EMAN2db.BDB_CACHE_DISABLE)
        fu.disable_bdb_cache()
        self.assertTrue(EMAN2db.BDB_CACHE_DISABLE)
        EMAN2db.BDB_CACHE_DISABLE = False
        self.assertFalse(EMAN2db.BDB_CACHE_DISABLE)
        oldfu.disable_bdb_cache()
        self.assertTrue(EMAN2db.BDB_CACHE_DISABLE)


class Test_getvec(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getvec()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getvec()
        self.assertEqual(
            str(cm_new.exception), "getvec() missing 2 required positional arguments: 'phi' and 'tht'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_tht_between_90_180(self):
        return_new = fu.getvec(0, 100)
        return_old = oldfu.getvec(0, 100)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                (-0.98480775301220802, 1.2060416625018976e-16, 0.17364817766693041),atol=1.e-5)
        )

    def test_tht_bigger_than_180(self):
        return_new = fu.getvec(0, 200)
        return_old = oldfu.getvec(0, 200)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            allclose(
                return_new,
                (-0.34202014332566871, 4.1885387376769918e-17, 0.93969262078590843),atol=1.e-5)
        )

    def test_tht_lower_than_90(self):
        return_new = fu.getvec(0, 0)
        return_old = oldfu.getvec(0, 0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (0.0, 0.0, 1.0)))


class Test_getfvec(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getfvec()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getfvec()
        self.assertEqual(
            str(cm_new.exception), "getfvec() missing 2 required positional arguments: 'phi' and 'tht'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_tht_between_90_180(self):
        return_new = fu.getfvec(0, 100)
        return_old = oldfu.getfvec(0, 100)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(return_new, (0.98480775301220802, 0.0, -0.1736481776669303))
        )

    def test_tht_bigger_than_180(self):
        return_new = fu.getfvec(0, 200)
        return_old = oldfu.getfvec(0, 200)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(return_new, (-0.34202014332566866, -0.0, -0.93969262078590843))
        )

    def test_tht_lower_than_90(self):
        return_new = fu.getfvec(0, 0)
        return_old = oldfu.getfvec(0, 0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (0.0, 0.0, 1.0)))


class Test_nearest_fang(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_fang()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_fang()
        self.assertEqual(
            str(cm_new.exception), "nearest_fang() missing 3 required positional arguments: 'vecs', 'phi', and 'tht'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_nearest_fang_true_should_return_equal_objects(self):
        """ values got from pickle files/utilities/utilities.nearest_fang """
        vecs = [
            [0.0, 0.0, 1.0],
            [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
            [-0.4104178845882416, 0.8487908840179443, 0.3333333432674408],
            [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
            [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
            [0.8309417963027954, -0.4454488158226013, 0.3333333432674408],
            [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
            [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
            [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
            [-0.8309417963027954, 0.44544869661331177, -0.3333333134651184],
            [-0.6804221868515015, -0.652621328830719, -0.3333333134651184],
            [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
        ]
        tht = 66.00945
        phi = 58.54455
        return_new = fu.nearest_fang(vecs, phi, tht)
        return_old = oldfu.nearest_fang(vecs, phi, tht)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_empty_vectore(self):
        """ values got from pickle files/utilities/utilities.nearest_fang """
        self.assertEqual(
            fu.nearest_fang([], 100, 100), oldfu.nearest_fang([], 100, 100)
        )
        self.assertEqual(fu.nearest_fang([], 100, 100), -1)


class Test_nearest_many_full_k_projangles(unittest.TestCase):
    reference_normals = [
        [0.606369137763977, 0.7754802703857422, 0.17591717839241028],
        [0.344023197889328, 0.9092735648155212, 0.23424272239208221],
        [0.5131438970565796, 0.7110531330108643, -0.4807148575782776],
        [0.6525110006332397, 0.6401833295822144, 0.4054562747478485],
        [0.5846421718597412, 0.5353381037712097, 0.6095954775810242],
        [0.3914891481399536, 0.4943649470806122, 0.7761054039001465],
        [0.21746492385864258, 0.411188542842865, 0.8852304816246033],
        [0.18686196208000183, 0.4279184937477112, 0.8842897415161133],
        [0.2696961760520935, 0.41237473487854004, 0.870178759098053],
        [0.34728822112083435, 0.3424328565597534, 0.8730009198188782],
        [0.2467251867055893, 0.39220815896987915, 0.8861712217330933],
        [0.43794623017311096, 0.19451908767223358, 0.8777046203613281],
        [0.35838937759399414, 0.0876869484782219, -0.9294450283050537],
        [0.6956571340560913, 0.7182994484901428, 0.010348091833293438],
        [0.6555072665214539, 0.7445935010910034, -0.12605828046798706],
        [0.7438855767250061, 0.6679566502571106, -0.02163686789572239],
        [0.58192378282547, 0.8076738715171814, -0.09501412510871887],
        [0.7202955484390259, 0.693575382232666, 0.011288836598396301],
        [0.6438657641410828, 0.765091598033905, 0.008466575294733047],
        [0.6417456269264221, 0.7646241188049316, -0.05926619470119476],
        [0.593335747718811, 0.7773913145065308, 0.20884287357330322],
        [0.5866740942001343, 0.8075113296508789, -0.06114771217107773],
        [0.5893274545669556, 0.8044687509536743, 0.07431796938180923],
        [0.48042023181915283, 0.8660674691200256, 0.13828791677951813],
        [0.46822038292884827, 0.8812242746353149, -0.06491056084632874],
        [0.34745562076568604, 0.9322780966758728, 0.10065855830907822],
        [0.4396599531173706, 0.898162305355072, 0.0018815546063706279],
        [0.5071992874145508, 0.8368419408798218, 0.2060207575559616],
        [0.35214218497276306, 0.913831353187561, -0.20225776731967926],
        [0.5917134881019592, 0.798856258392334, 0.1081843376159668],
        [0.31928351521492004, 0.9256179332733154, -0.2031984180212021],
        [0.5689234137535095, 0.8101938962936401, 0.14111001789569855],
        [0.5366130471229553, 0.8180546164512634, 0.2069614678621292],
        [0.6138750910758972, 0.751165509223938, 0.24270929396152496],
        [0.6470115184783936, 0.7327832579612732, 0.210724338889122],
        [0.6170760989189148, 0.7832963466644287, 0.0752587541937828],
        [0.6726201176643372, 0.7090698480606079, 0.21166512370109558],
        [0.5653374195098877, 0.7982293963432312, 0.2079022079706192],
        [0.6659785509109497, 0.704732358455658, 0.24459083378314972],
        [0.6436562538146973, 0.7641429901123047, 0.04233306273818016],
        [0.6849393248558044, 0.7063358426094055, 0.17873942852020264],
        [0.5400856733322144, 0.8298555016517639, 0.14016936719417572],
        [0.5633652806282043, 0.8192181587219238, 0.10724367946386337],
        [0.5887830853462219, 0.8072782158851624, 0.040451530367136],
        [0.5886198282241821, 0.8079495429992676, -0.02728116139769554],
        [0.5608543157577515, 0.8246564269065857, 0.07337724417448044],
        [0.6164841055870056, 0.7869266271591187, -0.026340581476688385],
        [0.6699250340461731, 0.7420257925987244, -0.0244591124355793],
        [0.6205720901489258, 0.7555667161941528, 0.20978358387947083],
        [0.668122410774231, 0.7417618036270142, -0.058325473219156265],
        [0.6953815221786499, 0.7172793745994568, 0.04421444982290268],
        [0.6165966987609863, 0.7861903309822083, 0.04139237478375435],
        [0.6167761087417603, 0.7871026396751404, 0.007525925524532795],
        [0.7440555691719055, 0.6680058240890503, 0.012229571118950844],
        [0.5889342427253723, 0.8081541061401367, 0.006585149094462395],
        [0.6699285507202148, 0.7411633729934692, 0.04327383637428284],
        [0.7258118987083435, 0.6720566749572754, 0.1467544287443161],
        [0.6510280966758728, 0.7452824115753174, 0.1439322829246521],
        [0.695436418056488, 0.7182027697563171, -0.02351834438741207],
        [0.6768127679824829, 0.7217592000961304, 0.1448730081319809],
        [0.659572958946228, 0.7303088307380676, 0.1777988076210022],
        [0.6193289160728455, 0.7775111198425293, 0.10912513732910156],
        [0.644066333770752, 0.7611650824546814, 0.07619946449995041],
        [0.646177351474762, 0.7552087903022766, 0.11006595939397812],
        [0.7330403327941895, 0.6557652354240417, 0.18062089383602142],
        [0.7375331521034241, 0.6283562183380127, 0.2474130392074585],
        [0.7217933535575867, 0.68284010887146, 0.11288806051015854],
        [0.6975162625312805, 0.6453772783279419, 0.311382919549942],
        [0.8656806349754333, 0.48613080382347107, 0.11947321146726608],
        [0.7893708944320679, 0.6029136180877686, 0.11571019887924194],
        [0.8126943111419678, 0.5629141926765442, 0.15051743388175964],
        [0.8193334341049194, 0.5153672695159912, 0.25117599964141846],
        [0.8606626391410828, 0.45913165807724, 0.22013163566589355],
        [0.9627028107643127, 0.2471613585948944, -0.11006592959165573],
        [0.8993244171142578, 0.4370543360710144, -0.014110974967479706],
        [0.8985337615013123, 0.4356166422367096, 0.053621746599674225],
        [0.6973650455474854, 0.6844565272331238, 0.21260593831539154],
        [0.7557139992713928, 0.6292310357093811, 0.18156161904335022],
        [0.720099925994873, 0.6935028433799744, -0.0225775558501482],
        [0.6813780665397644, 0.7211584448814392, -0.12511759996414185],
        [0.720158576965332, 0.689294695854187, 0.07902166992425919],
        [0.6333718299865723, 0.7533666491508484, 0.17685800790786743],
        [0.7017511129379272, 0.6973404884338379, 0.14581383764743805],
        [0.670264720916748, 0.7381020188331604, 0.07714022696018219],
        [0.6722255349159241, 0.7319769859313965, 0.11100655794143677],
        [0.6406394839286804, 0.7163008451461792, 0.2765757739543915],
        [0.6907424926757812, 0.6801389455795288, 0.2455316036939621],
        [0.6244292855262756, 0.7678812146186829, 0.1429915428161621],
        [0.7094387412071228, 0.6814774870872498, 0.17968012392520905],
        [0.5963707566261292, 0.7414255142211914, 0.30761995911598206],
        [0.6974412798881531, 0.7078441977500916, 0.11194729804992676],
        [0.5866034030914307, 0.7729452252388, 0.24176852405071259],
        [0.7146044969558716, 0.6546692252159119, 0.24647238850593567],
        [0.5873112082481384, 0.7613202929496765, 0.2746942937374115],
        [0.50588458776474, 0.7085287570953369, 0.49200382828712463],
    ]
    angles = [[41.921590970437258, 91.23979851375101, 333.346436124961, -0.0, -0.0]]
    howmany = 47
    symclass = foundamental_symclasss("c1")

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_many_full_k_projangles()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_many_full_k_projangles()
        self.assertEqual(
            str(cm_new.exception),
            "nearest_many_full_k_projangles() missing 2 required positional arguments: 'reference_normals' and 'angles'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_pickle_file_values(self):
        symclass = foundamental_symclasss(
            "c5"
        )  # I creasted it like the one of the pickle file
        return_new = fu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, self.howmany, symclass
        )
        return_old = oldfu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, self.howmany, symclass
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [
                        15,
                        53,
                        78,
                        17,
                        58,
                        13,
                        50,
                        47,
                        80,
                        49,
                        55,
                        79,
                        66,
                        83,
                        18,
                        19,
                        90,
                        39,
                        14,
                        69,
                        84,
                        62,
                        56,
                        46,
                        82,
                        52,
                        51,
                        63,
                        59,
                        35,
                        64,
                        88,
                        57,
                        77,
                        44,
                        54,
                        61,
                        40,
                        70,
                        21,
                        43,
                        60,
                        16,
                        87,
                        22,
                        29,
                        76,
                    ]
                ],
            )
        )

    def test_with_class_c1(self):
        return_new = fu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, self.howmany, self.symclass
        )
        return_old = oldfu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, self.howmany, self.symclass
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [
                        15,
                        53,
                        78,
                        17,
                        58,
                        13,
                        50,
                        47,
                        80,
                        49,
                        55,
                        79,
                        66,
                        83,
                        18,
                        19,
                        90,
                        39,
                        14,
                        69,
                        84,
                        62,
                        56,
                        46,
                        82,
                        52,
                        51,
                        63,
                        59,
                        35,
                        64,
                        88,
                        57,
                        77,
                        44,
                        54,
                        61,
                        40,
                        70,
                        21,
                        43,
                        60,
                        16,
                        87,
                        22,
                        29,
                        76,
                    ]
                ],
            )
        )

    def test_with_null_howmany(self):
        return_new = fu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, 0, self.symclass
        )
        return_old = oldfu.nearest_many_full_k_projangles(
            self.reference_normals, self.angles, 0, self.symclass
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [[]]))

    def test_with_empty_list_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.nearest_many_full_k_projangles(
                [], self.angles, self.howmany, self.symclass
            )
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.nearest_many_full_k_projangles(
                [], self.angles, self.howmany, self.symclass
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(
            msg[3],
            "Error, number of neighbors cannot be larger than number of reference directions",
        )
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_assign_projdirs_f(unittest.TestCase):
    """
    Since 'projdirs' and 'refdirs' are got in the sxmeridian from  angles_to_normals(list_of_angles) I used the
    output of the angles_to_normals tests to fill the 'projdirs' variable. the refdirs values are 2/3 of projdirs values
    """

    projdirs = [
        [0.0, 0.0, 1.0],
        [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
        [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
        [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
        [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
        [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
        [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
        [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
        [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
        [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
        [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
        [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
    ]
    refdirs = [
        [0.0, 0.0, 0.66],
        [0.44907856464385987, 0.4307301163673401, 0.22000000655651095],
        [-0.27087580382823945, 0.5602020227909088, 0.22000000655651095],
        [-0.6164889872074127, -0.08450628250837326, 0.22000000655651095],
        [-0.11013545751571656, -0.6124297463893891, 0.22000000655651095],
        [0.5484215462207794, -0.2939962184429169, 0.22000000655651095],
        [5.7699032538494066e-08, 5.044209628034821e-15, -0.66],
        [0.6164889872074127, 0.08450620383024215, -0.21999998688697817],
        [0.11013536900281906, 0.6124297463893891, -0.21999998688697817],
        [-0.5484216248989106, 0.2939961397647858, -0.21999998688697817],
        [-0.44907860398292543, -0.43073007702827454, -0.21999998688697817],
        [0.2708758628368378, -0.5602019834518432, -0.21999998688697817],
    ]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.assign_projdirs_f()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.assign_projdirs_f()
        self.assertEqual(
            str(cm_new.exception),
            "assign_projdirs_f() missing 3 required positional arguments: 'projdirs', 'refdirs', and 'neighbors'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_real_data(self):
        neighbors = int(len(self.projdirs) / len(self.refdirs))
        return_new = fu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        return_old = oldfu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]],
            )
        )

    @unittest.skip("skip because segmentation fault")
    def test_with_null_neighboor_value_crashes_because_signal11SIGSEV(self):
        return_new = fu.assign_projdirs_f(self.projdirs, self.refdirs, 0)
        return_old = oldfu.assign_projdirs_f(self.projdirs, self.refdirs, 0)
        self.assertTrue(array_equal(return_new,return_old))


    def test_with_negative_neighboor_value_returns_IndexError_list_index_out_of_range(
        self
    ):
        with self.assertRaises(IndexError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, -1)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, -1)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_too_high_neighboor_value_returns_IndexError_list_index_out_of_range(
        self
    ):
        with self.assertRaises(IndexError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, 5)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, 5)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_invalid_neighbors_type(self):
        neighbors = len(self.projdirs) / len(self.refdirs)
        with self.assertRaises(TypeError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        msg = str(cm_new.exception).split("\n")
        msg_old = str(cm_old.exception).split("\n")
        self.assertEqual(
            msg[0] + msg[1],
            "Python argument types in    None.assign_projdirs_f(list, list, float)",
        )
        self.assertEqual(msg[0] + msg[1], msg_old[0] + msg_old[1])

    def test_with_projdirs_refdirs_have_different_length(self):
        refdirs = self.refdirs[:10]
        neighbors = int(len(self.projdirs) / len(refdirs))
        return_new = fu.assign_projdirs_f(self.projdirs, refdirs, neighbors)
        return_old = oldfu.assign_projdirs_f(self.projdirs, refdirs, neighbors)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new, [[0], [1], [2], [3, 10], [4], [5, 11], [6], [7], [8], [9]]
            )
        )

    def test_empty_projdirs(self):
        return_new = fu.assign_projdirs_f([], self.refdirs, 1)
        return_old = oldfu.assign_projdirs_f([], self.refdirs, 1)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(return_new, [[], [], [], [], [], [], [], [], [], [], [], []])
        )

    @unittest.skip("skip because segmentation fault")
    def test_empty_refdirs_crashes_because_signal11SIGSEV(self):
        return_new = fu.assign_projdirs_f(self.projdirs, [], 1)
        return_old = oldfu.assign_projdirs_f(self.projdirs, [], 1)
        self.assertTrue(array_equal(return_new,return_old))


class Test_angles_to_normals(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angles_to_normals()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angles_to_normals()
        self.assertEqual(
            str(cm_new.exception),
            "angles_to_normals() missing 1 required positional argument: 'angles'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_pickle_file_values(self):
        angles = [
            [0.0, 0.0, 0.0],
            [43.805265094506787, 70.528779365509308, 0.0],
            [115.80526509450678, 70.528779365509308, 0.0],
            [187.80526509450678, 70.528779365509308, 0.0],
            [259.80526509450681, 70.528779365509308, 0.0],
            [331.80526509450681, 70.528779365509308, 0.0],
            [180.0, 180.0, 0.0],
            [7.8052650945068081, 109.47122063449069, 0.0],
            [79.805265094506808, 109.47122063449069, 0.0],
            [151.80526509450681, 109.47122063449069, 0.0],
            [223.80526509450681, 109.47122063449069, 0.0],
            [295.80526509450681, 109.47122063449069, 0.0],
        ]
        return_new = fu.angles_to_normals(angles)
        return_old = oldfu.angles_to_normals(angles)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [0.0, 0.0, 1.0],
                    [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
                    [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
                    [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
                    [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
                    [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
                    [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
                    [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
                    [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
                    [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
                    [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
                    [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
                ],
            )
        )

    def test_with_empty_angles_list(self):
        return_new = fu.angles_to_normals([])
        return_old = oldfu.angles_to_normals([])
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))


class Test_angular_occupancy(unittest.TestCase):
    params = [
        [12, 1, 32],
        [12, 11, 2],
        [2, 1, 32],
        [121, 19, 32],
        [1.2, 1, 3.2],
        [102, 1, 32],
        [12, 10, 32],
        [9, 16, 32],
    ]
    angstep = 15

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angular_occupancy()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angular_occupancy()
        self.assertEqual(
            str(cm_new.exception),
            "angular_occupancy() missing 1 required positional argument: 'params'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_less_angles_returns_IndexError_list_index_out_of_range(self):
        angles = [[0.1], [21.1], [30.11], [1.1]]
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_occupancy(angles, self.angstep, "c5", "S")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_occupancy(angles, self.angstep, "c5", "S")
        self.assertEqual(
            str(cm_new.exception), "index 1 is out of bounds for axis 1 with size 1"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c5_method_S(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "c5", "S")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "c5", "S")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 0, 0, 1, 0, 0, 0, 1]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [45.63832975533989, 19.18813645372093, 0.0],
                    [6.3806392352448285, 27.266044450732828, 0.0],
                    [33.51666024724356, 33.55730976192071, 0.0],
                    [57.38151411228954, 38.94244126898138, 0.0],
                    [7.068436092656995, 43.7617426926798, 0.0],
                    [27.193047890155107, 48.1896851042214, 0.0],
                    [46.143332861432214, 52.33011303567037, 0.0],
                    [64.18346669052086, 56.251011404111416, 0.0],
                    [9.503974866209632, 60.00000000000001, 0.0],
                    [26.248664035752775, 63.612200038757, 0.0],
                    [42.53027664295201, 67.11461952384143, 0.0],
                    [58.44017921964933, 70.52877936550931, 0.0],
                    [2.054682482737803, 73.87237978683925, 0.0],
                    [17.439360304788927, 77.16041159309584, 0.0],
                    [32.65213688990222, 80.40593177313954, 0.0],
                    [47.745595738025806, 83.62062979155719, 0.0],
                    [62.76879760804155, 86.8152614632796, 0.0],
                    [5.7687977080415465, 90.0, 0.0],
                ],
            )
        )

    def test_with_sym_c1_method_S(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "c1", "S")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "c1", "S")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 6, 0, 9, 0, 0, 0, 6]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [103.10941180192563, 8.364875267861896, 0.0],
                    [176.21450628042055, 11.840273881876096, 0.0],
                    [236.0656730373198, 14.514303081558177, 0.0],
                    [288.0389625819211, 16.774744264095403, 0.0],
                    [334.65212472788477, 18.771666189212812, 0.0],
                    [17.32066588103538, 20.581969211500514, 0.0],
                    [56.93303390011404, 22.251299640054558, 0.0],
                    [94.08979640709249, 23.809376225696244, 0.0],
                    [129.2192457664335, 25.27682691656447, 0.0],
                    [162.63945091780187, 26.668660597354688, 0.0],
                    [194.5942533593051, 27.996200493836653, 0.0],
                    [225.27544022149684, 29.268238325258856, 0.0],
                    [254.83707261705493, 30.49176175779049, 0.0],
                    [283.40511428823197, 31.672433426416607, 0.0],
                    [311.0841165757072, 32.81491794601815, 0.0],
                    [337.96198959682874, 33.92311200325921, 0.0],
                    [4.1134892483376575, 35.00031047544478, 0.0],
                    [29.60281804202976, 36.04932905362067, 0.0],
                    [54.48560148491377, 37.072596525218906, 0.0],
                    [78.81041245173176, 38.07222541364264, 0.0],
                    [102.61996477563827, 39.050066871297375, 0.0],
                    [125.95205935497097, 40.007753913485175, 0.0],
                    [148.84034277218166, 40.94673588313957, 0.0],
                    [171.31492190766434, 41.8683062262928, 0.0],
                    [193.40286659732473, 42.77362509927865, 0.0],
                    [215.12862428281286, 43.663737936199425, 0.0],
                    [236.5143647768975, 44.53959082510704, 0.0],
                    [257.5802690164162, 45.402043338524194, 0.0],
                    [278.3447725350669, 46.2518793150683, 0.0],
                    [298.8247720406049, 47.08981597832405, 0.0],
                    [319.03580170651145, 47.916511695972396, 0.0],
                    [338.99218443330994, 48.732572619036205, 0.0],
                    [358.7071622904154, 49.538558392667, 0.0],
                    [18.19300963741847, 50.33498709240685, 0.0],
                    [37.46113108715198, 51.1223395105916, 0.0],
                    [56.522148070016584, 51.901062894532814, 0.0],
                    [75.38597385890661, 52.67157421985833, 0.0],
                    [94.06188009352373, 53.43426306781659, 0.0],
                    [112.55855548442202, 54.18949416363721, 0.0],
                    [130.8841578675008, 54.93760962356959, 0.0],
                    [149.04636050865906, 55.67893095051762, 0.0],
                    [167.05239341807666, 56.413760811888345, 0.0],
                    [184.90908031797213, 57.142384628092266, 0.0],
                    [202.62287181191573, 57.865071995851814, 0.0],
                    [220.19987522407473, 58.58207796692143, 0.0],
                    [237.64588151014897, 59.29364419985824, 0.0],
                    [254.96638958583773, 60.00000000000001, 0.0],
                    [272.16662837155565, 60.70136326071934, 0.0],
                    [289.2515768122522, 61.39794131726056, 0.0],
                    [306.22598209734565, 62.08993172297126, 0.0],
                    [323.0943762769458, 62.7775229564712, 0.0],
                    [339.8610914458917, 63.46089506721575, 0.0],
                    [356.53027364599154, 64.14022026598406, 0.0],
                    [13.105895718668648, 64.81566346602408, 0.0],
                    [29.59176862453008, 65.48738277990002, 0.0],
                    [45.99155283280313, 66.15552997649502, 0.0],
                    [62.30876787180928, 66.82025090210684, 0.0],
                    [78.54680162140626, 67.48168586912871, 0.0],
                    [94.7089188193986, 68.13997001541874, 0.0],
                    [110.79826894611286, 68.79523363712073, 0.0],
                    [126.81789354449648, 69.44760249740412, 0.0],
                    [142.77073302709655, 70.0971981133283, 0.0],
                    [158.65963301599265, 70.74413802280935, 0.0],
                    [174.4873502571022, 71.3885360334643, 0.0],
                    [190.25655814616263, 72.03050245493117, 0.0],
                    [205.9698519000554, 72.67014431610464, 0.0],
                    [221.62975340390906, 73.30756556858914, 0.0],
                    [237.23871576155324, 73.94286727754617, 0.0],
                    [252.79912757434613, 74.57614780100388, 0.0],
                    [268.3133169711282, 75.2075029585985, 0.0],
                    [283.78355541002907, 75.83702619063038, 0.0],
                    [299.2120612710465, 76.46480870823927, 0.0],
                    [314.6010032566984, 77.09093963543441, 0.0],
                    [329.9525036166027, 77.71550614365214, 0.0],
                    [345.2686412105413, 78.33859357945896, 0.0],
                    [0.5514545234039474, 78.96028558596703, 0.0],
                    [15.802944044363288, 79.5806642184851, 0.0],
                    [31.02507552169874, 80.19981005488745, 0.0],
                    [46.21978210384517, 80.81780230114738, 0.0],
                    [61.38896687649088, 81.43471889244924, 0.0],
                    [76.53450520487294, 82.05063659026474, 0.0],
                    [91.65824698981302, 82.66563107575222, 0.0],
                    [106.76201884549539, 83.27977703981496, 0.0],
                    [121.84762620650507, 83.89314827013408, 0.0],
                    [136.91685537121364, 84.50581773547201, 0.0],
                    [151.97147548821775, 85.11785766752689, 0.0],
                    [167.01324049219787, 85.72933964060351, 0.0],
                    [182.0438909952684, 86.34033464935307, 0.0],
                    [197.06515613963234, 86.95091318482322, 0.0],
                    [212.07875541713094, 87.56114530905013, 0.0],
                    [227.08640046109076, 88.17110072841555, 0.0],
                    [242.0897968157137, 88.78084886598522, 0.0],
                    [257.09064568812886, 89.39045893303924, 0.0],
                ],
            )
        )

    def test_with_sym_oct_method_S(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "oct", "S")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "oct", "S")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 0, 0, 1, 0, 0, 0, 0]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [18.060151356949547, 32.700469931476135, 0.0],
                    [42.45792646077342, 37.9381274271855, 0.0],
                ],
            )
        )

    def test_with_sym_invalid_method_S_returns_IndexError(self):
        sp_global_def.BATCH = False
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_occupancy(self.params, self.angstep, "invalid", "S")
        sp_global_def.BATCH = False
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_occupancy(self.params, self.angstep, "invalid", "S")
        self.assertEqual(
            str(cm_new.exception), "index 0 is out of bounds for axis 1 with size 0"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c5_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "c5", "P")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "c5", "P")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 1, 0, 2, 0, 0, 1, 1]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 15.0, 0.0],
                    [57.9555495773441, 15.0, 0.0],
                    [0.0, 30.0, 0.0],
                    [30.000000000000004, 30.0, 0.0],
                    [60.00000000000001, 30.0, 0.0],
                    [0.0, 45.0, 0.0],
                    [21.213203435596427, 45.0, 0.0],
                    [42.42640687119285, 45.0, 0.0],
                    [63.63961030678928, 45.0, 0.0],
                    [0.0, 60.0, 0.0],
                    [17.320508075688775, 60.0, 0.0],
                    [34.64101615137755, 60.0, 0.0],
                    [51.96152422706632, 60.0, 0.0],
                    [69.2820323027551, 60.0, 0.0],
                    [0.0, 75.0, 0.0],
                    [15.529142706151246, 75.0, 0.0],
                    [31.058285412302492, 75.0, 0.0],
                    [46.58742811845374, 75.0, 0.0],
                    [62.116570824604985, 75.0, 0.0],
                    [0.0, 90.0, 0.0],
                    [15.0, 90.0, 0.0],
                    [30.0, 90.0, 0.0],
                    [45.0, 90.0, 0.0],
                    [60.0, 90.0, 0.0],
                ],
            )
        )

    def test_with_sym_c1_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "c1", "P")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "c1", "P")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 1, 0, 3, 0, 0, 1, 1]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 15.0, 0.0],
                    [57.9555495773441, 15.0, 0.0],
                    [115.9110991546882, 15.0, 0.0],
                    [173.8666487320323, 15.0, 0.0],
                    [231.8221983093764, 15.0, 0.0],
                    [289.7777478867205, 15.0, 0.0],
                    [347.73329746406455, 15.0, 0.0],
                    [0.0, 30.0, 0.0],
                    [30.000000000000004, 30.0, 0.0],
                    [60.00000000000001, 30.0, 0.0],
                    [90.00000000000001, 30.0, 0.0],
                    [120.00000000000001, 30.0, 0.0],
                    [150.00000000000003, 30.0, 0.0],
                    [180.00000000000003, 30.0, 0.0],
                    [210.00000000000003, 30.0, 0.0],
                    [240.00000000000003, 30.0, 0.0],
                    [270.00000000000006, 30.0, 0.0],
                    [300.00000000000006, 30.0, 0.0],
                    [330.00000000000006, 30.0, 0.0],
                    [0.0, 45.0, 0.0],
                    [21.213203435596427, 45.0, 0.0],
                    [42.42640687119285, 45.0, 0.0],
                    [63.63961030678928, 45.0, 0.0],
                    [84.8528137423857, 45.0, 0.0],
                    [106.06601717798213, 45.0, 0.0],
                    [127.27922061357856, 45.0, 0.0],
                    [148.49242404917499, 45.0, 0.0],
                    [169.7056274847714, 45.0, 0.0],
                    [190.91883092036784, 45.0, 0.0],
                    [212.13203435596427, 45.0, 0.0],
                    [233.3452377915607, 45.0, 0.0],
                    [254.55844122715712, 45.0, 0.0],
                    [275.77164466275354, 45.0, 0.0],
                    [296.98484809834997, 45.0, 0.0],
                    [318.1980515339464, 45.0, 0.0],
                    [339.4112549695428, 45.0, 0.0],
                    [0.0, 60.0, 0.0],
                    [17.320508075688775, 60.0, 0.0],
                    [34.64101615137755, 60.0, 0.0],
                    [51.96152422706632, 60.0, 0.0],
                    [69.2820323027551, 60.0, 0.0],
                    [86.60254037844388, 60.0, 0.0],
                    [103.92304845413265, 60.0, 0.0],
                    [121.24355652982143, 60.0, 0.0],
                    [138.5640646055102, 60.0, 0.0],
                    [155.88457268119896, 60.0, 0.0],
                    [173.20508075688772, 60.0, 0.0],
                    [190.5255888325765, 60.0, 0.0],
                    [207.84609690826525, 60.0, 0.0],
                    [225.16660498395402, 60.0, 0.0],
                    [242.48711305964278, 60.0, 0.0],
                    [259.80762113533154, 60.0, 0.0],
                    [277.12812921102034, 60.0, 0.0],
                    [294.44863728670913, 60.0, 0.0],
                    [311.7691453623979, 60.0, 0.0],
                    [329.0896534380867, 60.0, 0.0],
                    [346.4101615137755, 60.0, 0.0],
                    [0.0, 75.0, 0.0],
                    [15.529142706151246, 75.0, 0.0],
                    [31.058285412302492, 75.0, 0.0],
                    [46.58742811845374, 75.0, 0.0],
                    [62.116570824604985, 75.0, 0.0],
                    [77.64571353075623, 75.0, 0.0],
                    [93.17485623690747, 75.0, 0.0],
                    [108.70399894305872, 75.0, 0.0],
                    [124.23314164920997, 75.0, 0.0],
                    [139.7622843553612, 75.0, 0.0],
                    [155.29142706151245, 75.0, 0.0],
                    [170.8205697676637, 75.0, 0.0],
                    [186.34971247381495, 75.0, 0.0],
                    [201.8788551799662, 75.0, 0.0],
                    [217.40799788611744, 75.0, 0.0],
                    [232.9371405922687, 75.0, 0.0],
                    [248.46628329841994, 75.0, 0.0],
                    [263.9954260045712, 75.0, 0.0],
                    [279.5245687107224, 75.0, 0.0],
                    [295.0537114168736, 75.0, 0.0],
                    [310.58285412302484, 75.0, 0.0],
                    [326.11199682917606, 75.0, 0.0],
                    [341.6411395353273, 75.0, 0.0],
                    [357.1702822414785, 75.0, 0.0],
                    [0.0, 90.0, 0.0],
                    [15.0, 90.0, 0.0],
                    [30.0, 90.0, 0.0],
                    [45.0, 90.0, 0.0],
                    [60.0, 90.0, 0.0],
                    [75.0, 90.0, 0.0],
                    [90.0, 90.0, 0.0],
                    [105.0, 90.0, 0.0],
                    [120.0, 90.0, 0.0],
                    [135.0, 90.0, 0.0],
                    [150.0, 90.0, 0.0],
                    [165.0, 90.0, 0.0],
                    [180.0, 90.0, 0.0],
                    [195.0, 90.0, 0.0],
                    [210.0, 90.0, 0.0],
                    [225.0, 90.0, 0.0],
                    [240.0, 90.0, 0.0],
                    [255.0, 90.0, 0.0],
                    [270.0, 90.0, 0.0],
                    [285.0, 90.0, 0.0],
                    [300.0, 90.0, 0.0],
                    [315.0, 90.0, 0.0],
                    [330.0, 90.0, 0.0],
                    [345.0, 90.0, 0.0],
                ],
            )
        )

    def test_with_sym_oct_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "oct", "P")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "oct", "P")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 1, 0, 1, 0, 0, 1, 1]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 15.0, 0.0],
                    [0.0, 30.0, 0.0],
                    [30.000000000000004, 30.0, 0.0],
                    [0.0, 45.0, 0.0],
                    [21.213203435596427, 45.0, 0.0],
                    [42.42640687119285, 45.0, 0.0],
                ],
            )
        )

    def test_with_sym_c5_method_invalid(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, "c5", "invalid")
        return_old = oldfu.angular_occupancy(self.params, self.angstep, "c5", "invalid")
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0].flatten(), [0, 0, 0, 1, 0, 0, 0, 1]))
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [45.63832975533989, 19.18813645372093, 0.0],
                    [6.3806392352448285, 27.266044450732828, 0.0],
                    [33.51666024724356, 33.55730976192071, 0.0],
                    [57.38151411228954, 38.94244126898138, 0.0],
                    [7.068436092656995, 43.7617426926798, 0.0],
                    [27.193047890155107, 48.1896851042214, 0.0],
                    [46.143332861432214, 52.33011303567037, 0.0],
                    [64.18346669052086, 56.251011404111416, 0.0],
                    [9.503974866209632, 60.00000000000001, 0.0],
                    [26.248664035752775, 63.612200038757, 0.0],
                    [42.53027664295201, 67.11461952384143, 0.0],
                    [58.44017921964933, 70.52877936550931, 0.0],
                    [2.054682482737803, 73.87237978683925, 0.0],
                    [17.439360304788927, 77.16041159309584, 0.0],
                    [32.65213688990222, 80.40593177313954, 0.0],
                    [47.745595738025806, 83.62062979155719, 0.0],
                    [62.76879760804155, 86.8152614632796, 0.0],
                    [5.7687977080415465, 90.0, 0.0],
                ],
            )
        )

    def test_with_empty_params_list_returns_indexError(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_occupancy([], self.angstep, "c5", "S")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_occupancy([], self.angstep, "c5", "S")
        self.assertEqual(
            str(cm_new.exception), "index 1 is out of bounds for axis 1 with size 0"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_null_angstep_returns_ZeroDivisionError_error_msg(self):
        sp_global_def.BATCH = False
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.angular_occupancy(self.params, 0, "c5", "S")
        sp_global_def.BATCH = False
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.angular_occupancy(self.params, 0, "c5", "S")

        self.assertEqual(str(cm_new.exception), 'float division by zero')
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


# I did not changged the inc_mirror because it is only called to 'angular_occupancy'. I'll change it there
class Test_angular_histogram(unittest.TestCase):
    params = [
        [12, 1, 32],
        [12, 11, 2],
        [2, 1, 32],
        [121, 19, 32],
        [1.2, 1, 3.2],
        [102, 1, 32],
        [12, 10, 32],
        [9, 16, 32],
    ]
    angstep = 15

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angular_histogram()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angular_histogram()
        self.assertEqual(
            str(cm_new.exception),
            "angular_histogram() missing 1 required positional argument: 'params'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_less_angles_returns_IndexError_list_index_out_of_range(self):
        angles = [[0.1], [21.1], [30.11], [1.1]]
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_histogram(
                params=angles, angstep=self.angstep, sym="c1", method="S", inc_mirror=0
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_histogram(
                params=angles, angstep=self.angstep, sym="c1", method="S", inc_mirror=0
            )
        self.assertEqual(
            str(cm_new.exception), "index 1 is out of bounds for axis 1 with size 1"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c5_method_S(self):
        return_new = fu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="S",
            inc_mirror=0,
        )
        return_old = oldfu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="S",
            inc_mirror=0,
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(
            array_equal(
                return_new[0], [6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            )
        )
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [45.63832975533989, 19.18813645372093, 0.0],
                    [6.3806392352448285, 27.266044450732828, 0.0],
                    [33.51666024724356, 33.55730976192071, 0.0],
                    [57.38151411228954, 38.94244126898138, 0.0],
                    [7.068436092656995, 43.7617426926798, 0.0],
                    [27.193047890155107, 48.1896851042214, 0.0],
                    [46.143332861432214, 52.33011303567037, 0.0],
                    [64.18346669052086, 56.251011404111416, 0.0],
                    [9.503974866209632, 60.00000000000001, 0.0],
                    [26.248664035752775, 63.612200038757, 0.0],
                    [42.53027664295201, 67.11461952384143, 0.0],
                    [58.44017921964933, 70.52877936550931, 0.0],
                    [2.054682482737803, 73.87237978683925, 0.0],
                    [17.439360304788927, 77.16041159309584, 0.0],
                    [32.65213688990222, 80.40593177313954, 0.0],
                    [47.745595738025806, 83.62062979155719, 0.0],
                    [62.76879760804155, 86.8152614632796, 0.0],
                    [5.7687977080415465, 90.0, 0.0],
                ],
            )
        )

    def test_with_sym_c1_method_S(self):
        return_new = fu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c1",
            method="S",
            inc_mirror=0,
        )
        return_old = oldfu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c1",
            method="S",
            inc_mirror=0,
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(
            array_equal(
                return_new[0],
                [
                    5,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
            )
        )
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [103.10941180192563, 8.364875267861896, 0.0],
                    [176.21450628042055, 11.840273881876096, 0.0],
                    [236.0656730373198, 14.514303081558177, 0.0],
                    [288.0389625819211, 16.774744264095403, 0.0],
                    [334.65212472788477, 18.771666189212812, 0.0],
                    [17.32066588103538, 20.581969211500514, 0.0],
                    [56.93303390011404, 22.251299640054558, 0.0],
                    [94.08979640709249, 23.809376225696244, 0.0],
                    [129.2192457664335, 25.27682691656447, 0.0],
                    [162.63945091780187, 26.668660597354688, 0.0],
                    [194.5942533593051, 27.996200493836653, 0.0],
                    [225.27544022149684, 29.268238325258856, 0.0],
                    [254.83707261705493, 30.49176175779049, 0.0],
                    [283.40511428823197, 31.672433426416607, 0.0],
                    [311.0841165757072, 32.81491794601815, 0.0],
                    [337.96198959682874, 33.92311200325921, 0.0],
                    [4.1134892483376575, 35.00031047544478, 0.0],
                    [29.60281804202976, 36.04932905362067, 0.0],
                    [54.48560148491377, 37.072596525218906, 0.0],
                    [78.81041245173176, 38.07222541364264, 0.0],
                    [102.61996477563827, 39.050066871297375, 0.0],
                    [125.95205935497097, 40.007753913485175, 0.0],
                    [148.84034277218166, 40.94673588313957, 0.0],
                    [171.31492190766434, 41.8683062262928, 0.0],
                    [193.40286659732473, 42.77362509927865, 0.0],
                    [215.12862428281286, 43.663737936199425, 0.0],
                    [236.5143647768975, 44.53959082510704, 0.0],
                    [257.5802690164162, 45.402043338524194, 0.0],
                    [278.3447725350669, 46.2518793150683, 0.0],
                    [298.8247720406049, 47.08981597832405, 0.0],
                    [319.03580170651145, 47.916511695972396, 0.0],
                    [338.99218443330994, 48.732572619036205, 0.0],
                    [358.7071622904154, 49.538558392667, 0.0],
                    [18.19300963741847, 50.33498709240685, 0.0],
                    [37.46113108715198, 51.1223395105916, 0.0],
                    [56.522148070016584, 51.901062894532814, 0.0],
                    [75.38597385890661, 52.67157421985833, 0.0],
                    [94.06188009352373, 53.43426306781659, 0.0],
                    [112.55855548442202, 54.18949416363721, 0.0],
                    [130.8841578675008, 54.93760962356959, 0.0],
                    [149.04636050865906, 55.67893095051762, 0.0],
                    [167.05239341807666, 56.413760811888345, 0.0],
                    [184.90908031797213, 57.142384628092266, 0.0],
                    [202.62287181191573, 57.865071995851814, 0.0],
                    [220.19987522407473, 58.58207796692143, 0.0],
                    [237.64588151014897, 59.29364419985824, 0.0],
                    [254.96638958583773, 60.00000000000001, 0.0],
                    [272.16662837155565, 60.70136326071934, 0.0],
                    [289.2515768122522, 61.39794131726056, 0.0],
                    [306.22598209734565, 62.08993172297126, 0.0],
                    [323.0943762769458, 62.7775229564712, 0.0],
                    [339.8610914458917, 63.46089506721575, 0.0],
                    [356.53027364599154, 64.14022026598406, 0.0],
                    [13.105895718668648, 64.81566346602408, 0.0],
                    [29.59176862453008, 65.48738277990002, 0.0],
                    [45.99155283280313, 66.15552997649502, 0.0],
                    [62.30876787180928, 66.82025090210684, 0.0],
                    [78.54680162140626, 67.48168586912871, 0.0],
                    [94.7089188193986, 68.13997001541874, 0.0],
                    [110.79826894611286, 68.79523363712073, 0.0],
                    [126.81789354449648, 69.44760249740412, 0.0],
                    [142.77073302709655, 70.0971981133283, 0.0],
                    [158.65963301599265, 70.74413802280935, 0.0],
                    [174.4873502571022, 71.3885360334643, 0.0],
                    [190.25655814616263, 72.03050245493117, 0.0],
                    [205.9698519000554, 72.67014431610464, 0.0],
                    [221.62975340390906, 73.30756556858914, 0.0],
                    [237.23871576155324, 73.94286727754617, 0.0],
                    [252.79912757434613, 74.57614780100388, 0.0],
                    [268.3133169711282, 75.2075029585985, 0.0],
                    [283.78355541002907, 75.83702619063038, 0.0],
                    [299.2120612710465, 76.46480870823927, 0.0],
                    [314.6010032566984, 77.09093963543441, 0.0],
                    [329.9525036166027, 77.71550614365214, 0.0],
                    [345.2686412105413, 78.33859357945896, 0.0],
                    [0.5514545234039474, 78.96028558596703, 0.0],
                    [15.802944044363288, 79.5806642184851, 0.0],
                    [31.02507552169874, 80.19981005488745, 0.0],
                    [46.21978210384517, 80.81780230114738, 0.0],
                    [61.38896687649088, 81.43471889244924, 0.0],
                    [76.53450520487294, 82.05063659026474, 0.0],
                    [91.65824698981302, 82.66563107575222, 0.0],
                    [106.76201884549539, 83.27977703981496, 0.0],
                    [121.84762620650507, 83.89314827013408, 0.0],
                    [136.91685537121364, 84.50581773547201, 0.0],
                    [151.97147548821775, 85.11785766752689, 0.0],
                    [167.01324049219787, 85.72933964060351, 0.0],
                    [182.0438909952684, 86.34033464935307, 0.0],
                    [197.06515613963234, 86.95091318482322, 0.0],
                    [212.07875541713094, 87.56114530905013, 0.0],
                    [227.08640046109076, 88.17110072841555, 0.0],
                    [242.0897968157137, 88.78084886598522, 0.0],
                    [257.09064568812886, 89.39045893303924, 0.0],
                ],
            )
        )

    @unittest.skip("BUG in sp_fundamentals.py -->symmetry_neighbors --> local variable 'neighbors' referenced before assignment")
    def test_with_sym_oct_method_S(self):
        return_new = fu.angular_histogram(params=deepcopy(self.params),angstep= self.angstep, sym='oct1', method="S", inc_mirror=0)
        return_old = oldfu.fu.angular_histogram(params=deepcopy(self.params),angstep= self.angstep, sym='oct1', method="S", inc_mirror=0)
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [1215, 4645, 560]))
        self.assertTrue(array_equal(return_new[1], [[0.0, 0.0, 0.0], [18.060151356949547, 32.700469931476135, 0.0], [42.457926460773422, 37.938127427185499, 0.0]]))

    def test_with_sym_invalid_method_S_returns_IndexError(self):
        sp_global_def.BATCH=False
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_histogram(
                params=self.params,
                angstep=self.angstep,
                sym="invalid",
                method="S",
                inc_mirror=0,
            )
        sp_global_def.BATCH = False
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_histogram(
                params=self.params,
                angstep=self.angstep,
                sym="invalid",
                method="S",
                inc_mirror=0,
            )
        self.assertEqual(str(cm_new.exception), "index 0 is out of bounds for axis 1 with size 0")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c5_method_P(self):
        return_new = fu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="P",
            inc_mirror=0,
        )
        return_old = oldfu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="P",
            inc_mirror=0,
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(
            array_equal(
                return_new[0],
                [
                    4,
                    3,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
            )
        )
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 15.0, 0.0],
                    [57.9555495773441, 15.0, 0.0],
                    [0.0, 30.0, 0.0],
                    [30.000000000000004, 30.0, 0.0],
                    [60.00000000000001, 30.0, 0.0],
                    [0.0, 45.0, 0.0],
                    [21.213203435596427, 45.0, 0.0],
                    [42.42640687119285, 45.0, 0.0],
                    [63.63961030678928, 45.0, 0.0],
                    [0.0, 60.0, 0.0],
                    [17.320508075688775, 60.0, 0.0],
                    [34.64101615137755, 60.0, 0.0],
                    [51.96152422706632, 60.0, 0.0],
                    [69.2820323027551, 60.0, 0.0],
                    [0.0, 75.0, 0.0],
                    [15.529142706151246, 75.0, 0.0],
                    [31.058285412302492, 75.0, 0.0],
                    [46.58742811845374, 75.0, 0.0],
                    [62.116570824604985, 75.0, 0.0],
                    [0.0, 90.0, 0.0],
                    [15.0, 90.0, 0.0],
                    [30.0, 90.0, 0.0],
                    [45.0, 90.0, 0.0],
                    [60.0, 90.0, 0.0],
                ],
            )
        )

    def test_with_sym_c1_method_P(self):
        return_new = fu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c1",
            method="P",
            inc_mirror=0,
        )
        return_old = oldfu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c1",
            method="P",
            inc_mirror=0,
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(
            array_equal(
                return_new[0],
                [
                    4,
                    3,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
            )
        )
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 15.0, 0.0],
                    [57.9555495773441, 15.0, 0.0],
                    [115.9110991546882, 15.0, 0.0],
                    [173.8666487320323, 15.0, 0.0],
                    [231.8221983093764, 15.0, 0.0],
                    [289.7777478867205, 15.0, 0.0],
                    [347.73329746406455, 15.0, 0.0],
                    [0.0, 30.0, 0.0],
                    [30.000000000000004, 30.0, 0.0],
                    [60.00000000000001, 30.0, 0.0],
                    [90.00000000000001, 30.0, 0.0],
                    [120.00000000000001, 30.0, 0.0],
                    [150.00000000000003, 30.0, 0.0],
                    [180.00000000000003, 30.0, 0.0],
                    [210.00000000000003, 30.0, 0.0],
                    [240.00000000000003, 30.0, 0.0],
                    [270.00000000000006, 30.0, 0.0],
                    [300.00000000000006, 30.0, 0.0],
                    [330.00000000000006, 30.0, 0.0],
                    [0.0, 45.0, 0.0],
                    [21.213203435596427, 45.0, 0.0],
                    [42.42640687119285, 45.0, 0.0],
                    [63.63961030678928, 45.0, 0.0],
                    [84.8528137423857, 45.0, 0.0],
                    [106.06601717798213, 45.0, 0.0],
                    [127.27922061357856, 45.0, 0.0],
                    [148.49242404917499, 45.0, 0.0],
                    [169.7056274847714, 45.0, 0.0],
                    [190.91883092036784, 45.0, 0.0],
                    [212.13203435596427, 45.0, 0.0],
                    [233.3452377915607, 45.0, 0.0],
                    [254.55844122715712, 45.0, 0.0],
                    [275.77164466275354, 45.0, 0.0],
                    [296.98484809834997, 45.0, 0.0],
                    [318.1980515339464, 45.0, 0.0],
                    [339.4112549695428, 45.0, 0.0],
                    [0.0, 60.0, 0.0],
                    [17.320508075688775, 60.0, 0.0],
                    [34.64101615137755, 60.0, 0.0],
                    [51.96152422706632, 60.0, 0.0],
                    [69.2820323027551, 60.0, 0.0],
                    [86.60254037844388, 60.0, 0.0],
                    [103.92304845413265, 60.0, 0.0],
                    [121.24355652982143, 60.0, 0.0],
                    [138.5640646055102, 60.0, 0.0],
                    [155.88457268119896, 60.0, 0.0],
                    [173.20508075688772, 60.0, 0.0],
                    [190.5255888325765, 60.0, 0.0],
                    [207.84609690826525, 60.0, 0.0],
                    [225.16660498395402, 60.0, 0.0],
                    [242.48711305964278, 60.0, 0.0],
                    [259.80762113533154, 60.0, 0.0],
                    [277.12812921102034, 60.0, 0.0],
                    [294.44863728670913, 60.0, 0.0],
                    [311.7691453623979, 60.0, 0.0],
                    [329.0896534380867, 60.0, 0.0],
                    [346.4101615137755, 60.0, 0.0],
                    [0.0, 75.0, 0.0],
                    [15.529142706151246, 75.0, 0.0],
                    [31.058285412302492, 75.0, 0.0],
                    [46.58742811845374, 75.0, 0.0],
                    [62.116570824604985, 75.0, 0.0],
                    [77.64571353075623, 75.0, 0.0],
                    [93.17485623690747, 75.0, 0.0],
                    [108.70399894305872, 75.0, 0.0],
                    [124.23314164920997, 75.0, 0.0],
                    [139.7622843553612, 75.0, 0.0],
                    [155.29142706151245, 75.0, 0.0],
                    [170.8205697676637, 75.0, 0.0],
                    [186.34971247381495, 75.0, 0.0],
                    [201.8788551799662, 75.0, 0.0],
                    [217.40799788611744, 75.0, 0.0],
                    [232.9371405922687, 75.0, 0.0],
                    [248.46628329841994, 75.0, 0.0],
                    [263.9954260045712, 75.0, 0.0],
                    [279.5245687107224, 75.0, 0.0],
                    [295.0537114168736, 75.0, 0.0],
                    [310.58285412302484, 75.0, 0.0],
                    [326.11199682917606, 75.0, 0.0],
                    [341.6411395353273, 75.0, 0.0],
                    [357.1702822414785, 75.0, 0.0],
                    [0.0, 90.0, 0.0],
                    [15.0, 90.0, 0.0],
                    [30.0, 90.0, 0.0],
                    [45.0, 90.0, 0.0],
                    [60.0, 90.0, 0.0],
                    [75.0, 90.0, 0.0],
                    [90.0, 90.0, 0.0],
                    [105.0, 90.0, 0.0],
                    [120.0, 90.0, 0.0],
                    [135.0, 90.0, 0.0],
                    [150.0, 90.0, 0.0],
                    [165.0, 90.0, 0.0],
                    [180.0, 90.0, 0.0],
                    [195.0, 90.0, 0.0],
                    [210.0, 90.0, 0.0],
                    [225.0, 90.0, 0.0],
                    [240.0, 90.0, 0.0],
                    [255.0, 90.0, 0.0],
                    [270.0, 90.0, 0.0],
                    [285.0, 90.0, 0.0],
                    [300.0, 90.0, 0.0],
                    [315.0, 90.0, 0.0],
                    [330.0, 90.0, 0.0],
                    [345.0, 90.0, 0.0],
                ],
            )
        )

    @unittest.skip("BUG in sp_fundamentals.py -->symmetry_neighbors --> local variable 'neighbors' referenced before assignment")
    def test_with_sym_oct_method_P(self):
        return_new = fu.angular_histogram(params=deepcopy(self.params), angstep=self.angstep, sym='oct1', method="P", inc_mirror=0)
        return_old = oldfu.angular_histogram(params=deepcopy(self.params), angstep=self.angstep, sym='oct1', method="P", inc_mirror=0)
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [7, 2700, 296, 3068, 41, 206, 102]))
        self.assertTrue(array_equal(return_new[1], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0]]))

    def test_with_sym_c5_method_invalid(self):
        return_new = fu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="invalid",
            inc_mirror=0,
        )
        return_old = oldfu.angular_histogram(
            params=deepcopy(self.params),
            angstep=self.angstep,
            sym="c5",
            method="invalid",
            inc_mirror=0,
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(
            array_equal(
                return_new[0], [6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            )
        )
        self.assertTrue(
            array_equal(
                return_new[1],
                [
                    [0.0, 0.0, 0.0],
                    [45.63832975533989, 19.18813645372093, 0.0],
                    [6.3806392352448285, 27.266044450732828, 0.0],
                    [33.51666024724356, 33.55730976192071, 0.0],
                    [57.38151411228954, 38.94244126898138, 0.0],
                    [7.068436092656995, 43.7617426926798, 0.0],
                    [27.193047890155107, 48.1896851042214, 0.0],
                    [46.143332861432214, 52.33011303567037, 0.0],
                    [64.18346669052086, 56.251011404111416, 0.0],
                    [9.503974866209632, 60.00000000000001, 0.0],
                    [26.248664035752775, 63.612200038757, 0.0],
                    [42.53027664295201, 67.11461952384143, 0.0],
                    [58.44017921964933, 70.52877936550931, 0.0],
                    [2.054682482737803, 73.87237978683925, 0.0],
                    [17.439360304788927, 77.16041159309584, 0.0],
                    [32.65213688990222, 80.40593177313954, 0.0],
                    [47.745595738025806, 83.62062979155719, 0.0],
                    [62.76879760804155, 86.8152614632796, 0.0],
                    [5.7687977080415465, 90.0, 0.0],
                ],
            )
        )

    def test_with_empty_params_list_returns_IndexError(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_histogram(
                params=[], angstep=self.angstep, sym="c5", method="S", inc_mirror=0
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_histogram(
                params=[], angstep=self.angstep, sym="c5", method="S", inc_mirror=0
            )
        self.assertEqual(
            str(cm_new.exception), "index 1 is out of bounds for axis 1 with size 0"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_null_angstep_returns_ZeroDivisionError_error_msg(self):
        sp_global_def.BATCH = False
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.angular_histogram(
                params=deepcopy(self.params),
                angstep=0,
                sym="c5",
                method="S",
                inc_mirror=0,
            )
        sp_global_def.BATCH=False
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.angular_histogram(
                params=deepcopy(self.params),
                angstep=0,
                sym="c5",
                method="S",
                inc_mirror=0,
            )
        self.assertEqual(str(cm_new.exception), 'float division by zero')
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_balance_angular_distribution(unittest.TestCase):
    params = [
        [12, 1, 32],
        [12, 11, 2],
        [2, 1, 32],
        [121, 19, 32],
        [1.2, 1, 3.2],
        [102, 1, 32],
        [12, 10, 32],
        [9, 16, 32],
    ]
    angstep = 15

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.balance_angular_distribution()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.balance_angular_distribution()
        self.assertEqual(
            str(cm_new.exception),
            "balance_angular_distribution() missing 1 required positional argument: 'params'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c5_not_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(
            params=self.params, max_occupy=-1, angstep=self.angstep, sym="c5"
        )
        return_old = oldfu.balance_angular_distribution(
            params=self.params, max_occupy=-1, angstep=self.angstep, sym="c5"
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new.flatten(), [0, 0, 0, 1, 0, 0, 0, 1]))

    @unittest.skip("Because the matplotlib.numpy.random.shuffle command is called the compatibility test fails")
    def test_with_sym_c5_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(params=self.params, max_occupy = 3, angstep = self.angstep, sym= 'c5')
        return_old=     oldfu.balance_angular_distribution(params=self.params, max_occupy = 3, angstep = self.angstep, sym= 'c5')
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [0, 2, 3, 4, 7]))
        self.assertTrue(array_equal(return_new[1].flatten(),[12.0, 1.0, 32.0, 2.0, 1.0, 32.0, 121.0, 19.0, 32.0, 1.2, 1.0, 3.2, 9.0, 16.0, 32.0]))

    def test_with_sym_c1_not_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="c1"
        )
        return_old = oldfu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="c1"
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new.flatten(), [0, 6, 0, 9, 0, 0, 0, 6]))

    def test_with_sym_c1_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="c1"
        )
        return_old = oldfu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="c1"
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [0]))
        self.assertTrue(array_equal(return_new[1].flatten(), [6]))

    def test_with_sym_oct_not_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="oct"
        )
        return_old = oldfu.balance_angular_distribution(
            self.params, max_occupy=-1, angstep=self.angstep, sym="oct"
        )
        self.assertTrue(array_equal(return_new[0], return_old[0]))
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [0]))
        self.assertTrue(array_equal(return_new[1].flatten(), [0]))

    @unittest.skip("Because the matplotlib.numpy.random.shuffle command is called the compatibility test fails")
    def test_with_sym_oct_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(self.params, max_occupy = 3, angstep = self.angstep, sym= 'oct')
        return_old = oldfu.balance_angular_distribution(self.params, max_occupy = 3, angstep = self.angstep, sym= 'oct')
        self.assertTrue(array_equal(return_new[0], return_old[0]))  #failed
        self.assertTrue(array_equal(return_new[1], return_old[1]))
        self.assertTrue(array_equal(return_new[0], [3, 4, 6, 7]))
        self.assertTrue(array_equal(return_new[1].flatten(), [121.0, 19.0, 32.0, 1.2, 1.0, 3.2, 12.0, 10.0, 32.0, 9.0, 16.0, 32.0]))

    def test_with_empty_list_returns_IndexError(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.balance_angular_distribution(
                [], max_occupy=-1, angstep=self.angstep, sym="c5"
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.balance_angular_distribution(
                [], max_occupy=-1, angstep=self.angstep, sym="c5"
            )
        print(str(cm_new.exception))
        self.assertEqual(str(cm_new.exception), "too many indices for array")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_null_angstepy_ZeroDivisionError_is_raised(self):
        sp_global_def.BATCH = False
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.balance_angular_distribution(
                self.params, max_occupy=-1, angstep=0, sym="c5"
            )
        sp_global_def.BATCH = False
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.balance_angular_distribution(
                self.params, max_occupy=-1, angstep=0, sym="c5"
            )
        self.assertEqual(str(cm_new.exception), 'float division by zero')
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("Because the matplotlib.numpy.random.shuffle command is called the compatibility test fails")
    def test_with_sym_c5_positive_maxOccupy_not_testabel(self):
        return_new = fu.balance_angular_distribution(deepcopy(self.params), max_occupy = 1, angstep = self.angstep, sym= 'c5')
        return_old = oldfu.balance_angular_distribution(deepcopy(self.params), max_occupy = 1, angstep = self.angstep, sym= 'c5')
        self.assertTrue(array_equal(return_new, return_old))


class Test_symmetry_neighbors(unittest.TestCase):
    angles = [
        [0.0, 0.0, 1.0],
        [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
        [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
        [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
        [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
        [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
        [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
        [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
        [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
        [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
        [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
        [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
    ]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.symmetry_neighbors()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.symmetry_neighbors()
        self.assertEqual(
            str(cm_new.exception),
            "symmetry_neighbors() missing 2 required positional arguments: 'angles' and 'symmetry'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    @unittest.skip("skip because segmentation fault")
    def test_with_empty_list_crashes_because_signal11SIGSEV(self):
        return_new = fu.symmetry_neighbors([] , symmetry= "c1")
        return_old = oldfu.symmetry_neighbors([], symmetry= "c1")
        self.assertTrue(array_equal(return_new, return_old))

    def test_with_less_angles_returns_RuntimeError_3_angles_are_required(self):
        angles = [[0.1], [21.1], [30.11], [1.1]]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.symmetry_neighbors(angles=angles, symmetry="c1")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.symmetry_neighbors(angles=angles, symmetry="c1")
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "Three angles are required")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_sym_c1(self):
        return_new = fu.symmetry_neighbors(angles=self.angles, symmetry="c1")
        return_old = oldfu.symmetry_neighbors(angles=self.angles, symmetry="c1")
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [0.0, 0.0, 1.0],
                    [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
                    [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
                    [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
                    [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
                    [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
                    [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
                    [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
                    [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
                    [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
                    [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
                    [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
                ],
            )
        )

    def test_with_sym_c5(self):
        return_new = fu.symmetry_neighbors(angles=self.angles, symmetry="c5")
        return_old = oldfu.symmetry_neighbors(angles=self.angles, symmetry="c5")
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [0.0, 0.0, 1.0],
                    [72.0, 0.0, 1.0],
                    [288.0, 0.0, 1.0],
                    [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
                    [72.680419921875, 0.6526213884353638, 0.3333333432674408],
                    [288.680419921875, 0.6526213884353638, 0.3333333432674408],
                    [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
                    [71.589599609375, 0.8487909436225891, 0.3333333432674408],
                    [287.589599609375, 0.8487909436225891, 0.3333333432674408],
                    [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
                    [71.06591796875, -0.12803982198238373, 0.3333333432674408],
                    [287.06591796875, -0.12803982198238373, 0.3333333432674408],
                    [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
                    [71.8331298828125, -0.927923858165741, 0.3333333432674408],
                    [287.8331298828125, -0.927923858165741, 0.3333333432674408],
                    [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
                    [72.8309326171875, -0.4454488158226013, 0.3333333432674408],
                    [288.8309326171875, -0.4454488158226013, 0.3333333432674408],
                    [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
                    [72.0, 7.64274186065882e-15, -1.0],
                    [288.0, 7.64274186065882e-15, -1.0],
                    [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
                    [72.93408203125, 0.12803970277309418, -0.3333333134651184],
                    [288.93408203125, 0.12803970277309418, -0.3333333134651184],
                    [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
                    [72.1668701171875, 0.927923858165741, -0.3333333134651184],
                    [288.1668701171875, 0.927923858165741, -0.3333333134651184],
                    [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
                    [71.1690673828125, 0.44544869661331177, -0.3333333134651184],
                    [287.1690673828125, 0.44544869661331177, -0.3333333134651184],
                    [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
                    [71.319580078125, -0.652621328830719, -0.3333333134651184],
                    [287.319580078125, -0.652621328830719, -0.3333333134651184],
                    [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
                    [72.410400390625, -0.8487908840179443, -0.3333333134651184],
                    [288.410400390625, -0.8487908840179443, -0.3333333134651184],
                ],
            )
        )

    def test_with_sym_d1(self):
        return_new = fu.symmetry_neighbors(angles=self.angles, symmetry="d1")
        return_old = oldfu.symmetry_neighbors(angles=self.angles, symmetry="d1")
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [0.0, 0.0, 1.0],
                    [0.0, 180.0, 181.0],
                    [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
                    [359.319580078125, 179.34738159179688, 180.3333282470703],
                    [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
                    [0.410430908203125, 179.15121459960938, 180.3333282470703],
                    [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
                    [0.93408203125, 180.12803649902344, 180.3333282470703],
                    [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
                    [0.1668701171875, 180.92791748046875, 180.3333282470703],
                    [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
                    [359.1690673828125, 180.44544982910156, 180.3333282470703],
                    [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
                    [0.0, 180.0, 179.0],
                    [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
                    [359.06591796875, 179.87196350097656, 179.6666717529297],
                    [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
                    [359.8331298828125, 179.07208251953125, 179.6666717529297],
                    [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
                    [0.8309326171875, 179.55455017089844, 179.6666717529297],
                    [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
                    [0.680419921875, 180.65261840820312, 179.6666717529297],
                    [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
                    [359.5895690917969, 180.84878540039062, 179.6666717529297],
                ],
            )
        )

    def test_with_sym_not_c_or_d(self):
        angles = [
            [0.0, 0.0, 1.0],
            [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
        ]
        return_new = fu.symmetry_neighbors(angles=angles, symmetry="invalid")
        return_old = oldfu.symmetry_neighbors(angles=angles, symmetry="invalid")
        self.assertTrue(array_equal(return_new, return_old))


class Test_rotation_between_anglesets(unittest.TestCase):
    """  used the value used in 'Test_assign_projdirs_f' """

    agls1 = [
        [0.0, 0.0, 1.0],
        [0.6804220676422119, 0.6526213884353638, 0.3333333432674408],
        [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408],
        [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408],
        [-0.16687190532684326, -0.927923858165741, 0.3333333432674408],
        [0.8309417366981506, -0.4454488158226013, 0.3333333432674408],
        [8.742277657347586e-08, 7.64274186065882e-15, -1.0],
        [0.9340742230415344, 0.12803970277309418, -0.3333333134651184],
        [0.16687177121639252, 0.927923858165741, -0.3333333134651184],
        [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184],
        [-0.6804221272468567, -0.652621328830719, -0.3333333134651184],
        [0.41041797399520874, -0.8487908840179443, -0.3333333134651184],
    ]
    agls2 = [
        [0.0, 0.0, 0.66],
        [0.44907856464385987, 0.4307301163673401, 0.22000000655651095],
        [-0.27087580382823945, 0.5602020227909088, 0.22000000655651095],
        [-0.6164889872074127, -0.08450628250837326, 0.22000000655651095],
        [-0.11013545751571656, -0.6124297463893891, 0.22000000655651095],
        [0.5484215462207794, -0.2939962184429169, 0.22000000655651095],
        [5.7699032538494066e-08, 5.044209628034821e-15, -0.66],
        [0.6164889872074127, 0.08450620383024215, -0.21999998688697817],
        [0.11013536900281906, 0.6124297463893891, -0.21999998688697817],
        [-0.5484216248989106, 0.2939961397647858, -0.21999998688697817],
        [-0.44907860398292543, -0.43073007702827454, -0.21999998688697817],
        [0.2708758628368378, -0.5602019834518432, -0.21999998688697817],
    ]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotation_between_anglesets()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotation_between_anglesets()
        self.assertEqual(
            str(cm_new.exception),
            "rotation_between_anglesets() missing 2 required positional arguments: 'agls1' and 'agls2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_rotation_between_anglesets(self):
        return_new = fu.rotation_between_anglesets(agls1=self.agls1, agls2=self.agls2)
        return_old = oldfu.rotation_between_anglesets(
            agls1=self.agls1, agls2=self.agls2
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (2.215e-09, 0.0, 0.0)))

    def test_sets_have_different_length(self):
        agls2 = self.agls2[:30]
        return_new = fu.rotation_between_anglesets(agls1=self.agls1, agls2=agls2)
        return_old = oldfu.rotation_between_anglesets(agls1=self.agls1, agls2=agls2)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (2.215e-09, 0.0, 0.0)))

    def test_angls1_empty_list(self):
        sp_global_def.BATCH = False
        return_new = fu.rotation_between_anglesets(agls1=[], agls2=self.agls2)
        sp_global_def.BATCH = False
        return_old = oldfu.rotation_between_anglesets(agls1=[], agls2=self.agls2)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, -1)


    def test_angls2_empty_list_error(self):
        sp_global_def.BATCH = False
        return_new = fu.rotation_between_anglesets(agls1=self.agls1, agls2=[])
        sp_global_def.BATCH = False
        return_old = oldfu.rotation_between_anglesets(agls1=self.agls1, agls2=[])
        self.assertTrue(array_equal(return_new, return_old))
        self.assertEqual(return_new, -1)

class Test_angle_between_projections_directions(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angle_between_projections_directions()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angle_between_projections_directions()
        self.assertEqual(
            str(cm_new.exception),
            "angle_between_projections_directions() missing 2 required positional arguments: 'proj1' and 'proj2'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_3angles(self):
        agls1 = [20, 60, 0]
        agls2 = [45, 75, 5]
        return_new = fu.angle_between_projections_directions(proj1=agls1, proj2=agls2)
        return_old = oldfu.angle_between_projections_directions(
            proj1=agls1, proj2=agls2
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 27.432927773655976)

    def test_with_2angles(self):
        agls1 = [20, 60]
        agls2 = [45, 75]
        return_new = fu.angle_between_projections_directions(proj1=agls1, proj2=agls2)
        return_old = oldfu.angle_between_projections_directions(
            proj1=agls1, proj2=agls2
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 27.432927773655976)

    def test_with_list1_empty(self):
        agls2 = [45, 75]
        with self.assertRaises(IndexError) as cm_new:
            fu.angle_between_projections_directions(proj1=[], proj2=agls2)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angle_between_projections_directions(proj1=[], proj2=agls2)
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_list2_empty(self):
        agls1 = [45, 75]
        with self.assertRaises(IndexError) as cm_new:
            fu.angle_between_projections_directions(proj1=agls1, proj2=[])
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angle_between_projections_directions(proj1=agls1, proj2=[])
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_get_pixel_size(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_pixel_size()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_pixel_size()
        self.assertEqual(
            str(cm_new.exception), "get_pixel_size() missing 1 required positional argument: 'img'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_pixel_size_img2d(self):
        return_new = fu.get_pixel_size(img=IMAGE_2D)
        return_old = oldfu.get_pixel_size(img=IMAGE_2D)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_get_pixel_size_img3d(self):
        return_new = fu.get_pixel_size(img=IMAGE_3D)
        return_old = oldfu.get_pixel_size(img=IMAGE_3D)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_get_pixel_size_imgEmpty(self):
        return_new = fu.get_pixel_size(img=EMData())
        return_old = oldfu.get_pixel_size(img=EMData())
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_pixel_size(img=None)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_pixel_size(img=None)
        self.assertEqual(
            str(cm_new.exception),
            "'NoneType' object has no attribute 'get_attr_default'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_set_pixel_size(unittest.TestCase):

    argum = get_arg_from_pickle_file(
        path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.rotate_3D_shift.pkl")
    )
    (data, notUsed) = argum[0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_pixel_size()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_pixel_size()
        self.assertEqual(
            str(cm_new.exception),
            "set_pixel_size() missing 2 required positional arguments: 'img' and 'pixel_size'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_set_pixel_size(self):
        # img_fu = deepcopy(IMAGE_2D)
        # img_fu_old = deepcopy(IMAGE_2D)

        img_fu = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        img_fu[0].set_attr_dict(self.data[0].get_attr_dict())
        img_fu_old = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        img_fu_old[0].set_attr_dict(self.data[0].get_attr_dict())


        fu.set_pixel_size(img=img_fu[0], pixel_size=2.1)
        oldfu.set_pixel_size(img=img_fu_old[0], pixel_size=2.1)
        self.assertEqual(img_fu[0].get_attr("apix_x"), img_fu_old[0].get_attr("apix_x"))
        self.assertEqual(img_fu[0].get_attr("apix_y"), img_fu_old[0].get_attr("apix_y"))
        self.assertEqual(img_fu[0].get_attr("apix_z"), img_fu_old[0].get_attr("apix_z"))
        self.assertEqual(img_fu[0].get_attr("apix_x"), 2.1)
        self.assertEqual(img_fu[0].get_attr("apix_y"), 2.1)
        self.assertEqual(img_fu[0].get_attr("apix_z"), 2.1)

    def test_set_pixel_size_truncated_value(self):
        img_fu = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        img_fu[0].set_attr_dict(self.data[0].get_attr_dict())
        img_fu_old = [EMNumPy.numpy2em(deepcopy(self.data[0].get_2dview()))]
        img_fu_old[0].set_attr_dict(self.data[0].get_attr_dict())

        fu.set_pixel_size(img=img_fu[0], pixel_size=2.1111)
        oldfu.set_pixel_size(img=img_fu_old[0], pixel_size=2.1111)
        self.assertEqual(img_fu[0].get_attr("apix_x"), img_fu_old[0].get_attr("apix_x"))
        self.assertEqual(img_fu[0].get_attr("apix_y"), img_fu_old[0].get_attr("apix_y"))
        self.assertEqual(img_fu[0].get_attr("apix_z"), img_fu_old[0].get_attr("apix_z"))
        self.assertEqual(img_fu[0].get_attr("apix_x"), 2.111)
        self.assertEqual(img_fu[0].get_attr("apix_y"), 2.111)
        self.assertEqual(img_fu[0].get_attr("apix_z"), 2.111)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(
        self
    ):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_pixel_size(img=None, pixel_size=2.1)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_pixel_size(img=None, pixel_size=2.1)
        self.assertEqual(
            str(cm_new.exception), "'NoneType' object has no attribute 'get_zsize'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_lacos(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.lacos()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.lacos()
        self.assertEqual(
            str(cm_new.exception), "lacos() missing 1 required positional argument: 'x'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_null_angle(self):
        return_new = fu.lacos(x=0)
        return_old = oldfu.lacos(x=0)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 90.0)

    def test_negative_angle(self):
        return_new = fu.lacos(x=-0.12)
        return_old = oldfu.lacos(x=-0.12)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 96.892102579346385)

    def test_positive_angle(self):
        return_new = fu.lacos(x=0.12)
        return_old = oldfu.lacos(x=0.12)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 83.107897420653629)

    def test_outOfRange_angle(self):
        return_new = fu.lacos(x=12)
        return_old = oldfu.lacos(x=12)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0.0)


class Test_findall(unittest.TestCase):
    l = [1, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.findall()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.findall()
        self.assertEqual(
            str(cm_new.exception), "findall() missing 2 required positional arguments: 'value' and 'L'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_findall_5(self):
        return_new = fu.findall(value=5, L=self.l, start=0)
        return_old = oldfu.findall(value=5, L=self.l, start=0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [4, 5, 6]))

    def test_findall_noValues(self):
        return_new = fu.findall(value=0, L=self.l, start=0)
        return_old = oldfu.findall(value=0, L=self.l, start=0)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, []))


class Test_class_iterImagesList(unittest.TestCase):
    list_of_imgs = [
        IMAGE_2D,
        IMAGE_3D,
        IMAGE_BLANK_2D,
        IMAGE_BLANK_3D,
        IMAGE_2D_REFERENCE,
    ]

    def test_invalid_init(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.iterImagesList()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.iterImagesList()
        self.assertEqual(
            str(cm_new.exception), "__init__() missing 1 required positional argument: 'list_of_images'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_valid_init(self):
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        self.assertEqual(type(fu_obj).__name__, "iterImagesList")
        self.assertEqual(type(fu_obj).__name__, type(oldfu_obj).__name__)

    def test_valid_init2(self):
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=[1, 2]
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=[1, 2]
        )
        self.assertEqual(type(fu_obj).__name__, "iterImagesList")
        self.assertEqual(type(fu_obj).__name__, type(oldfu_obj).__name__)

    def test_wrong_init_list_of_index_leads_IndexError(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.iterImagesList(
                list_of_images=self.list_of_imgs, list_of_indexes=[1, 2, 7]
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.iterImagesList(
                list_of_images=self.list_of_imgs, list_of_indexes=[1, 2, 7]
            )
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_iterNo(self):
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

    def test_imageIndex(self):
        """ since the position is -1 it is returning the index of the last image hence 4"""
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        self.assertEqual(fu_obj.imageIndex(), oldfu_obj.imageIndex())
        self.assertEqual(fu_obj.imageIndex(), 4)

    def test_image(self):
        """ since the position is -1 it is returning the last image hence the 4th"""
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        fu_img = fu_obj.image()
        oldfu_img = oldfu_obj.image()
        expectedimg = self.list_of_imgs[fu_obj.imageIndex()]
        self.assertTrue(array_equal(fu_img.get_3dview(), oldfu_img.get_3dview()))
        self.assertTrue(array_equal(fu_img.get_3dview(), expectedimg.get_3dview()))

    def test_goToNext(self):
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )

        """ I'm testing all the data in the obj in order to test the return False"""
        fu_counter = 0
        while fu_obj.goToNext():  # I'm , implicitly, testing the return True
            self.assertEqual(fu_obj.iterNo(), fu_counter)
            fu_counter += 1

        oldfu_counter = 0
        while oldfu_obj.goToNext():
            self.assertEqual(oldfu_obj.iterNo(), oldfu_counter)
            oldfu_counter += 1

        """ no more img in the object"""
        self.assertFalse(fu_obj.goToNext())
        self.assertFalse(oldfu_obj.goToNext())

        """ check if both of the classes tested all the images"""
        self.assertTrue(fu_counter, oldfu_counter)
        self.assertTrue(fu_counter, len(self.list_of_imgs))

    def test_goToPrev(self):
        fu_obj = fu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        oldfu_obj = oldfu.iterImagesList(
            list_of_images=self.list_of_imgs, list_of_indexes=None
        )
        """At the beginning there is no previous image"""
        self.assertFalse(fu_obj.goToPrev())
        self.assertFalse(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

        """ We are on the first image, it means that we have still no previous image"""
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 0)

        self.assertFalse(fu_obj.goToPrev())
        self.assertFalse(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

        """ We are on the second image, it means that we have an previous image"""
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 1)

        self.assertTrue(fu_obj.goToPrev())
        self.assertTrue(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(), oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 0)


class Test_pack_message(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.pack_message()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.pack_message()
        self.assertEqual(
            str(cm_new.exception), "pack_message() missing 1 required positional argument: 'data'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_data_is_a_string(self):
        data = "case S:I am a string!!!"
        return_new = fu.pack_message(data=data)
        return_old = oldfu.pack_message(data=data)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, b"Scase S:I am a string!!!")

    def test_data_is_a_very_long_string(self):
        long_data = "I am a stringggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg!!!"
        return_new = fu.pack_message(data=long_data)
        return_old = oldfu.pack_message(data=long_data)

        test = fu.unpack_message(return_new)
        self.assertEqual(test, long_data)
        self.assertEqual(return_new, return_old)

    def test_data_is_a_notstring(self):
        data = 5555
        return_new = fu.pack_message(data=data)
        return_old = oldfu.pack_message(data=data)
        self.assertEqual(return_new , return_old)

    def test_data_is_a_notstring_long_version(self):
        data
        return_new = fu.pack_message(data=data)
        return_old = oldfu.pack_message(data=data)
        self.assertEqual(return_new , return_old)


    def test_list_of_data(self):
        data = [[ 0 ,2 ,3, [0]]]
        return_new = fu.pack_message(data=data)
        return_old = oldfu.pack_message(data=data)

        test  = fu.unpack_message(return_new)
        self.assertEqual(return_new , return_old)
        self.assertEqual(test, data)

    def test_small_list_of_data(self):
        data = 2
        return_new = fu.pack_message(data=data)
        return_old = oldfu.pack_message(data=data)

        test = fu.unpack_message(return_new)
        self.assertEqual(return_new, return_old)
        self.assertEqual(test, data)



class Test_unpack_message(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.unpack_message()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.unpack_message()
        self.assertEqual(
            str(cm_new.exception), "unpack_message() missing 1 required positional argument: 'msg'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_O_list_of_data(self):
        datas = b'O\x80\x02]q\x00(K\x00K\x02K\x03K/e.'
        return_new = fu.unpack_message(datas)
        return_old = oldfu.unpack_message(datas)

        test = fu.pack_message(return_new)
        self.assertEqual(test, datas)
        self.assertEqual(return_new, return_old)


    def test_Z_list_of_data(self):
        datas = b'Zx\x01k`\xea\xde\xc5\xc4\xc0\xf0\xd8\xa2o\x98\xa1\x03\xdb\xbc\xff<\x8b\xb2Y\xfb\xe6E\xf4\x94\x13\'\xdb\xa6\xccb\\Z\x97{x\xc2yy\xe3\x8ek\x11\xbf\xcfEd\xbd\xf0\xb3\xcf\xfb\xc7\xf0\xc2\xd4\xf0\xa3\xf8%\xfe\x87\xd7s\xf6\xff]\xd9\xb4r\xe2\x17-\xb5k\xe9\x92\xabw\xf3I\x06\xefOS\xb9Y\xcc\xf5\xf6\xe7\x04\x1e[;\x8e\xd3F\xfbr\xf6\xb7\xc8y\xac\xfe\xf8\xfc\xe7\xcb\x8b\x8c\x93d\xb9\xdc\xa75\xd7\xc8\xa8\xdeJt\x9ac\xa5\xf7H\xf7\xc0\x13\x07#\xcbf\x1f\xe7/\x12\x8d\x9b\xcbD\x8cWO\x0f\xad\xf8juJ\xb1\xdb\xff\xc2\xf6\x8cw\x9d&:w\xb6\x16<\x0f\xd7\xddj\xb9>\xab\xf9\xb5\x01\xbfx\xc7\xa3E\xbb6G\x1eY:\xf9k\xb1v\x81Z"\xe3\xa4\xab3\xfe~\xb2\xbb\x96~\xe2\x7f\x9fd\t\xa7\xd0\xe4\xd0o\xeb\x93\x97\xa6kFo\xe3l\xf6_\xfc\xc1]K\xff\xd1\\\xb1\xaa\x98t\xdb\x1f\xfd\x0f\x04\xb6\xef{\xa3\xb4\xbb%\xe8_C\xa4\xcd\xb3\x83u\xac\xd3\xb4\x1e\xad\xd8]\x95\x96\xfe\xa5sY\xef\xce\x8f|i7\x98\n"\x14\xcc\x8a\x18\xca\xf5\x8e\xbf\xbcsh\xe6$Y\xc1\x1c\xd9\xb8\xaas\xb3\r\xeb\xc2\x9f\xd9\xb5\xf8|\xdfQ*mW\xa2\x7ft\xcd\xbd\xe3\x95\x0f?\xd9G\xcc-~\xa3\xd1 \x10\x9f\xf6\xa8\x82\xcd\xed\x04\xd7\x9a\x18K\x8f\xd3\xa5\xf7\x1d\x1c\xbcbw\t1F\xee\xda\xf9/z\xdb\x9fs\xf3\x97=\xd0\xd2\xfc\xef]|Q\x9e;\xfd\xd9\xcd\xdb"\xb2\xc5&\xa9\x0b\x9ew/\x17;\xa5Vh\xff\x91\xc7*i\x96z\x93\xebd\x8f\x98\xe9\xbe\xbb\xda\xdf54OoZ^\xe8m\xa5\xe4v\xe9x\xc0\x9b\x93\xe76jsg:\xbc:b\xbcl\xef\xbe\x84\xbf\xd5S\xad~U\xdf\x94|(\xb1\x9fo\x9byL\x80^\xd7\x81\xd6\tu\xa1\xb3\x05\xe3\xf6mP\x14\xcdo\n9<\xd1\xa6\xdf \xfa\xc6\xb3\x96\xc9\xb1\x06\x15\xfas\x12\x04\xedRv\x19}LM)17~wz\xce\xa4\x84\xd4E\xc7\xabmSNi\x17p\xfe\xef\x8fu\xf2\x90|\xce\xaf\x07\x00X\xf2g\xa0'
        return_new = fu.unpack_message(datas)
        return_old = oldfu.unpack_message(datas)

        test = fu.pack_message(return_new)
        self.assertEqual(test, datas)
        self.assertEqual(return_new, return_old)

    def test_S_string_of_data(self):
        datas = b"Scase S:I am a string!!!"
        return_new = fu.unpack_message(datas)
        return_old = oldfu.unpack_message(datas)

        test = fu.pack_message(return_new)
        self.assertEqual(test, datas)
        self.assertEqual(return_new, return_old)


    def test_C_string_of_data(self):
        datas = b'Cx\x01\xf3TH\xccUHT(.)\xca\xccK\x1f\x05D\x87\x80\xa2\xa2"\x00Ca} '
        return_new = fu.unpack_message(datas)
        return_old = oldfu.unpack_message(datas)

        test = fu.pack_message(return_new)
        self.assertEqual(test, datas)
        self.assertEqual(return_new, return_old)

    @unittest.skip("Exception is changed somehow")
    def test_wrongvalue_of_data(self):
        sp_global_def.BATCH = True
        datas = 'Cx\x01\xf3TH\xccUHT(.)\xca\xccK\x1f\x05D\x87\x80\xa2\xa2"\x00Ca'
        with self.assertRaises(SystemExit) as cm_new:
            fu.unpack_message(datas)
        sp_global_def.BATCH =True
        with self.assertRaises(SystemExit) as cm_old:
            oldfu.unpack_message(datas)

        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


    def test_data_is_a_string_BUG(self):
        self.assertTrue(True)
        """
        data = fu.pack_message("case S:I am a string!!!")
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """

    def test_data_is_a_very_long_string(self):
        self.assertTrue(True)
        """
        long_data = "I am a stringggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg!!!"
        data= fu.pack_message(long_data)
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """

    def test_data_is_a_notstring(self):
        self.assertTrue(True)
        """
        data = fu.pack_message(5555)
        return_new = fu.unpack_message(5555)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """

    def test_data_is_a_notstring_long_version(self):
        self.assertTrue(True)
        """
        data = fu.pack_message
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new, return_old)
        """

    # data is a numpy array with the following value: ['O', '\x80' ,'\x02' ,']', 'q', '', 'K', 'I', 'a', '.'] and dtype = '|S1'. I cannot create it
    def test_pickle_file_values(self):
        (data,) = get_arg_from_pickle_file(
            path.join(ABSOLUTE_PATH_TO_RESOURCES, "utilities.unpack_message")
        )[0]

        return_new = fu.unpack_message(msg=data)
        return_old = oldfu.unpack_message(msg=data)

        self.assertEqual(return_new, return_old)


class Test_wrap_mpi_send(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_send()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_send()
        self.assertEqual(
            str(cm_new.exception),
            "wrap_mpi_send() missing 2 required positional arguments: 'data' and 'destination'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_value(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_send"""
        return_new = fu.wrap_mpi_send(data=[9], destination=0, communicator=None)
        return_old = oldfu.wrap_mpi_send(data=[9], destination=0, communicator=None)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        return_new = fu.wrap_mpi_send(
            data=[9], destination=0, communicator=MPI_COMM_WORLD
        )
        return_old = oldfu.wrap_mpi_send(
            data=[9], destination=0, communicator=MPI_COMM_WORLD
        )
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    @unittest.skip("skip because segmentation fault")
    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        return_new = fu.wrap_mpi_send(data = [9], destination = 0, communicator = -1)
        return_old = oldfu.wrap_mpi_send(data =[9], destination = 0, communicator = -1)
        self.assertEqual(return_new, return_old)


class Test_wrap_mpi_recv(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_recv()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_recv()
        self.assertEqual(
            str(cm_new.exception), "wrap_mpi_recv() missing 1 required positional argument: 'source'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    "Can only test on cluster , cannot work on workstation"
    # def test_wrap_mpi_recv_true_should_return_equal_objects(self):
    #     filepath = path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_recv")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle_load(rb)
    #
    #     print(argum[0])
    #
    #     (data, communicator) = argum[0]
    #
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_new = fu.wrap_mpi_recv(data, communicator)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_recv(data, communicator)
    #
    #     self.assertEqual(return_new, return_old)


class Test_wrap_mpi_bcast(unittest.TestCase):
    """ Values got running Test_get_sorting_params_refine.test_default_case"""

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_bcast()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_bcast()
        self.assertEqual(
            str(cm_new.exception),
            "wrap_mpi_bcast() missing 2 required positional arguments: 'data' and 'root'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_None_data(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_send"""
        mpi_barrier(MPI_COMM_WORLD)
        return_new = fu.wrap_mpi_bcast(None, root=0, communicator=None)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(None, root=0, communicator=None)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_default_case(self):
        attr_value_list = [
            [0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0],
            [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0],
            [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0],
        ]
        mpi_barrier(MPI_COMM_WORLD)
        return_new = fu.wrap_mpi_bcast(
            data=attr_value_list, root=0, communicator=MPI_COMM_WORLD
        )
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(
            data=attr_value_list, root=0, communicator=MPI_COMM_WORLD
        )
        mpi_barrier(MPI_COMM_WORLD)
        print(return_new)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(
            array_equal(
                return_new,
                [
                    [
                        0,
                        27.84771510918482,
                        49.09925034711038,
                        236.702241194244,
                        0.0,
                        0.0,
                    ],
                    [
                        1,
                        54.496982231553545,
                        150.6989385443887,
                        95.77312314162165,
                        0.0,
                        0.0,
                    ],
                    [
                        2,
                        67.0993779295224,
                        52.098986136572584,
                        248.45843717750148,
                        0.0,
                        0.0,
                    ],
                ],
            )
        )

    def test_data_is_a_string(self):
        mpi_barrier(MPI_COMM_WORLD)
        data = "case S:I am a string!!!"
        return_new = fu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, data)


    def test_data_is_a_very_long_string(self):
        long_data = "I am a stringggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg!!!"
        mpi_barrier(MPI_COMM_WORLD)
        return_new = fu.wrap_mpi_bcast(data=long_data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=long_data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        print(return_new)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, long_data)

    def test_data_is_a_notstring(self):
        data = 5555
        return_new = fu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new , return_old)
        self.assertEqual(return_new, data)

    def test_data_is_a_notstring_float(self):
        data = 5555.6543
        return_new = fu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new , return_old)
        self.assertEqual(return_new, data)


    def test_data_is_a_notstring_long_version(self):
        data
        return_new = fu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new , return_old)
        self.assertEqual(return_new, data)

    def test_list_of_data(self):
        data = [[ 0 ,2 ,3, [0]]]
        return_new = fu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data=data, root=0, communicator=MPI_COMM_WORLD)
        mpi_barrier(MPI_COMM_WORLD)
        self.assertEqual(return_new , return_old)
        self.assertEqual(return_new, data)

    @unittest.skip("skip because segmentation fault")
    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        return_new = fu.wrap_mpi_bcast(data = [9], root = 0, communicator = -1)
        return_old = oldfu.wrap_mpi_bcast(data =[9], root= 0, communicator = -1)
        self.assertEqual(return_new, return_old)



class Test_wrap_mpi_gatherv(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_gatherv()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_gatherv()
        self.assertEqual(
            str(cm_new.exception),
            "wrap_mpi_gatherv() missing 2 required positional arguments: 'data' and 'root'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_pickle_file_values(self):
        return_new = fu.wrap_mpi_gatherv(data=[45, 3], root=0, communicator=None)
        return_old = oldfu.wrap_mpi_gatherv(data=[45, 3], root=0, communicator=None)
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [45, 3]))

    def test_with_MPI_COMM_WORLD(self):
        return_new = fu.wrap_mpi_gatherv(
            data=[45, 3], root=0, communicator=MPI_COMM_WORLD
        )
        return_old = oldfu.wrap_mpi_gatherv(
            data=[45, 3], root=0, communicator=MPI_COMM_WORLD
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, [45, 3]))

    @unittest.skip("skip because segmentation fault")
    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        return_new = fu.wrap_mpi_gatherv(data = [45,3], root = 0, communicator= -1)
        return_old = oldfu.wrap_mpi_gatherv(data= [45,3], root = 0, communicator= -1)
        self.assertEqual(return_new, return_old)


class Test_get_colors_and_subsets(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_colors_and_subsets()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_colors_and_subsets()
        self.assertEqual(
            str(cm_new.exception),
            "get_colors_and_subsets() missing 6 required positional arguments: 'main_node', 'mpi_comm', 'my_rank', 'shared_comm', 'sh_my_rank', and 'masters_from_groups_vs_everything_else_comm'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_mainMode_equal_my_rank(self):
        main_node = 0
        my_rank = mpi_comm_rank(MPI_COMM_WORLD)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        sh_my_rank = mpi_comm_rank(shared_comm)
        masters = mpi_comm_split(MPI_COMM_WORLD, sh_my_rank == main_node, my_rank)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)

        return_new = fu.get_colors_and_subsets(
            main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank, masters
        )
        return_old = oldfu.get_colors_and_subsets(
            main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank, masters
        )
        self.assertTrue(array_equal(return_new, return_old))
        self.assertTrue(array_equal(return_new, (0, 1, True)))

    def test_mainMode_not_equal_my_rank_returns_TypeError_obj_Nonetype_hasnot_len(self):
        main_node = 0
        my_rank = mpi_comm_rank(MPI_COMM_WORLD)
        shared_comm = mpi_comm_split_type(
            MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL
        )
        sh_my_rank = mpi_comm_rank(shared_comm)
        masters = mpi_comm_split(MPI_COMM_WORLD, sh_my_rank == main_node, my_rank)
        shared_comm = mpi_comm_split_type(
            MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL
        )
        with self.assertRaises(TypeError) as cm_new:
            fu.get_colors_and_subsets(
                main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank + 1, masters
            )
        sp_global_def.BATCH = True
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_colors_and_subsets(
                main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank + 1, masters
            )
        self.assertEqual(
            str(cm_new.exception), "object of type 'NoneType' has no len()"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_wrap_mpi_split(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_split()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_split()
        self.assertEqual(
            str(cm_new.exception),
            "wrap_mpi_split() missing 2 required positional arguments: 'comm' and 'no_of_groups'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

        """ Can only be tested in mpi not on workstation   """

    # def test_wrap_mpi_split_true_should_return_equal_objects(self):
    #     filepath = path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_split")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle_load(rb)
    #
    #     print(argum[0])
    #
    #     (comm, no_of_groups) = argum[0]
    #
    #     return_new = fu.wrap_mpi_split(comm, no_of_groups)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_split(comm, no_of_groups)
    #
    #     self.assertEqual(return_new, return_old)


class Test_get_dist(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_dist()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_dist()
        self.assertEqual(
            str(cm_new.exception), "get_dist() missing 2 required positional arguments: 'c1' and 'c2'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_get_dist(self):
        return_new = fu.get_dist(c1=[2, 4], c2=[5, 1])
        return_old = oldfu.get_dist(c1=[2, 4], c2=[5, 1])
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 4.2426406871192848)

    def test_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.get_dist(c1=[2], c2=[5])
        with self.assertRaises(IndexError) as cm_old:
            oldfu.get_dist(c1=[2], c2=[5])
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_eliminate_moons(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.eliminate_moons()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.eliminate_moons()
        self.assertEqual(
            str(cm_new.exception),
            "eliminate_moons() missing 2 required positional arguments: 'my_volume' and 'moon_elimination_params'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_real_case_IMAGE_3D(self):
        from numpy import zeros
        moon_params = [0.4, 1]
        b, non = get_real_data(dim=3)
        b.set_size(10, 10, 10)
        a, non = get_real_data(dim=3)
        a.set_size(10, 10, 10)

        return_new = fu.eliminate_moons(
            my_volume=a, moon_elimination_params=moon_params
        )
        return_old = oldfu.eliminate_moons(
            my_volume=b, moon_elimination_params=moon_params
        )

        self.assertTrue(array_equal(return_old.get_3dview(), b.get_3dview()))
        self.assertTrue(array_equal(return_old.get_3dview(), return_new.get_3dview()))
        self.assertTrue(array_equal(return_new.get_3dview().flatten(),zeros(1000)))

    def test_real_case_IMAGE_3D_no_change(self):
        moon_params = [0.4, 1]
        b, non = get_real_data(dim=3)
        b.set_size(10, 10, 10)
        a, non = get_real_data(dim=3)
        a.set_size(10, 10, 10)


        return_new = fu.eliminate_moons(
            my_volume=a, moon_elimination_params=moon_params
        )
        return_old = oldfu.eliminate_moons(
            my_volume=b, moon_elimination_params=moon_params
        )
        self.assertTrue(allclose(return_old.get_3dview(), b.get_3dview(), atol = 0.1))
        self.assertTrue(allclose(return_old.get_3dview(), return_new.get_3dview(), atol = 0.1))

    def test_returns_IndexError_list_index_out_of_range(self):
        moon_params = [0.4]
        b, non = get_real_data(dim=3)
        b.set_size(10, 10, 10)
        a, non = get_real_data(dim=3)
        a.set_size(10, 10, 10)

        with self.assertRaises(IndexError) as cm_new:
            fu.eliminate_moons(
                my_volume=a, moon_elimination_params=moon_params
            )
        with self.assertRaises(IndexError) as cm_old:
            oldfu.eliminate_moons(
                my_volume=b, moon_elimination_params=moon_params
            )
        self.assertEqual(str(cm_new.exception), "list index out of range")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_empty_img_returns_RuntimeError_the_img_should_be_a_3D_img(self):
        moon_params = [0.4, 0.7]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.eliminate_moons(my_volume=EMData(), moon_elimination_params=moon_params)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.eliminate_moons(
                my_volume=EMData(), moon_elimination_params=moon_params
            )
        msg = str(cm_new.exception).split("'")
        msg_old = str(cm_old.exception).split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(msg[1], "The image should be 3D")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_NoneType_img_returns_AttributeError_NoneType_obj_hasnot_attribute_find_3d_threshold(
        self
    ):
        moon_params = [0.4, 0.7]
        with self.assertRaises(AttributeError) as cm_new:
            fu.eliminate_moons(my_volume=None, moon_elimination_params=moon_params)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.eliminate_moons(my_volume=None, moon_elimination_params=moon_params)
        self.assertEqual(
            str(cm_new.exception),
            "'NoneType' object has no attribute 'find_3d_threshold'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))


class Test_combinations_of_n_taken_by_k(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.combinations_of_n_taken_by_k()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.combinations_of_n_taken_by_k()
        self.assertEqual(
            str(cm_new.exception),
            "combinations_of_n_taken_by_k() missing 2 required positional arguments: 'n' and 'k'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_combinations_of_n_taken_by_k(self):
        return_new = fu.combinations_of_n_taken_by_k(5, 3)
        return_old = oldfu.combinations_of_n_taken_by_k(5, 3)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 10)


class Test_cmdexecute(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.cmdexecute()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.cmdexecute()
        self.assertEqual(
            str(cm_new.exception), "cmdexecute() missing 1 required positional argument: 'cmd'")
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_correct_cmd_without_printing_on_success(self):
        return_new = fu.cmdexecute("ls", False)
        return_old = oldfu.cmdexecute("ls", False)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, None)

    def test_correct_cmd_with_printing_on_success(self):
        return_new = fu.cmdexecute("ls", True)
        return_old = oldfu.cmdexecute("ls", True)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_wrong_cmd(self):
        return_new = fu.cmdexecute("quack", True)
        return_old = oldfu.cmdexecute("quack", True)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)


class Test_string_found_in_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.string_found_in_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.string_found_in_file()
        self.assertEqual(
            str(cm_new.exception),
            "string_found_in_file() missing 2 required positional arguments: 'myregex' and 'filename'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_file_not_found_returns_IOError(self):
        with self.assertRaises(IOError) as cm_new:
            fu.string_found_in_file("search smth", "not_a_file.txt")
        with self.assertRaises(IOError) as cm_old:
            oldfu.string_found_in_file("search smth", "not_a_file.txt")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)

    def test_found_value(self):
        f = "f.txt"
        data = [["hallo", 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
        path_to_file = path.join(ABSOLUTE_PATH_TO_RESOURCES, f)
        fu.write_text_row(data, path_to_file)
        return_new = fu.string_found_in_file("hallo", path_to_file)
        return_old = oldfu.string_found_in_file("hallo", path_to_file)
        remove_list_of_file([f])
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new)

    def test_notfound_value(self):
        f = "f.txt"
        data = [["ds", 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
        path_to_file = path.join(ABSOLUTE_PATH_TO_RESOURCES, f)
        fu.write_text_row(data, path_to_file)
        return_new = fu.string_found_in_file("hallo", path_to_file)
        return_old = oldfu.string_found_in_file("hallo", path_to_file)
        remove_list_of_file([f])
        self.assertEqual(return_new, return_old)
        self.assertFalse(return_new)


class Test_get_latest_directory_increment_value(unittest.TestCase):
    start_value = 1
    folder_name = "d"

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_latest_directory_increment_value()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_latest_directory_increment_value()
        self.assertEqual(
            str(cm_new.exception),
            "get_latest_directory_increment_value() missing 2 required positional arguments: 'directory_location' and 'directory_name'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_nothing_to_count(self):
        return_new = fu.get_latest_directory_increment_value(
            ABSOLUTE_PATH_TO_RESOURCES,
            self.folder_name,
            start_value=self.start_value,
            myformat="%03d",
        )
        return_old = oldfu.get_latest_directory_increment_value(
            ABSOLUTE_PATH_TO_RESOURCES,
            self.folder_name,
            start_value=self.start_value,
            myformat="%03d",
        )
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, self.start_value)

class Test_getindexdata(unittest.TestCase):
    """ nproc and myid valeus got from "pickle files/utilities/utilities.getindexdata"""

    nproc = 95
    myid = 22
    stack = "bdb:" + path.join(
        ABSOLUTE_PATH_TO_RESOURCES, "../07_RVIPER/best_000"
    )
    partids = path.join(
        ABSOLUTE_PATH_TO_RESOURCES,
        "../07_RVIPER/main001/this_iteration_index_keep_images.txt",
    )
    partstack = path.join(
        ABSOLUTE_PATH_TO_RESOURCES,
        "../07_RVIPER//main001/run000/rotated_reduced_params.txt",
    )

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getindexdata()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getindexdata()
        self.assertEqual(
            str(cm_new.exception), "getindexdata() missing 5 required positional arguments: 'stack', 'partids', 'partstack', 'myid', and 'nproc'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    #todo: Adnan removed the 'partstack' file. i am looking for a file like that
    """
    def test_nproc_greater_than_ndata(self):
        return_new = fu.getindexdata(
            self.stack, self.partids, self.partstack, self.myid, self.nproc
        )
        return_old = oldfu.getindexdata(
            self.stack, self.partids, self.partstack, self.myid, self.nproc
        )
        a = return_new[0].get_3dview().flatten().tolist()
        self.assertTrue(
            array_equal(return_new[0].get_3dview(), return_old[0].get_3dview())
        )


    def test_nproc_and_myid_greater_than_ndata_(self):
        return_new = fu.getindexdata(
            self.stack, self.partids, self.partstack, 100, self.nproc
        )
        return_old = oldfu.getindexdata(
            self.stack, self.partids, self.partstack, 100, self.nproc
        )
        self.assertTrue(
            array_equal(return_new[0].get_3dview(), return_old[0].get_3dview())
        )

    def test_nproc_lower_than_ndata(self):
        return_new = fu.getindexdata(
            self.stack, self.partids, self.partstack, self.myid, nproc=10
        )
        return_old = oldfu.getindexdata(
            self.stack, self.partids, self.partstack, self.myid, nproc=10
        )
        self.assertTrue(
            array_equal(return_new[0].get_3dview(), return_old[0].get_3dview())
        )
    """

class Test_store_value_of_simple_vars_in_json_file(unittest.TestCase):
    f = path.join(ABSOLUTE_PATH_TO_RESOURCES, "fu.json")
    f_old = path.join(ABSOLUTE_PATH_TO_RESOURCES, "oldfu.json")
    var_to_save = {
        "string_var": "var1",
        "integer_var": 7,
        "bool_var": False,
        "list_var": [2, 3, 4],
    }

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.store_value_of_simple_vars_in_json_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.store_value_of_simple_vars_in_json_file()
        self.assertEqual(
            str(cm_new.exception),
            "store_value_of_simple_vars_in_json_file() missing 2 required positional arguments: 'filename' and 'local_vars'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_value(self):
        fu.store_value_of_simple_vars_in_json_file(
            filename=self.f,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[],
            write_or_append="w",
            vars_that_will_show_only_size=[],
        )
        oldfu.store_value_of_simple_vars_in_json_file(
            filename=self.f_old,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[],
            write_or_append="w",
            vars_that_will_show_only_size=[],
        )
        self.assertEqual(
            returns_values_in_file(self.f), returns_values_in_file(self.f_old)
        )
        self.assertTrue(fu.string_found_in_file(next(iter(self.var_to_save)), self.f))

        self.assertTrue(
            oldfu.string_found_in_file(next(iter(self.var_to_save)), self.f_old)
        )
        remove_list_of_file([self.f, self.f_old])

    def test_exclude_a_variable(self):
        # var = self.var_to_save.keys()[0]
        var = next(iter(self.var_to_save))
        fu.store_value_of_simple_vars_in_json_file(
            filename=self.f,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[var],
            write_or_append="w",
            vars_that_will_show_only_size=[],
        )
        oldfu.store_value_of_simple_vars_in_json_file(
            filename=self.f_old,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[var],
            write_or_append="w",
            vars_that_will_show_only_size=[],
        )
        self.assertEqual(
            returns_values_in_file(self.f), returns_values_in_file(self.f_old)
        )
        self.assertFalse(fu.string_found_in_file(var, self.f))
        self.assertFalse(oldfu.string_found_in_file(var, self.f_old))
        remove_list_of_file([self.f, self.f_old])

    def test_onlySize_a_variable(self):
        var = "list_var"
        fu.store_value_of_simple_vars_in_json_file(
            filename=self.f,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[],
            write_or_append="w",
            vars_that_will_show_only_size=[var],
        )
        oldfu.store_value_of_simple_vars_in_json_file(
            filename=self.f_old,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[],
            write_or_append="w",
            vars_that_will_show_only_size=[var],
        )
        self.assertEqual(
            returns_values_in_file(self.f), returns_values_in_file(self.f_old)
        )
        print(self.f)
        self.assertTrue(fu.string_found_in_file("<class 'list'> with length: 3", self.f))

        self.assertTrue(
            oldfu.string_found_in_file("<class 'list'> with length: 3", self.f_old)
        )
        remove_list_of_file([self.f, self.f_old])


class Test_convert_json_fromunicode(unittest.TestCase):
    f = path.join(ABSOLUTE_PATH_TO_RESOURCES, "f.json")
    var_to_save = {
        "string_var": "var1",
        "integer_var": 7,
        "bool_var": False,
        "list_var": [2, 3, 4],
    }

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.convert_json_fromunicode()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.convert_json_fromunicode()
        self.assertEqual(
            str(cm_new.exception),
            "convert_json_fromunicode() missing 1 required positional argument: 'data'",
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_with_loaded_jsonFile(self):
        fu.store_value_of_simple_vars_in_json_file(
            filename=self.f,
            local_vars=self.var_to_save,
            exclude_list_of_vars=[],
            write_or_append="w",
            vars_that_will_show_only_size=[],
        )
        with open(self.f, "r") as f1:
            values = json_load(f1)

        return_new = fu.convert_json_fromunicode(values)
        return_old = oldfu.convert_json_fromunicode(values)
        self.assertDictEqual(return_new, return_old)
        remove_list_of_file([self.f])

    def test_with_string(self):
        data = "ciaone"
        return_new = fu.convert_json_fromunicode(data)
        return_old = oldfu.convert_json_fromunicode(data)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, data)


class Test_nearest_proj(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_proj()
        self.assertEqual(
            str(cm_new.exception), "nearest_proj() missing 1 required positional argument: 'proj_ang'"
        )
        self.assertEqual(str(cm_new.exception), str(cm_old.exception))

    def test_default_value(self):
        # I calculated the value looking in the code of bin/sx3dvariability.py
        proj_angles = []
        for i in range(10):
            i = +0.1
            proj_angles.append([i / 2, i / 5, i / 4, i / 3, i])
        proj_angles.sort()
        proj_angles_list = numpy_full((100, 4), 0.0, dtype=numpy_float32)
        for i in range(10):
            proj_angles_list[i][0] = proj_angles[i][1]
            proj_angles_list[i][1] = proj_angles[i][2]
            proj_angles_list[i][2] = proj_angles[i][3]
            proj_angles_list[i][3] = proj_angles[i][4]
        return_new1, return_new2 = fu.nearest_proj(proj_angles_list)
        return_old1, return_old2 = oldfu.nearest_proj(proj_angles_list)
        self.assertTrue(array_equal(return_new1, return_old1))
        self.assertTrue(array_equal(return_new2, return_old2))
        self.assertTrue(
            array_equal(
                return_new1,
                [
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        2,
                        0,
                        1,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        3,
                        0,
                        1,
                        2,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        4,
                        0,
                        1,
                        2,
                        3,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        5,
                        0,
                        1,
                        2,
                        3,
                        4,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        6,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        7,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        8,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        9,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                    ],
                    [
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        11,
                        10,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        12,
                        10,
                        11,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        13,
                        10,
                        11,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        14,
                        10,
                        11,
                        12,
                        13,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        15,
                        10,
                        11,
                        12,
                        13,
                        14,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        16,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        17,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        18,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        19,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        20,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        21,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        22,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        23,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        24,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        25,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        26,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        27,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        28,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        29,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        30,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        31,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        32,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        33,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        34,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        35,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        36,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        37,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        38,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        39,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        40,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        41,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        42,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        43,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        44,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        45,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        46,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        47,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        48,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        49,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        50,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        51,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        52,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        53,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        54,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        55,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        56,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        57,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        58,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        59,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        60,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        61,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        62,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        63,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        64,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        65,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        66,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        67,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        68,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        69,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        70,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        71,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        72,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        73,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        74,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        75,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        76,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        77,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        78,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        79,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        80,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        81,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        82,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        83,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        84,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        85,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        86,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        87,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        88,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        89,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        90,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        91,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        92,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        93,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        94,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        95,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        95,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        96,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        96,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        97,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        97,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        98,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        98,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        99,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                    [
                        99,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                    ],
                ],
            )
        )
        self.assertTrue(
            array_equal(
                return_new2,
                [
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                    [
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                        False,
                    ],
                ],
            )
        )

