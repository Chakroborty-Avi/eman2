from __future__ import print_function
from __future__ import division


import cPickle as pickle
import os
from mpi import *
import global_def
import numpy
import zlib



mpi_init(0, [])
global_def.BATCH = True
global_def.MPI = True

ABSOLUTE_PATH = os.path.dirname(os.path.realpath(__file__))

import unittest
from test_module import get_arg_from_pickle_file, get_real_data, remove_list_of_file, returns_values_in_file,remove_dir,ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER
from ..libpy import sparx_utilities as fu
from .sparx_lib import sparx_utilities as oldfu
from ..libpy import sparx_fundamentals
from os import path
from EMAN2_cppwrap import EMData

from copy import deepcopy
import EMAN2db
import json
import random
try:
    from StringIO import StringIO   # python2 case
except:
    from io import StringIO         # python3 case. You will get an error because 'sys.stdout.write(msg)' presents in the library not in the test!!
import sys

IMAGE_2D, IMAGE_2D_REFERENCE = get_real_data(dim=2)
IMAGE_3D, STILL_NOT_VALID = get_real_data(dim=3)
IMAGE_BLANK_2D = fu.model_blank(10, 10)
IMAGE_BLANK_3D = fu.model_blank(10, 10, 10)
TOLERANCE = 0.0075
TRACKER = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/user_functions.do_volume_mask"))[0][0][1]

"""
pickle files stored under smb://billy.storage.mpi-dortmund.mpg.de/abt3/group/agraunser/transfer/Adnan/pickle files
"""

"""
There are some opened issues in:
1) drop_image --> How may I really test it
2) even_angles --> default value with P method leads to a deadlock
3) even_angles_cd --> default value with P method leads to a deadlock
4) find --> it seems to be not used
5) get_image --> I need an image to test the last 2 cases: get_image(path_to_img) and get_image(path_to_img, im=1)
6) get_im --> I need an image to test the last case ... similarly the (5)
9) estimate_3D_center_MPI -- ask markus how it works
10) write_headers --> in .bdb case are not working under linux. Take a look to the code for seeing their comments
        --> if the file exists it overwrites it without a warning message. will we have to insert this message?
11) write_header --> I do not know how test the .bdb case. Hier contrary to write_headers it works under linux
12) file_type --> it is not giving us the filetype of the file. it is just parsing the name of the file and giving back the extension of the file
            Is this the real purpouse of this function?
13) set_params2D --> if you use xform=xform.align3d it works, but the output is somethiong that we do not really want to have. It does not set the values
                --> since set_params_proj has the same kind of input we are not able to discriminate them when we call the function. anyway It does not set the values
14) set_params3D --> if you use xform=xform.align2d it works, but the output is somethiong that we do not really want to have. It does not set the values
15) set_params_proj --> I need an image with key 'xform.projection' to finish these tests because the associated pickle file has not it --> dovrebbero essere quelle in pickle files/multi_shc/multi_shc.ali3d_multishc
16) The following functions concern the sending data in the process and are difficult or even not possible to test deeply
    -) reduce_EMData_to_root
    -) bcast_compacted_EMData_all_to_all
    -) gather_compacted_EMData_to_root
    -) bcast_EMData_to_all
    -) send_EMData
    -) recv_EMData
    -) recv_attr_dict
    -) send_attr_dict
    -) wrap_mpi_send
    -) wrap_mpi_recv
    -) wrap_mpi_gatherv
    -) wrap_mpi_split
17) unpack_message it does not work properly is it a buggy function???
18) 'update_tag' returns, in both of the implementations 'return 123456'. i'm not going to test it
19) how we can test 'if_error_then_all_processes_exit_program'? 
20) sample_down_1D_curve --> I need a file with the curve values
21) test_print_upper_triangular_matrix --> which variable is the third parameter??")
22) get_shrink_data_huang,recons_mref --> the file gave me does not work see the reasons in the test
23) do_two_way_comparison -->  I cannot run the Adnan reference test. I had to insert random data --> I cannot test it deeply,
24) Test_get_stat_proj.test_myid_not_the_same_value_as_main_Node_TypeError is it due to a bad implemntation?
25) get_symt: how look into a Transform obj ?
"""






class Test_amoeba(unittest.TestCase):
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.amoeba"))

    @staticmethod
    def wrongfunction(a,b):
        return a+b

    @staticmethod
    def function_lessParam():
        return 0

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba()
        self.assertEqual(cm_new.exception.message, "amoeba() takes at least 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_amoeba(self):
        """
        I did not use 'self.assertTrue(numpy.allclose(return_new, return_old, atol=TOLERANCE,equal_nan=True))' because the 'nosetets' spawns the following error
                TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
        """
        (var, scale, func, ftolerance, xtolerance, itmax , data) = self.argum[0]
        return_new = fu.amoeba (var, scale, func, ftolerance, xtolerance, 20 , data)
        return_old = oldfu.amoeba (var, scale, func, ftolerance, xtolerance, 20 , data)
        self.assertTrue(numpy.allclose(return_new[0], return_old[0], atol=TOLERANCE,equal_nan=True))
        self.assertTrue(abs(return_new[1]- return_old[1]) <TOLERANCE)
        self.assertEqual(return_new[2],return_old[2])

    def test_amoeba_with_wrongfunction(self):
        (var, scale, func, ftolerance, xtolerance, itmax , data) = self.argum[0]
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba (var, scale, self.wrongfunction, ftolerance, xtolerance, itmax , None)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba (var, scale, self.wrongfunction, ftolerance, xtolerance, itmax , None)
        self.assertEqual(cm_new.exception.message, "wrongfunction() got an unexpected keyword argument 'data'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_amoeba_with_function_lessParam_TypeError(self):
        (var, scale, func, ftolerance, xtolerance, itmax , data) = self.argum[0]
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba (var, scale, self.function_lessParam, ftolerance, xtolerance, itmax , None)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba (var, scale, self.function_lessParam, ftolerance, xtolerance, itmax , None)
        self.assertEqual(cm_new.exception.message, "function_lessParam() takes no arguments (2 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_amoeba_with_NoneType_data_returns_TypeError_NoneType_obj_hasnot_attribute__getitem__(self):
        (var, scale, func, ftolerance, xtolerance, itmax , data) = self.argum[0]
        with self.assertRaises(TypeError) as cm_new:
            fu.amoeba (var, scale, func, ftolerance, xtolerance, itmax , None)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.amoeba (var, scale, func, ftolerance, xtolerance, itmax , None)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute '__getitem__'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_compose_transform2(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.compose_transform2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.compose_transform2()
        self.assertEqual(cm_new.exception.message, "compose_transform2() takes exactly 8 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        """ values got from 'pickle files/utilities/utilities.compose_transform2'"""
        return_new = fu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = 1.0, alpha2 = 156.512610336, sx2 = 0, sy2 = 0, scale2 = 1.0)
        return_old = oldfu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = 1.0, alpha2 = 156.512610336, sx2 = 0, sy2 = 0, scale2 = 1.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (156.51260982858517, -3.0179426670074463, -0.35223737359046936, 1.0)))

    def test_null_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = 0, alpha2 = 0, sx2 = 2.90828285217, sy2 =-0.879739010334, scale2 = 1.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = 0, alpha2 = 0, sx2 = 2.90828285217, sy2 =-0.879739010334, scale2 = 1.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "The scale factor in a Transform object must be positive and non zero")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_negative_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = -1.0, alpha2 = 0, sx2 = 2.90828285217, sy2 =-0.879739010334, scale2 = 1.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform2(alpha1 = 0, sx1 = 2.90828285217, sy1 =-0.879739010334, scale1 = -1.0, alpha2 = 0, sx2 = 2.90828285217, sy2 =-0.879739010334, scale2 = 1.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "The scale factor in a Transform object must be positive and non zero")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_compose_transform3(unittest.TestCase):

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.compose_transform3()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.compose_transform3()
        self.assertEqual(cm_new.exception.message, "compose_transform3() takes exactly 14 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        """ values got from 'pickle files/utilities/utilities.compose_transform3'"""
        return_new = fu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = 1.0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        return_old = oldfu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = 1.0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.0, 0.0, 0.32812498609601065, 0.001220703125, 0.0, 0.001220703125, 1.0)))

    def test_null_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = 0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = 0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "The scale factor in a Transform object must be positive and non zero")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_negative_scaleFactor_returns_RunTimeError_scale_factor_must_be_positive(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = -1.0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.compose_transform3(phi1 = 0.0, theta1  = 0.0, psi1 = 0.0, sx1 = 0.0,sy1 = 0.0, sz1 = 0.0,scale1 = -1.0, phi2 = 0.328125, theta2= 0.0, psi2 = 0.0, sx2 = 0.001220703125, sy2 = 0.0,sz2 = 0.001220703125,scale2 = 1.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "The scale factor in a Transform object must be positive and non zero")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)




class Test_combine_params2(unittest.TestCase):
    """ I did not use the 'pickle files/utilities/utilities.combine_params2' values because they are all 0 values"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.combine_params2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.combine_params2()
        self.assertEqual(cm_new.exception.message, "combine_params2() takes exactly 8 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_combine_params2(self):
        return_new = fu.combine_params2(alpha1 = 0.0, sx1 = 1.0, sy1 = 1.0, mirror1 = 1, alpha2 = 1.0, sx2 =2.0, sy2 = 0.0, mirror2 = 0)
        return_old = oldfu.combine_params2(alpha1 = 0.0, sx1 = 1.0, sy1 = 1.0, mirror1 = 1, alpha2 = 1.0, sx2 =2.0, sy2 = 0.0, mirror2 = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (359.0000000534512, -1.0176047086715698, 1.0173001289367676, 1)))



class Test_inverse_transform2(unittest.TestCase):
    """ I did not use the 'pickle files/utilities/utilities.inverse_transform2' values because they are all 0 values"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.inverse_transform2()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.inverse_transform2()
        self.assertEqual(cm_new.exception.message, "inverse_transform2() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_inverse_transform2(self):
        return_new = fu.inverse_transform2(alpha = 1.0, tx = 2.2, ty = 1.0, mirror = 0)
        return_old = oldfu.inverse_transform2(alpha = 1.0, tx = 2.2, ty = 1.0, mirror = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,(358.9999999938496, -2.1822125911712646, -1.0382429361343384, 0)))



""" How may I REALLY test it?"""
class Test_drop_image(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.drop_image()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.drop_image()
        self.assertEqual(cm_new.exception.message, "drop_image() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_invalid_type_returns_UnboundLocalError_imgtype_referenced_before_assignment(self):
        destination ='output.hdf'
        with self.assertRaises(UnboundLocalError) as cm_new:
            fu.drop_image(IMAGE_2D, destination, itype="invalid")
        with self.assertRaises(UnboundLocalError) as cm_old:
            oldfu.drop_image(IMAGE_2D, destination, itype="invalid")
        self.assertEqual(cm_new.exception.message, "local variable 'imgtype' referenced before assignment")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_destination_is_not_a_file_returns_error_msg(self):
        destination = 3
        return_new = fu.drop_image(IMAGE_2D, destination, itype="h")
        return_old = oldfu.drop_image(IMAGE_2D, destination, itype="h")
        self.assertTrue(return_new is None)
        self.assertTrue(return_old is None)

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_drop_image2D_true_should_return_equal_objects1(self):
        destination ='output.hdf'
        return_new = fu.drop_image(IMAGE_2D, destination, itype="h")
        return_old = oldfu.drop_image(IMAGE_2D, destination, itype="h")

        if return_new is not None   and  return_old is not None:
            self.assertTrue(return_new, return_old)

    @unittest.skip("it does not work under nosetests , anyway im not able to test it properly")
    def test_drop_image_true_should_return_equal_objects2(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.drop_image")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (imagename, destination) = argum[0]
        destination = 'output.hdf'
        return_new = fu.drop_image(imagename, destination, itype="h")
        return_old = oldfu.drop_image(imagename, destination, itype="h")

        if return_new is not None   and  return_old is not None:
            self.assertTrue(return_new, return_old)



class Test_even_angles(unittest.TestCase):
    """ I did not changed the 'phiEqpsi' params because it is used in 'even_angles_cd' I'll test it there"""
    def test_default_values(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 0.0], [102.5624397820863, 8.409807949596694, 257.43756021791364], [175.28184168449116, 11.903989804110001, 184.71815831550884], [234.81899085328783, 14.592550602033418, 125.1810091467122], [286.52113069039967, 16.865343252479008, 73.478869309600327], [332.89249973858841, 18.873236840047255, 27.107500261411587], [15.350997945238817, 20.69354123118596, 344.64900205476124], [54.760293521450905, 22.37214549396397, 305.23970647854912], [91.727719586672706, 23.938926249214624, 268.27228041332728], [126.67925988880424, 25.41462091516098, 233.32074011119573], [159.93126768874427, 26.81431796194859, 200.06873231125576], [191.72626852098327, 28.149400619646084, 168.27373147901676], [222.25501416086877, 29.428707176867, 137.74498583913123], [251.6707339535308, 30.659262305350033, 108.32926604646923], [280.09871166816117, 31.846758629170495, 79.901288331838828], [307.64293448395898, 32.995885473579534, 52.357065516041018], [334.39083847001103, 34.11056017878775, 25.609161529988967], [0.42677669506366556, 35.194095100409235, 359.57322330493639], [25.794606434997782, 36.249320882899376, 334.20539356500217], [50.559654291516139, 37.278679231322116, 309.44034570848385], [74.770232732225381, 38.2842939251198, 285.2297672677746], [98.468827134074971, 39.26802600175335, 261.53117286592499], [121.69303677671941, 40.231517219359155, 238.3069632232806], [144.4763293594925, 41.17622470375671, 215.52367064050748], [166.84865229059051, 42.10344887074584, 193.15134770940949], [188.83693262466142, 43.014356152771704, 171.16306737533864], [210.46548946865465, 43.909997664475156, 149.53451053134535], [231.75637688070145, 44.79132466007832, 128.24362311929855], [252.72967105963514, 45.65920143165515, 107.27032894036483], [273.40371249950607, 46.51441614768202, 86.596287500493929], [293.7953114483945, 47.357690020060026, 66.2046885516055], [313.91992324589262, 48.1896851042214, 46.080076754107381], [333.79179876604201, 49.01101097344977, 26.208201233957993], [353.42411415385686, 49.822230459852115, 6.5758858461431373], [12.839083235960516, 50.62386461673009, 347.16091676403948], [32.02805535274598, 51.41639702767674, 327.97194464725408], [51.011600859315614, 52.20027756457276, 308.98839914068435], [69.799586144482291, 52.975925678303284, 290.2004138555177], [88.401239698292727, 53.743733291363625, 271.59876030170722], [106.82521050148785, 54.50406734974836, 253.17478949851215], [125.07961980182155, 55.25727208199666, 234.92038019817846], [143.17210717208275, 56.00367100552329, 216.82789282791725], [161.10987160517593, 56.74356871403049, 198.89012839482405], [178.89970828662715, 57.4772524745885, 181.10029171337283], [196.54804158963, 58.20499365866951, 163.45195841037003], [214.06095475847701, 58.92704902784667, 145.93904524152299], [231.44421667996505, 59.64366189189109, 128.55578332003495], [248.70330608674968, 60.355063154503576, 111.29669391325035], [265.84343348975648, 61.06147225981934, 94.156566510243522], [282.86956109711195, 61.763098051052104, 77.130438902888045], [299.78642094339619, 62.46013955114206, 60.213579056603805], [316.59853142434207, 63.152786673995614, 43.40146857565793], [333.31021240759083, 63.84122087381428, 26.689787592409175], [349.92559906909207, 64.52561573907757, 10.074400930907927], [6.4586545866518463, 65.20613753694339, 353.54134541334815], [22.893181806532958, 65.88294571313848, 337.10681819346701], [39.242833985512988, 66.55619335181605, 320.75716601448698], [55.511124699098673, 67.22602759934011, 304.48887530090133], [71.701436996410379, 67.8925900555079, 288.29856300358961], [87.81703187337213, 68.55601713533103, 272.18296812662788], [103.86105612808187, 69.21644040415431, 256.13894387191817], [119.8365496554388, 69.87398688859322, 240.16345034456117], [135.74645223213611, 70.52877936550931, 224.25354776786389], [151.59360983787678, 71.18093663101206, 208.40639016212322], [167.38078055404094, 71.83057375127423, 192.61921944595906], [183.11064007694512, 72.47780229676785, 176.88935992305483], [198.78578687921549, 73.12273056137076, 161.21421312078451], [214.40874704959094, 73.76546376765336, 145.59125295040906], [229.98197883862355, 74.40610425953089, 130.01802116137645], [245.50787693521318, 75.04475168335667, 114.49212306478682], [260.98877649665752, 75.68150315843295, 99.011223503342478], [276.42695695288819, 76.31645343782941, 83.57304304711181], [291.82464560376934, 76.94969506032008, 68.175354396230659], [307.18402102672974, 77.58131849418093, 52.815978973270262], [322.50721631056541, 78.21141227352726, 37.492783689434589], [337.79632212996364, 78.84006312781455, 22.203677870036358], [353.0533896741494, 79.46735610507622, 6.9466103258505996], [8.2904334420228452, 80.09337468942728, 351.70956655797715], [23.489433915232105, 80.71820091332246, 336.5105660847679], [38.662340119797371, 81.34191546502161, 321.33765988020264], [53.811072086159413, 81.96459779168268, 306.18892791384064], [68.937523216861678, 82.58632619847424, 291.06247678313832], [84.043562570481001, 83.20717794407292, 275.95643742951904], [99.131037069892173, 83.82722933288893, 260.86896293010784], [114.20177364247999, 84.44655580434149, 245.79822635751998], [129.25758129949423, 85.06523201948858, 230.74241870050582], [144.30025316137389, 85.68333194529811, 215.69974683862608], [159.33156843554312, 86.30092893683496, 200.66843156445691], [174.35329435289955, 86.91809581762422, 185.64670564710048], [189.36718806897298, 87.53490495844152, 170.63281193102705], [204.37499853552671, 88.15142835477144, 155.62500146447326], [219.37846834820326, 88.7677377031675, 140.62153165179677], [234.37933557567774, 89.38390447674091, 125.62066442432229]]))

    def test_null_delta_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.even_angles(delta = 0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.even_angles(delta = 0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values_with_not_minus(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "", symmetry='c1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "", symmetry='c1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0.0, 0.0, 0.0], [102.5624397820863, 8.409807949596694, 0.0], [175.28184168449116, 11.903989804110001, 0.0], [234.81899085328783, 14.592550602033418, 0.0], [286.52113069039967, 16.865343252479008, 0.0], [332.89249973858841, 18.873236840047255, 0.0], [15.350997945238817, 20.69354123118596, 0.0], [54.760293521450905, 22.37214549396397, 0.0], [91.727719586672706, 23.938926249214624, 0.0], [126.67925988880424, 25.41462091516098, 0.0], [159.93126768874427, 26.81431796194859, 0.0], [191.72626852098327, 28.149400619646084, 0.0], [222.25501416086877, 29.428707176867, 0.0], [251.6707339535308, 30.659262305350033, 0.0], [280.09871166816117, 31.846758629170495, 0.0], [307.64293448395898, 32.995885473579534, 0.0], [334.39083847001103, 34.11056017878775, 0.0], [0.42677669506366556, 35.194095100409235, 0.0], [25.794606434997782, 36.249320882899376, 0.0], [50.559654291516139, 37.278679231322116, 0.0], [74.770232732225381, 38.2842939251198, 0.0], [98.468827134074971, 39.26802600175335, 0.0], [121.69303677671941, 40.231517219359155, 0.0], [144.4763293594925, 41.17622470375671, 0.0], [166.84865229059051, 42.10344887074584, 0.0], [188.83693262466142, 43.014356152771704, 0.0], [210.46548946865465, 43.909997664475156, 0.0], [231.75637688070145, 44.79132466007832, 0.0], [252.72967105963514, 45.65920143165515, 0.0], [273.40371249950607, 46.51441614768202, 0.0], [293.7953114483945, 47.357690020060026, 0.0], [313.91992324589262, 48.1896851042214, 0.0], [333.79179876604201, 49.01101097344977, 0.0], [353.42411415385686, 49.822230459852115, 0.0], [12.839083235960516, 50.62386461673009, 0.0], [32.02805535274598, 51.41639702767674, 0.0], [51.011600859315614, 52.20027756457276, 0.0], [69.799586144482291, 52.975925678303284, 0.0], [88.401239698292727, 53.743733291363625, 0.0], [106.82521050148785, 54.50406734974836, 0.0], [125.07961980182155, 55.25727208199666, 0.0], [143.17210717208275, 56.00367100552329, 0.0], [161.10987160517593, 56.74356871403049, 0.0], [178.89970828662715, 57.4772524745885, 0.0], [196.54804158963, 58.20499365866951, 0.0], [214.06095475847701, 58.92704902784667, 0.0], [231.44421667996505, 59.64366189189109, 0.0], [248.70330608674968, 60.355063154503576, 0.0], [265.84343348975648, 61.06147225981934, 0.0], [282.86956109711195, 61.763098051052104, 0.0], [299.78642094339619, 62.46013955114206, 0.0], [316.59853142434207, 63.152786673995614, 0.0], [333.31021240759083, 63.84122087381428, 0.0], [349.92559906909207, 64.52561573907757, 0.0], [6.4586545866518463, 65.20613753694339, 0.0], [22.893181806532958, 65.88294571313848, 0.0], [39.242833985512988, 66.55619335181605, 0.0], [55.511124699098673, 67.22602759934011, 0.0], [71.701436996410379, 67.8925900555079, 0.0], [87.81703187337213, 68.55601713533103, 0.0], [103.86105612808187, 69.21644040415431, 0.0], [119.8365496554388, 69.87398688859322, 0.0], [135.74645223213611, 70.52877936550931, 0.0], [151.59360983787678, 71.18093663101206, 0.0], [167.38078055404094, 71.83057375127423, 0.0], [183.11064007694512, 72.47780229676785, 0.0], [198.78578687921549, 73.12273056137076, 0.0], [214.40874704959094, 73.76546376765336, 0.0], [229.98197883862355, 74.40610425953089, 0.0], [245.50787693521318, 75.04475168335667, 0.0], [260.98877649665752, 75.68150315843295, 0.0], [276.42695695288819, 76.31645343782941, 0.0], [291.82464560376934, 76.94969506032008, 0.0], [307.18402102672974, 77.58131849418093, 0.0], [322.50721631056541, 78.21141227352726, 0.0], [337.79632212996364, 78.84006312781455, 0.0], [353.0533896741494, 79.46735610507622, 0.0], [8.2904334420228452, 80.09337468942728, 0.0], [23.489433915232105, 80.71820091332246, 0.0], [38.662340119797371, 81.34191546502161, 0.0], [53.811072086159413, 81.96459779168268, 0.0], [68.937523216861678, 82.58632619847424, 0.0], [84.043562570481001, 83.20717794407292, 0.0], [99.131037069892173, 83.82722933288893, 0.0], [114.20177364247999, 84.44655580434149, 0.0], [129.25758129949423, 85.06523201948858, 0.0], [144.30025316137389, 85.68333194529811, 0.0], [159.33156843554312, 86.30092893683496, 0.0], [174.35329435289955, 86.91809581762422, 0.0], [189.36718806897298, 87.53490495844152, 0.0], [204.37499853552671, 88.15142835477144, 0.0], [219.37846834820326, 88.7677377031675, 0.0], [234.37933557567774, 89.38390447674091, 0.0]]))

    def test_default_values_with_P_method_leads_to_deadlock(self):
        self.assertTrue(True)
        """
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEqpsi = "Minus", symmetry='c1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        """

    def test_with_D_symmetry(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='d1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='d1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 0.0], [234.81899085328783, 14.592550602033418, 125.1810091467122], [15.340997945238826, 20.69354123118596, 344.65900205476123], [54.750293521450914, 22.37214549396397, 305.24970647854911], [191.71626852098328, 28.149400619646084, 168.28373147901675], [222.24501416086878, 29.428707176867, 137.75498583913122], [251.66073395353081, 30.659262305350033, 108.33926604646922], [0.40677669506368375, 35.194095100409235, 359.59322330493637], [25.7746064349978, 36.249320882899376, 334.22539356500215], [50.539654291516158, 37.278679231322116, 309.46034570848383], [74.750232732225399, 38.2842939251198, 285.24976726777459], [188.81693262466143, 43.014356152771704, 171.18306737533862], [210.44548946865467, 43.909997664475156, 149.55451053134533], [231.73637688070147, 44.79132466007832, 128.26362311929853], [252.70967105963516, 45.65920143165515, 107.29032894036482], [12.809083235960543, 50.62386461673009, 347.19091676403946], [31.998055352746011, 51.41639702767674, 328.00194464725394], [50.981600859315648, 52.20027756457276, 309.01839914068432], [69.769586144482332, 52.975925678303284, 290.23041385551767], [88.371239698292783, 53.743733291363625, 271.62876030170719], [196.51804158963009, 58.20499365866951, 163.48195841036988], [214.03095475847709, 58.92704902784667, 145.96904524152291], [231.41421667996514, 59.64366189189109, 128.58578332003486], [248.67330608674976, 60.355063154503576, 111.32669391325021], [265.81343348975656, 61.06147225981934, 94.186566510243438], [6.4186545866519964, 65.20613753694339, 353.581345413348], [22.853181806533108, 65.88294571313848, 337.14681819346686], [39.202833985513138, 66.55619335181605, 320.79716601448683], [55.471124699098823, 67.22602759934011, 304.52887530090118], [71.661436996410529, 67.8925900555079, 288.33856300358946], [87.77703187337228, 68.55601713533103, 272.22296812662773], [183.07064007694527, 72.47780229676785, 176.92935992305479], [198.74578687921564, 73.12273056137076, 161.25421312078436], [214.36874704959109, 73.76546376765336, 145.63125295040891], [229.9419788386237, 74.40610425953089, 130.0580211613763], [245.46787693521333, 75.04475168335667, 114.53212306478667], [260.94877649665767, 75.68150315843295, 99.051223503342328], [8.2404334420230043, 80.09337468942728, 351.759566557977], [23.439433915232264, 80.71820091332246, 336.56056608476774], [38.61234011979753, 81.34191546502161, 321.38765988020248], [53.761072086159572, 81.96459779168268, 306.23892791384037], [68.887523216861837, 82.58632619847424, 291.11247678313816], [83.99356257048116, 83.20717794407292, 276.00643742951888], [189.31718806897314, 87.53490495844152, 170.68281193102689], [204.32499853552687, 88.15142835477144, 155.6750014644731], [219.32846834820342, 88.7677377031675, 140.67153165179661], [234.3293355756779, 89.38390447674091, 125.67066442432213]]))

    def test_with_S_symmetry(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sd1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sd1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 90.0, 90.0], [15.0, 90.0, 90.0], [30.0, 90.0, 90.0], [45.0, 90.0, 90.0], [60.0, 90.0, 90.0], [75.0, 90.0, 90.0]]))

    def test_with_S_symmetry_tooBig_theta1_value_error_msg(self):
        return_new = fu.even_angles(delta = 15.0, theta1=91.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sd1', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=91.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sd1', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 90.0, 90.0], [15.0, 90.0, 90.0], [30.0, 90.0, 90.0], [45.0, 90.0, 90.0], [60.0, 90.0, 90.0], [75.0, 90.0, 90.0]]))

    def test_with_S_invalid_symmetry_returns_UnboundLocalError_local_var_referenced_before_assignment(self):
        with self.assertRaises(UnboundLocalError) as cm_new:
            fu.even_angles(delta = 15.0, theta1=10.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sp1', ant = 0.0)
        with self.assertRaises(UnboundLocalError) as cm_old:
            oldfu.even_angles(delta = 15.0, theta1=10.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='sp1', ant = 0.0)
        self.assertEqual(cm_new.exception.message, "local variable 'k' referenced before assignment")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_S_invalid_symmetry_returns_ValueError_invalid_literal(self):
        with self.assertRaises(ValueError) as cm_new:
            fu.even_angles(delta = 15.0, theta1=10.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='soct', ant = 0.0)
        with self.assertRaises(ValueError) as cm_old:
            oldfu.even_angles(delta = 15.0, theta1=10.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='soct', ant = 0.0)
        self.assertEqual(cm_new.exception.message, "invalid literal for int() with base 10: 'ct'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_not_supported_symmetry_Warning_output_msg(self):
        return_new = fu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='oct', ant = 0.0)
        return_old = oldfu.even_angles(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEqpsi = "Minus", symmetry='oct', ant = 0.0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))



class Test_even_angles_cd(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.even_angles_cd()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.even_angles_cd()
        self.assertEqual(cm_new.exception.message, "even_angles_cd() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_null_delta_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.even_angles_cd(delta = 0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='Minus')
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.even_angles_cd(delta = 0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='Minus')
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values_leads_to_deadlock(self):
        self.assertTrue(True)
        """
        return_new = fu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEQpsi='Minus')
        return_old = oldfu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'P', phiEQpsi='Minus')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        """

    def test_with_S_method(self):
        return_new = fu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='Minus')
        return_old = oldfu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='Minus')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 0.0], [102.5624397820863, 8.409807949596694, 257.43756021791364], [175.28184168449116, 11.903989804110001, 184.71815831550884], [234.81899085328783, 14.592550602033418, 125.1810091467122], [286.52113069039967, 16.865343252479008, 73.478869309600327], [332.89249973858841, 18.873236840047255, 27.107500261411587], [15.350997945238817, 20.69354123118596, 344.64900205476124], [54.760293521450905, 22.37214549396397, 305.23970647854912], [91.727719586672706, 23.938926249214624, 268.27228041332728], [126.67925988880424, 25.41462091516098, 233.32074011119573], [159.93126768874427, 26.81431796194859, 200.06873231125576], [191.72626852098327, 28.149400619646084, 168.27373147901676], [222.25501416086877, 29.428707176867, 137.74498583913123], [251.6707339535308, 30.659262305350033, 108.32926604646923], [280.09871166816117, 31.846758629170495, 79.901288331838828], [307.64293448395898, 32.995885473579534, 52.357065516041018], [334.39083847001103, 34.11056017878775, 25.609161529988967], [0.42677669506366556, 35.194095100409235, 359.57322330493639], [25.794606434997782, 36.249320882899376, 334.20539356500217], [50.559654291516139, 37.278679231322116, 309.44034570848385], [74.770232732225381, 38.2842939251198, 285.2297672677746], [98.468827134074971, 39.26802600175335, 261.53117286592499], [121.69303677671941, 40.231517219359155, 238.3069632232806], [144.4763293594925, 41.17622470375671, 215.52367064050748], [166.84865229059051, 42.10344887074584, 193.15134770940949], [188.83693262466142, 43.014356152771704, 171.16306737533864], [210.46548946865465, 43.909997664475156, 149.53451053134535], [231.75637688070145, 44.79132466007832, 128.24362311929855], [252.72967105963514, 45.65920143165515, 107.27032894036483], [273.40371249950607, 46.51441614768202, 86.596287500493929], [293.7953114483945, 47.357690020060026, 66.2046885516055], [313.91992324589262, 48.1896851042214, 46.080076754107381], [333.79179876604201, 49.01101097344977, 26.208201233957993], [353.42411415385686, 49.822230459852115, 6.5758858461431373], [12.839083235960516, 50.62386461673009, 347.16091676403948], [32.02805535274598, 51.41639702767674, 327.97194464725408], [51.011600859315614, 52.20027756457276, 308.98839914068435], [69.799586144482291, 52.975925678303284, 290.2004138555177], [88.401239698292727, 53.743733291363625, 271.59876030170722], [106.82521050148785, 54.50406734974836, 253.17478949851215], [125.07961980182155, 55.25727208199666, 234.92038019817846], [143.17210717208275, 56.00367100552329, 216.82789282791725], [161.10987160517593, 56.74356871403049, 198.89012839482405], [178.89970828662715, 57.4772524745885, 181.10029171337283], [196.54804158963, 58.20499365866951, 163.45195841037003], [214.06095475847701, 58.92704902784667, 145.93904524152299], [231.44421667996505, 59.64366189189109, 128.55578332003495], [248.70330608674968, 60.355063154503576, 111.29669391325035], [265.84343348975648, 61.06147225981934, 94.156566510243522], [282.86956109711195, 61.763098051052104, 77.130438902888045], [299.78642094339619, 62.46013955114206, 60.213579056603805], [316.59853142434207, 63.152786673995614, 43.40146857565793], [333.31021240759083, 63.84122087381428, 26.689787592409175], [349.92559906909207, 64.52561573907757, 10.074400930907927], [6.4586545866518463, 65.20613753694339, 353.54134541334815], [22.893181806532958, 65.88294571313848, 337.10681819346701], [39.242833985512988, 66.55619335181605, 320.75716601448698], [55.511124699098673, 67.22602759934011, 304.48887530090133], [71.701436996410379, 67.8925900555079, 288.29856300358961], [87.81703187337213, 68.55601713533103, 272.18296812662788], [103.86105612808187, 69.21644040415431, 256.13894387191817], [119.8365496554388, 69.87398688859322, 240.16345034456117], [135.74645223213611, 70.52877936550931, 224.25354776786389], [151.59360983787678, 71.18093663101206, 208.40639016212322], [167.38078055404094, 71.83057375127423, 192.61921944595906], [183.11064007694512, 72.47780229676785, 176.88935992305483], [198.78578687921549, 73.12273056137076, 161.21421312078451], [214.40874704959094, 73.76546376765336, 145.59125295040906], [229.98197883862355, 74.40610425953089, 130.01802116137645], [245.50787693521318, 75.04475168335667, 114.49212306478682], [260.98877649665752, 75.68150315843295, 99.011223503342478], [276.42695695288819, 76.31645343782941, 83.57304304711181], [291.82464560376934, 76.94969506032008, 68.175354396230659], [307.18402102672974, 77.58131849418093, 52.815978973270262], [322.50721631056541, 78.21141227352726, 37.492783689434589], [337.79632212996364, 78.84006312781455, 22.203677870036358], [353.0533896741494, 79.46735610507622, 6.9466103258505996], [8.2904334420228452, 80.09337468942728, 351.70956655797715], [23.489433915232105, 80.71820091332246, 336.5105660847679], [38.662340119797371, 81.34191546502161, 321.33765988020264], [53.811072086159413, 81.96459779168268, 306.18892791384064], [68.937523216861678, 82.58632619847424, 291.06247678313832], [84.043562570481001, 83.20717794407292, 275.95643742951904], [99.131037069892173, 83.82722933288893, 260.86896293010784], [114.20177364247999, 84.44655580434149, 245.79822635751998], [129.25758129949423, 85.06523201948858, 230.74241870050582], [144.30025316137389, 85.68333194529811, 215.69974683862608], [159.33156843554312, 86.30092893683496, 200.66843156445691], [174.35329435289955, 86.91809581762422, 185.64670564710048], [189.36718806897298, 87.53490495844152, 170.63281193102705], [204.37499853552671, 88.15142835477144, 155.62500146447326], [219.37846834820326, 88.7677377031675, 140.62153165179677], [234.37933557567774, 89.38390447674091, 125.62066442432229]]))

    def test_with_S_method_with_not_Minus(self):
        return_new = fu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='not_Minus')
        return_old = oldfu.even_angles_cd(delta = 15.0, theta1=0.0, theta2=90.0, phi1=0.0, phi2=359.99, method = 'S', phiEQpsi='not_Minus')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0.0, 0.0, 0.0], [102.5624397820863, 8.409807949596694, 0.0], [175.28184168449116, 11.903989804110001, 0.0], [234.81899085328783, 14.592550602033418, 0.0], [286.52113069039967, 16.865343252479008, 0.0], [332.89249973858841, 18.873236840047255, 0.0], [15.350997945238817, 20.69354123118596, 0.0], [54.760293521450905, 22.37214549396397, 0.0], [91.727719586672706, 23.938926249214624, 0.0], [126.67925988880424, 25.41462091516098, 0.0], [159.93126768874427, 26.81431796194859, 0.0], [191.72626852098327, 28.149400619646084, 0.0], [222.25501416086877, 29.428707176867, 0.0], [251.6707339535308, 30.659262305350033, 0.0], [280.09871166816117, 31.846758629170495, 0.0], [307.64293448395898, 32.995885473579534, 0.0], [334.39083847001103, 34.11056017878775, 0.0], [0.42677669506366556, 35.194095100409235, 0.0], [25.794606434997782, 36.249320882899376, 0.0], [50.559654291516139, 37.278679231322116, 0.0], [74.770232732225381, 38.2842939251198, 0.0], [98.468827134074971, 39.26802600175335, 0.0], [121.69303677671941, 40.231517219359155, 0.0], [144.4763293594925, 41.17622470375671, 0.0], [166.84865229059051, 42.10344887074584, 0.0], [188.83693262466142, 43.014356152771704, 0.0], [210.46548946865465, 43.909997664475156, 0.0], [231.75637688070145, 44.79132466007832, 0.0], [252.72967105963514, 45.65920143165515, 0.0], [273.40371249950607, 46.51441614768202, 0.0], [293.7953114483945, 47.357690020060026, 0.0], [313.91992324589262, 48.1896851042214, 0.0], [333.79179876604201, 49.01101097344977, 0.0], [353.42411415385686, 49.822230459852115, 0.0], [12.839083235960516, 50.62386461673009, 0.0], [32.02805535274598, 51.41639702767674, 0.0], [51.011600859315614, 52.20027756457276, 0.0], [69.799586144482291, 52.975925678303284, 0.0], [88.401239698292727, 53.743733291363625, 0.0], [106.82521050148785, 54.50406734974836, 0.0], [125.07961980182155, 55.25727208199666, 0.0], [143.17210717208275, 56.00367100552329, 0.0], [161.10987160517593, 56.74356871403049, 0.0], [178.89970828662715, 57.4772524745885, 0.0], [196.54804158963, 58.20499365866951, 0.0], [214.06095475847701, 58.92704902784667, 0.0], [231.44421667996505, 59.64366189189109, 0.0], [248.70330608674968, 60.355063154503576, 0.0], [265.84343348975648, 61.06147225981934, 0.0], [282.86956109711195, 61.763098051052104, 0.0], [299.78642094339619, 62.46013955114206, 0.0], [316.59853142434207, 63.152786673995614, 0.0], [333.31021240759083, 63.84122087381428, 0.0], [349.92559906909207, 64.52561573907757, 0.0], [6.4586545866518463, 65.20613753694339, 0.0], [22.893181806532958, 65.88294571313848, 0.0], [39.242833985512988, 66.55619335181605, 0.0], [55.511124699098673, 67.22602759934011, 0.0], [71.701436996410379, 67.8925900555079, 0.0], [87.81703187337213, 68.55601713533103, 0.0], [103.86105612808187, 69.21644040415431, 0.0], [119.8365496554388, 69.87398688859322, 0.0], [135.74645223213611, 70.52877936550931, 0.0], [151.59360983787678, 71.18093663101206, 0.0], [167.38078055404094, 71.83057375127423, 0.0], [183.11064007694512, 72.47780229676785, 0.0], [198.78578687921549, 73.12273056137076, 0.0], [214.40874704959094, 73.76546376765336, 0.0], [229.98197883862355, 74.40610425953089, 0.0], [245.50787693521318, 75.04475168335667, 0.0], [260.98877649665752, 75.68150315843295, 0.0], [276.42695695288819, 76.31645343782941, 0.0], [291.82464560376934, 76.94969506032008, 0.0], [307.18402102672974, 77.58131849418093, 0.0], [322.50721631056541, 78.21141227352726, 0.0], [337.79632212996364, 78.84006312781455, 0.0], [353.0533896741494, 79.46735610507622, 0.0], [8.2904334420228452, 80.09337468942728, 0.0], [23.489433915232105, 80.71820091332246, 0.0], [38.662340119797371, 81.34191546502161, 0.0], [53.811072086159413, 81.96459779168268, 0.0], [68.937523216861678, 82.58632619847424, 0.0], [84.043562570481001, 83.20717794407292, 0.0], [99.131037069892173, 83.82722933288893, 0.0], [114.20177364247999, 84.44655580434149, 0.0], [129.25758129949423, 85.06523201948858, 0.0], [144.30025316137389, 85.68333194529811, 0.0], [159.33156843554312, 86.30092893683496, 0.0], [174.35329435289955, 86.91809581762422, 0.0], [189.36718806897298, 87.53490495844152, 0.0], [204.37499853552671, 88.15142835477144, 0.0], [219.37846834820326, 88.7677377031675, 0.0], [234.37933557567774, 89.38390447674091, 0.0]]))



class Test_gauss_edge(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.gauss_edge()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.gauss_edge()
        self.assertEqual(cm_new.exception.message, "gauss_edge() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.gauss_edge(None)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.gauss_edge(None)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_ndim'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_value_2Dreal_img(self):
        return_new =fu.gauss_edge(IMAGE_2D, kernel_size = 7, gauss_standard_dev =3)
        return_old =oldfu.gauss_edge(IMAGE_2D, kernel_size = 7, gauss_standard_dev =3)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_default_value_3Dreal_img(self):
        return_new =fu.gauss_edge(IMAGE_3D, kernel_size = 7, gauss_standard_dev =3)
        return_old =oldfu.gauss_edge(IMAGE_3D, kernel_size = 7, gauss_standard_dev =3)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_null_kernel_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.gauss_edge(IMAGE_2D, kernel_size = 0, gauss_standard_dev =3)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.gauss_edge(IMAGE_2D, kernel_size = 0, gauss_standard_dev =3)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_negative_kernel_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.gauss_edge(IMAGE_2D, kernel_size = -2, gauss_standard_dev =3)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.gauss_edge(IMAGE_2D, kernel_size = -2, gauss_standard_dev =3)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])



class Test_get_image(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_image()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_image()
        self.assertEqual(cm_new.exception.message, "get_image() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_returns_input_img(self):
        """ I do not insert all the params because in this case they are not used"""
        return_new = fu.get_image(IMAGE_2D)
        return_old = oldfu.get_image(IMAGE_2D)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_None_input_img_returns_new_EMData_with_default_size(self):
        """ I do not insert all the params because in this case they are not used"""
        nx = 0
        return_new = fu.get_image(None, nx = nx)
        return_old = oldfu.get_image(None, nx = nx)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertEqual(return_old.get_size(),return_new.get_size())
        self.assertEqual(return_new.get_size(), nx)

    def test_None_input_img_returns_new_EMData__with_given_size(self):
        """ I do not insert all the params because in this case they are not used"""
        nx,ny,nz=3,4,3
        return_new = fu.get_image(None, nx = nx, ny = ny, nz = nz)
        return_old = oldfu.get_image(None, nx = nx, ny = ny, nz = nz)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertEqual(return_old.get_size(),return_new.get_size())
        self.assertEqual(return_new.get_size(), nx*ny*nz)

    def test_invalid_path_returns_RuntimeError_FileAccessException(self):
        """ I do not insert all the params because in this case they are not used"""
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_image("image_not_here")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_image("image_not_here")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "FileAccessException")
        self.assertEqual(msg[3], "cannot access file ")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])



class Test_get_im(unittest.TestCase):
    img_list = get_real_data(dim=2)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_im(None)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_im(None)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute '__getitem__'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_im()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_im()
        self.assertEqual(cm_new.exception.message, "get_im() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_returns_first_img_of_a_list(self):
        return_new = fu.get_im(self.img_list, 0)
        return_old = oldfu.get_im(self.img_list, 0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.get_im(self.img_list, 10)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.get_im(self.img_list, 10)
        self.assertEqual(cm_new.exception.message, "tuple index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_image_data(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_image_data()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_image_data()
        self.assertEqual(cm_new.exception.message, "get_image_data() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_image_data(self):
        img,not_used = get_real_data(dim=2)
        return_new = fu.get_image_data(img)
        return_old = oldfu.get_image_data(img)
        self.assertTrue(numpy.array_equal(return_new, return_old))

    def test_NoneType_as_input_image_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        #fu.get_image_data(None)



class Test_get_symt(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_symt()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_symt()
        self.assertEqual(cm_new.exception.message, "get_symt() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_symt(self):
        self.assertTrue(True)
        return_new = fu.get_symt('c3')
        return_old = oldfu.get_symt('c3')

    def test_get_symt_with_invaliSym_returns_AttributeError_symclass_hasnot_attribute_symangles(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_symt('invaliSym')
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_symt('invaliSym')
        self.assertEqual(cm_new.exception.message, "'symclass' object has no attribute 'symangles'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_input_from_string(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_input_from_string()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_input_from_string()
        self.assertEqual(cm_new.exception.message, "get_input_from_string() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_input_from_string_integer_case(self):
        return_new =fu.get_input_from_string('5')
        return_old = oldfu.get_input_from_string('5')
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, [5])

    def test_get_input_from_string_negative_number_case(self):
        return_new =fu.get_input_from_string('-5')
        return_old = oldfu.get_input_from_string('-5')
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new,[-5])

    def test_get_input_from_string_float_case(self):
        return_new =fu.get_input_from_string('5.3')
        return_old = oldfu.get_input_from_string('5.3')
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new,[5.3])

    def test_get_input_from_string_invalid_case(self):
        with self.assertRaises(ValueError) as cm_new:
            fu.get_input_from_string('not_a_number')
        with self.assertRaises(ValueError) as cm_old:
            oldfu.get_input_from_string('not_a_number')
        self.assertEqual(cm_new.exception.message, "invalid literal for int() with base 10: 'not_a_number'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_input_from_string_list_of_values_number_case(self):
        return_new =fu.get_input_from_string('-5,3.11,5')
        return_old = oldfu.get_input_from_string('-5,3.11,5')
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, [-5, 3.11, 5])




class Test_model_circle(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_circle()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_circle()
        self.assertEqual(cm_new.exception.message, "model_circle() takes at least 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        """ values got from 'pickle files/utilities/utilities.model_circle'"""
        return_new = fu.model_circle(r = 145, nx = 352, ny = 352, nz =1)
        return_old = oldfu.model_circle(r = 145, nx = 352, ny = 352, nz =1)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r = 145, nx = 352, ny = 0, nz =1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r = 145, nx = 352, ny = 0, nz =1)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r = 145, nx = 0, ny = 252, nz =1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r = 145, nx = 0, ny = 252, nz =1)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_circle(r = 145, nx = 252, ny = 252, nz =0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_circle(r = 145, nx = 252, ny = 252, nz =0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_R_size_(self):
        return_new = fu.model_circle(r = 0, nx = 352, ny = 352, nz =1)
        return_old = oldfu.model_circle(r = 0, nx = 352, ny = 352, nz =1)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_negative_R_size_(self):
        return_new = fu.model_circle(r = -10, nx = 352, ny = 352, nz =1)
        return_old = oldfu.model_circle(r = -10, nx = 352, ny = 352, nz =1)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))



class Test_model_gauss(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_gauss()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_gauss()
        self.assertEqual(cm_new.exception.message, "model_gauss() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values(self):
        return_new = fu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        return_old = oldfu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_null_Xsigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(xsigma=0, nx=352, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        return_old = oldfu.model_gauss(xsigma=0, nx=352, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        self.assertTrue(numpy.allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True))

    def test_null_Ysigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=0, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        return_old = oldfu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=0, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        self.assertTrue(numpy.allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True))

    def test_null_Zsigma_returns_Nan_matrix(self):
        return_new = fu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=None, zsigma=0, xcenter=None, ycenter=None, zcenter=None)
        return_old = oldfu.model_gauss(xsigma=2, nx=352, ny=1, nz=1, ysigma=None, zsigma=0, xcenter=None, ycenter=None, zcenter=None)
        self.assertTrue(numpy.allclose(return_new.get_3dview(), return_old.get_3dview(), equal_nan=True))

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(xsigma=2, nx=352, ny=0, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(xsigma=2, nx=352, ny=0, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(xsigma=2, nx=0, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(xsigma=2, nx=0, ny=1, nz=1, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss(xsigma=2, nx=352, ny=1, nz=0, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss(xsigma=2, nx=352, ny=1, nz=0, ysigma=None, zsigma=None, xcenter=None, ycenter=None, zcenter=None)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])



class Test_model_gauss_noise(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_gauss_noise()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_gauss_noise()
        self.assertEqual(cm_new.exception.message, "model_gauss_noise() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_model_gauss_noise(self):
        """  This function creates random noise each time so arrays cannot be compared """
        return_new = fu.model_gauss_noise(sigma = 1, nx = 352, ny=1, nz=1)
        return_old = oldfu.model_gauss_noise(sigma =1, nx = 352, ny=1, nz=1)
        self.assertTrue(numpy.allclose(return_new.get_3dview(), return_old.get_3dview(), atol=1000))

    def test_null_sigma(self):
        return_new = fu.model_gauss_noise(sigma = 0.0, nx = 352, ny=1, nz=1)
        return_old = oldfu.model_gauss_noise(sigma =0.0, nx = 352, ny=1, nz=1)
        self.assertTrue(numpy.allclose(return_new.get_3dview(), return_old.get_3dview()))


    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma = 1, nx = 1, ny=0, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma = 1, nx = 1, ny=0, nz=1)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma = 1, nx = 0, ny=10, nz=1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma = 1, nx = 0, ny=10, nz=1)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_gauss_noise(sigma = 1, nx = 352, ny=1, nz=0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_gauss_noise(sigma = 1, nx = 352, ny=1, nz=0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])



class Test_model_blank(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.model_blank()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.model_blank()
        self.assertEqual(cm_new.exception.message, "model_blank() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values(self):
        return_new = fu.model_blank(nx = 100, ny=1, nz=1, bckg = 0.0)
        return_old = oldfu.model_blank(nx = 100, ny=1, nz=1, bckg = 0.0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_default_values_with_bckg(self):
        return_new = fu.model_blank(nx = 100, ny=1, nz=1, bckg = 10.0)
        return_old = oldfu.model_blank(nx = 100, ny=1, nz=1, bckg = 10.0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_null_X_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx = 0, ny=1, nz=1, bckg = 0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx = 0, ny=1, nz=1, bckg = 0.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Y_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx = 10, ny=0, nz=1, bckg = 0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx = 10, ny=0, nz=1, bckg = 0.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "y size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])

    def test_null_Z_size_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.model_blank(nx = 10, ny=1, nz=0, bckg = 0.0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.model_blank(nx = 10, ny=1, nz=0, bckg = 0.0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "z size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])



class Test_peak_search(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.peak_search()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.peak_search()
        self.assertEqual(cm_new.exception.message, "peak_search() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.peak_search(img, npeak = 3, invert = 1, print_screen = 0)
        return_old = oldfu.peak_search(img, npeak = 3, invert = 1, print_screen = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[6.156104564666748, 202.0, 219.0, 1.0, 26.0, 43.0], [5.888682842254639, 201.0, 232.0, 0.956559956073761, 25.0, 56.0], [5.810851573944092, 178.0, 207.0, 0.9439169764518738, 2.0, 31.0]]))

    def test_inverted_sort(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.peak_search(img, npeak = 3, invert = -1, print_screen = 0)
        return_old = oldfu.peak_search(img, npeak = 3, invert = -1, print_screen = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[4.196987152099609, 226.0, 116.0, 1.0, 50.0, -60.0], [4.188132286071777, 225.0, 118.0, 0.9978901743888855, 49.0, -58.0], [4.085667610168457, 231.0, 118.0, 0.9734762907028198, 55.0, -58.0]]))

    def test_null_npeak_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.peak_search(img, npeak = 0, invert = 1, print_screen = 0)
        return_old = oldfu.peak_search(img, npeak = 0, invert = 1, print_screen = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        """

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.peak_search(None, npeak = 3, invert = -1, print_screen = 0)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.peak_search(None, npeak = 3, invert = -1, print_screen = 0)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'peak_search'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_Empty_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        fu.peak_search(EMData(), npeak = 3, invert = -1, print_screen = 0)
        oldfu.peak_search(EMData(), npeak = 3, invert = -1, print_screen = 0)
        """


class Test_pad(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.pad()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.pad()
        self.assertEqual(cm_new.exception.message, "pad() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_returns_RuntimeError_ImageDimensionException_padder_cannot_be_lower_than_sizee_img(self):
        img, NotUsed = get_real_data(dim=2)
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(image_to_be_padded = img, new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(image_to_be_padded = img, new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(msg[1], "The size of the padded image cannot be lower than the input image size.")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_returns_RuntimeError_ImageDimensionException_offset_inconsistent(self):
        img, NotUsed = get_real_data(dim=2)
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "average", off_center_nx = 100, off_center_ny = 100, off_center_nz = 100)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background ="average", off_center_nx = 100, off_center_ny = 100, off_center_nz = 100)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(msg[1], "The offset inconsistent with the input image size. Solution: Change the offset parameters")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        return_old = oldfu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_default_values_with_circumference_bckg(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "circumference", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        return_old = oldfu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "circumference", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_default_values_with_unknown_bckg(self):
        img, NotUsed = get_real_data(dim=2)
        return_new = fu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "unknown", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        return_old = oldfu.pad(image_to_be_padded = img, new_nx = img.get_xsize()+10, new_ny = img.get_ysize()+10,	new_nz = img.get_zsize()+10, background = "unknown", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_NoneType_as_img_returns_RuntimeError_NullPointerException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(image_to_be_padded = None, new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(image_to_be_padded = None, new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NullPointerException")
        self.assertEqual(msg[1], "NULL input image")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_Empty_img_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.pad(image_to_be_padded = EMData(), new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.pad(image_to_be_padded = EMData(), new_nx = 10, new_ny = 1,	new_nz = 1, background = "average", off_center_nx = 0, off_center_ny = 0, off_center_nz = 0)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "x size <= 0")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_chooseformat(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.chooseformat()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.chooseformat()
        self.assertEqual(cm_new.exception.message, "chooseformat() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_exponential_number(self):
        return_new = fu.chooseformat(0.00000000000000000000000000003)
        return_old = fu.chooseformat(0.00000000000000000000000000003)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 'e')

    def test_float(self):
        return_new = fu.chooseformat(0.3)
        return_old = fu.chooseformat(0.3)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 'f')

    def test_typeError_float_argument_required(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.chooseformat('w')
        with self.assertRaises(TypeError) as cm_old:
            oldfu.chooseformat('w')
        self.assertEqual(cm_new.exception.message, "float argument required, not str")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_read_text_row(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_text_row()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_text_row()
        self.assertEqual(cm_new.exception.message, "read_text_row() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_file_not_found(self):
        with self.assertRaises(IOError) as cm_new:
            fu.read_text_row("no_file.txt")
        with self.assertRaises(IOError) as cm_old:
            oldfu.read_text_row("no_file.txt")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)

    def test_default_case(self):
        partids = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D/main001/this_iteration_index_keep_images.txt')
        return_new = fu.read_text_row(partids)
        return_old = oldfu.read_text_row(partids)
        self.assertTrue(return_new == return_old)
        self.assertTrue(numpy.array_equal(return_new


class Test_write_text_row(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_text_row()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_text_row()
        self.assertEqual(cm_new.exception.message, "write_text_row() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_write_text_row(self):
        data=[[1,1,1,1],[2,2,2,2],[3,3,3,3]]
        f=path.join(ABSOLUTE_PATH, "filefu.txt")
        fold=path.join(ABSOLUTE_PATH, "filefold.txt")
        fu.write_text_row(data, f)
        oldfu.write_text_row(data, fold)
        self.assertEqual(returns_values_in_file(f),returns_values_in_file(fold))
        remove_list_of_file([f,fold])



class Test_read_text_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_text_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_text_file()
        self.assertEqual(cm_new.exception.message, "read_text_file() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_file_not_found(self):
        with self.assertRaises(IOError) as cm_new:
            fu.read_text_file("no_file.txt")
        with self.assertRaises(IOError) as cm_old:
            oldfu.read_text_file("no_file.txt")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)

    def test_default_case(self):
        partids = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D/main001/this_iteration_index_keep_images.txt')
        return_new = fu.read_text_file(partids)
        return_old = oldfu.read_text_file(partids)
        self.assertTrue(return_new == return_old)
        self.assertTrue(numpy.array_equal(return_new, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92]))



class Test_write_text_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_text_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_text_file()
        self.assertEqual(cm_new.exception.message, "write_text_file() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_write_text_row(self):
        data=[[1,1,1,1],[2,2,2,2],[3,3,3,3]]
        f=path.join(ABSOLUTE_PATH, "filefu.txt")
        fold=path.join(ABSOLUTE_PATH, "filefold.txt")
        fu.write_text_file(data, f)
        oldfu.write_text_file(data, fold)
        self.assertEqual(returns_values_in_file(f),returns_values_in_file(fold))
        remove_list_of_file([f,fold])



class Test_rotate_shift_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotate_shift_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotate_shift_params()
        self.assertEqual(cm_new.exception.message, "rotate_shift_params() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_rotate_shift_params(self):
        paramsin = [[0.25,1.25,0.5]]
        transf  = [0.25, 1.25, 0.5]
        return_new = fu.rotate_shift_params(paramsin, transf)
        return_old = oldfu.rotate_shift_params(paramsin, transf)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 1.2820115403810843e-08]]))

    def test_rotate_shift_params2(self):
        paramsin = [[0.25,1.25,0,0,0.5]]
        transf  = [0.25, 1.25, 0.5,.25, 1.25, 0.5]
        return_new = fu.rotate_shift_params(paramsin, transf)
        return_old = oldfu.rotate_shift_params(paramsin, transf)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0.0, 0.0, 359.50000008558703, 0.23908232152462006, 1.752134084701538]]))

    def test_less_transf_params_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25,1.25,0,0,0.5]]
        transf  = [0.25, 1.25, 0.5]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin, transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin, transf)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_less_transf_params2_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25,1.25,0]]
        transf  = [0.25, 1.25]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin, transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin, transf)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_less_paramsin_params_returns_IndexError_list_index_out_of_range(self):
        paramsin = [[0.25]]
        transf  = [0.25, 1.25, 0.5]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_shift_params(paramsin, transf)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_shift_params(paramsin, transf)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_reshape_1d(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.reshape_1d'"""
    input_obj =  [0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.9984012789768186, 0.9914368216668327, 0.9878146959140469, 0.9881703862020976, 0.982612488476065, 0.9789244545589472, 0.9747235387045814, 0.9622078763024153, 0.9406924390622574, 0.9300175631598249, 0.8976592373307525, 0.8474726574046705, 0.7942852016327994, 0.8065378605172119, 0.7981892234519837, 0.7980760586172797, 0.7834690256016978, 0.7732854546260584, 0.759479194158529, 0.7302534821351329, 0.735749496632646, 0.7505776906379105, 0.7832464000713297, 0.799354031902547, 0.7829602489012508, 0.7467401462021503, 0.7216741559492451, 0.7573457050470969, 0.7735999645280006, 0.7360206933666649, 0.7074315960216845, 0.6838418535731124, 0.6814918195422979, 0.6604400166044002, 0.6276571502978614, 0.5967298971705947, 0.5924074015096022, 0.6113438607798904, 0.5589193571016572, 0.4169423800381157, 0.33547900293137645, 0.43509084125025116, 0.5143369854093631, 0.4505998230268216, 0.3017867022488365, 0.29393725698240897, 0.3395667841020214, 0.34234494237984336, 0.31531353786458843, 0.3120432449453534, 0.2864549161874622, 0.23450693792899116, 0.20246505335938672, 0.22577560951692183, 0.21569461751208094, 0.21511112191209886, 0.2091532904083915, 0.18334792795777813, 0.1954858454475899, 0.21231959169076153, 0.20199531221828237, 0.21190821007216915, 0.21429959199533707, 0.18398541329970813, 0.20171364365585326, 0.22936964071672247, 0.20705888033218262, 0.2310040684684463, 0.23322049365816364, 0.25365125929269, 0.2687457179832018, 0.252646215129461, 0.24715492782090853, 0.23387479872417344, 0.23315205998051616, 0.2312238364934745, 0.21601984544387764, 0.23373779370670353, 0.21445443670567088, 0.210741700365644, 0.2089851778417197, 0.19984641965828376, 0.18358602895051426, 0.16600398773363803, 0.14936583739921497, 0.14684159823845128, 0.14034187449397328, 0.11227281827686696, 0.09549423222286733, 0.09699040681889236, 0.08368778954783127, 0.07285201615715135, 0.06609239822815444, 0.06712766581830018, 0.06571178890380885, 0.05876124933827422, 0.047775744976412994, 0.04517043724966535, 0.04086780062968338, 0.035162664167093884, 0.02501739454518543, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    length_current = 2* len(input_obj)
    length_interpolated = 4* len(input_obj)

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.reshape_1d()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.reshape_1d()
        self.assertEqual(cm_new.exception.message, "reshape_1d() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_null_list_as_input_obj(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.reshape_1d(input_object = [], length_current=self.length_current, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.reshape_1d(input_object = [], length_current=self.length_current, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        return_new = fu.reshape_1d(input_object = self.input_obj, length_current=self.length_current, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        return_old = oldfu.reshape_1d(input_object = self.input_obj , length_current=self.length_current, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.9987006394884093, 0.9984012789768186, 0.9949190503218257, 0.9914368216668327, 0.9896257587904398, 0.9878146959140469, 0.9879925410580723, 0.9881703862020976, 0.9853914373390813, 0.982612488476065, 0.980768471517506, 0.9789244545589472, 0.9768239966317642, 0.9747235387045814, 0.9684657075034984, 0.9622078763024153, 0.9514501576823364, 0.9406924390622574, 0.9353550011110412, 0.9300175631598249, 0.9138384002452886, 0.8976592373307525, 0.8725659473677114, 0.8474726574046705, 0.8208789295187349, 0.7942852016327994, 0.8004115310750056, 0.8065378605172119, 0.8023635419845978, 0.7981892234519837, 0.7981326410346317, 0.7980760586172797, 0.7907725421094888, 0.7834690256016978, 0.7783772401138781, 0.7732854546260584, 0.7663823243922937, 0.759479194158529, 0.744866338146831, 0.7302534821351329, 0.7330014893838894, 0.735749496632646, 0.7431635936352783, 0.7505776906379105, 0.7669120453546201, 0.7832464000713297, 0.7913002159869383, 0.799354031902547, 0.7911571404018989, 0.7829602489012508, 0.7648501975517006, 0.7467401462021503, 0.7342071510756978, 0.7216741559492451, 0.7395099304981709, 0.7573457050470969, 0.7654728347875488, 0.7735999645280006, 0.7548103289473327, 0.7360206933666649, 0.7217261446941747, 0.7074315960216845, 0.6956367247973985, 0.6838418535731124, 0.6826668365577051, 0.6814918195422979, 0.670965918073349, 0.6604400166044002, 0.6440485834511308, 0.6276571502978614, 0.612193523734228, 0.5967298971705947, 0.5945686493400985, 0.5924074015096022, 0.6018756311447464, 0.6113438607798904, 0.5851316089407739, 0.5589193571016572, 0.48793086856988643, 0.4169423800381157, 0.37621069148474606, 0.33547900293137645, 0.3852849220908138, 0.43509084125025116, 0.47471391332980717, 0.5143369854093631, 0.48246840421809234, 0.4505998230268216, 0.37619326263782904, 0.3017867022488365, 0.2978619796156228, 0.29393725698240897, 0.3167520205422152, 0.3395667841020214, 0.3409558632409324, 0.34234494237984336, 0.3288292401222159, 0.31531353786458843, 0.3136783914049709, 0.3120432449453534, 0.2992490805664078, 0.2864549161874622, 0.2604809270582267, 0.23450693792899116, 0.21848599564418894, 0.20246505335938672, 0.2141203314381543, 0.22577560951692183, 0.22073511351450137, 0.21569461751208094, 0.21540286971208988, 0.21511112191209886, 0.2121322061602452, 0.2091532904083915, 0.19625060918308482, 0.18334792795777813, 0.18941688670268403, 0.1954858454475899, 0.20390271856917572, 0.21231959169076153, 0.20715745195452195, 0.20199531221828237, 0.20695176114522576, 0.21190821007216915, 0.2131039010337531, 0.21429959199533707, 0.1991425026475226, 0.18398541329970813, 0.1928495284777807, 0.20171364365585326, 0.21554164218628785, 0.22936964071672247, 0.21821426052445253, 0.20705888033218262, 0.21903147440031445, 0.2310040684684463, 0.23211228106330495, 0.23322049365816364, 0.2434358764754268, 0.25365125929269, 0.2611984886379459, 0.2687457179832018, 0.2606959665563314, 0.252646215129461, 0.24990057147518477, 0.24715492782090853, 0.24051486327254099, 0.23387479872417344, 0.23351342935234481, 0.23315205998051616, 0.23218794823699535, 0.2312238364934745, 0.22362184096867607, 0.21601984544387764, 0.2248788195752906, 0.23373779370670353, 0.22409611520618722, 0.21445443670567088, 0.21259806853565744, 0.210741700365644, 0.20986343910368183, 0.2089851778417197, 0.2044157987500017, 0.19984641965828376, 0.191716224304399, 0.18358602895051426, 0.17479500834207615, 0.16600398773363803, 0.1576849125664265, 0.14936583739921497, 0.14810371781883314, 0.14684159823845128, 0.14359173636621228, 0.14034187449397328, 0.12630734638542013, 0.11227281827686696, 0.10388352524986715, 0.09549423222286733, 0.09624231952087985, 0.09699040681889236, 0.0903390981833618, 0.08368778954783127, 0.0782699028524913, 0.07285201615715135, 0.0694722071926529, 0.06609239822815444, 0.06661003202322731, 0.06712766581830018, 0.06641972736105452, 0.06571178890380885, 0.06223651912104154, 0.05876124933827422, 0.05326849715734361, 0.047775744976412994, 0.04647309111303917, 0.04517043724966535, 0.04301911893967436, 0.04086780062968338, 0.03801523239838863, 0.035162664167093884, 0.030090029356139657, 0.02501739454518543, 0.012508697272592715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]))

    def test_null_length_interpolated_pixel_sizes_identical_error_msg(self):
        return_new = fu.reshape_1d(input_object = self.input_obj, length_current=self.length_current, length_interpolated=0, Pixel_size_current = 0.5, Pixel_size_interpolated = 0.5)
        return_old = oldfu.reshape_1d(input_object = self.input_obj, length_current=self.length_current, length_interpolated=0, Pixel_size_current = 0.5, Pixel_size_interpolated = 0.5)
        self.assertEqual(return_new,[])
        self.assertEqual(return_old, [])

    def test_null_length_current(self):
        return_new = fu.reshape_1d(input_object = self.input_obj, length_current=0, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        return_old = oldfu.reshape_1d(input_object = self.input_obj, length_current=0, length_interpolated=self.length_interpolated, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.9988503197442047, 0.9987006394884093, 0.9985509592326139, 0.9984012789768186, 0.9966601646493222, 0.9949190503218257, 0.9931779359943291, 0.9914368216668327, 0.9905312902286363, 0.9896257587904398, 0.9887202273522433, 0.9878146959140469, 0.9879036184860596, 0.9879925410580723, 0.988081463630085, 0.9881703862020976, 0.9867809117705895, 0.9853914373390813, 0.9840019629075731, 0.982612488476065, 0.9816904799967855, 0.980768471517506, 0.9798464630382266, 0.9789244545589472, 0.9778742255953558, 0.9768239966317642, 0.9757737676681728, 0.9747235387045814, 0.9715946231040399, 0.9684657075034984, 0.9653367919029568, 0.9622078763024153, 0.9568290169923759, 0.9514501576823364, 0.9460712983722969, 0.9406924390622574, 0.9380237200866492, 0.9353550011110412, 0.932686282135433, 0.9300175631598249, 0.9219279817025567, 0.9138384002452886, 0.9057488187880206, 0.8976592373307525, 0.885112592349232, 0.8725659473677114, 0.860019302386191, 0.8474726574046705, 0.8341757934617027, 0.8208789295187349, 0.8075820655757672, 0.7942852016327994, 0.7973483663539025, 0.8004115310750056, 0.8034746957961088, 0.8065378605172119, 0.8044507012509048, 0.8023635419845978, 0.8002763827182908, 0.7981892234519837, 0.7981609322433078, 0.7981326410346317, 0.7981043498259557, 0.7980760586172797, 0.7944243003633842, 0.7907725421094888, 0.7871207838555934, 0.7834690256016978, 0.7809231328577879, 0.7783772401138781, 0.7758313473699683, 0.7732854546260584, 0.7698338895091761, 0.7663823243922937, 0.7629307592754113, 0.759479194158529, 0.75217276615268, 0.744866338146831, 0.7375599101409819, 0.7302534821351329, 0.7316274857595111, 0.7330014893838894, 0.7343754930082678, 0.735749496632646, 0.7394565451339621, 0.7431635936352783, 0.7468706421365944, 0.7505776906379105, 0.7587448679962653, 0.7669120453546201, 0.7750792227129749, 0.7832464000713297, 0.7872733080291341, 0.7913002159869383, 0.7953271239447426, 0.799354031902547, 0.7952555861522229, 0.7911571404018989, 0.7870586946515749, 0.7829602489012508, 0.7739052232264757, 0.7648501975517006, 0.7557951718769255, 0.7467401462021503, 0.7404736486389241, 0.7342071510756978, 0.7279406535124714, 0.7216741559492451, 0.7305920432237081, 0.7395099304981709, 0.7484278177726339, 0.7573457050470969, 0.7614092699173228, 0.7654728347875488, 0.7695363996577747, 0.7735999645280006, 0.7642051467376667, 0.7548103289473327, 0.7454155111569988, 0.7360206933666649, 0.7288734190304198, 0.7217261446941747, 0.7145788703579296, 0.7074315960216845, 0.7015341604095415, 0.6956367247973985, 0.6897392891852554, 0.6838418535731124, 0.6832543450654088, 0.6826668365577051, 0.6820793280500015, 0.6814918195422979, 0.6762288688078235, 0.670965918073349, 0.6657029673388746, 0.6604400166044002, 0.6522443000277656, 0.6440485834511308, 0.635852866874496, 0.6276571502978614, 0.6199253370160447, 0.612193523734228, 0.6044617104524114, 0.5967298971705947, 0.5956492732553466, 0.5945686493400985, 0.5934880254248504, 0.5924074015096022, 0.5971415163271743, 0.6018756311447464, 0.6066097459623184, 0.6113438607798904, 0.5982377348603322, 0.5851316089407739, 0.5720254830212155, 0.5589193571016572, 0.5234251128357719, 0.48793086856988643, 0.45243662430400106, 0.4169423800381157, 0.39657653576143087, 0.37621069148474606, 0.35584484720806125, 0.33547900293137645, 0.3603819625110951, 0.3852849220908138, 0.4101878816705325, 0.43509084125025116, 0.45490237729002914, 0.47471391332980717, 0.49452544936958515, 0.5143369854093631, 0.49840269481372773, 0.48246840421809234, 0.466534113622457, 0.4505998230268216, 0.41339654283232535, 0.37619326263782904, 0.3389899824433328, 0.3017867022488365, 0.29982434093222965, 0.2978619796156228, 0.29589961829901584, 0.29393725698240897, 0.3053446387623121, 0.3167520205422152, 0.32815940232211827, 0.3395667841020214, 0.3402613236714769, 0.3409558632409324, 0.3416504028103879, 0.34234494237984336, 0.33558709125102965, 0.3288292401222159, 0.32207138899340215, 0.31531353786458843, 0.3144959646347797, 0.3136783914049709, 0.31286081817516215, 0.3120432449453534, 0.30564616275588063, 0.2992490805664078, 0.292851998376935, 0.2864549161874622, 0.27346792162284445, 0.2604809270582267, 0.24749393249360893, 0.23450693792899116, 0.22649646678659005, 0.21848599564418894, 0.21047552450178783, 0.20246505335938672, 0.2082926923987705, 0.2141203314381543, 0.21994797047753806, 0.22577560951692183, 0.2232553615157116, 0.22073511351450137, 0.21821486551329117, 0.21569461751208094, 0.21554874361208542, 0.21540286971208988, 0.21525699581209437, 0.21511112191209886, 0.21362166403617203, 0.2121322061602452, 0.21064274828431834, 0.2091532904083915, 0.20270194979573816, 0.19625060918308482, 0.18979926857043147, 0.18334792795777813, 0.18638240733023106, 0.18941688670268403, 0.19245136607513696, 0.1954858454475899, 0.1996942820083828, 0.20390271856917572, 0.20811115512996864, 0.21231959169076153, 0.20973852182264174, 0.20715745195452195, 0.20457638208640216, 0.20199531221828237, 0.20447353668175405, 0.20695176114522576, 0.20942998560869747, 0.21190821007216915, 0.21250605555296112, 0.2131039010337531, 0.2137017465145451, 0.21429959199533707, 0.20672104732142985, 0.1991425026475226, 0.19156395797361536, 0.18398541329970813, 0.18841747088874441, 0.1928495284777807, 0.19728158606681698, 0.20171364365585326, 0.20862764292107056, 0.21554164218628785, 0.22245564145150518, 0.22936964071672247, 0.22379195062058752, 0.21821426052445253, 0.21263657042831757, 0.20705888033218262, 0.21304517736624853, 0.21903147440031445, 0.22501777143438037, 0.2310040684684463, 0.23155817476587562, 0.23211228106330495, 0.2326663873607343, 0.23322049365816364, 0.23832818506679523, 0.2434358764754268, 0.2485435678840584, 0.25365125929269, 0.25742487396531794, 0.2611984886379459, 0.26497210331057386, 0.2687457179832018, 0.2647208422697666, 0.2606959665563314, 0.2566710908428962, 0.252646215129461, 0.2512733933023229, 0.24990057147518477, 0.24852774964804664, 0.24715492782090853, 0.24383489554672477, 0.24051486327254099, 0.2371948309983572, 0.23387479872417344, 0.23369411403825913, 0.23351342935234481, 0.23333274466643047, 0.23315205998051616, 0.23267000410875574, 0.23218794823699535, 0.23170589236523492, 0.2312238364934745, 0.22742283873107527, 0.22362184096867607, 0.21982084320627687, 0.21601984544387764, 0.22044933250958412, 0.2248788195752906, 0.22930830664099705, 0.23373779370670353, 0.22891695445644536, 0.22409611520618722, 0.21927527595592905, 0.21445443670567088, 0.21352625262066416, 0.21259806853565744, 0.2116698844506507, 0.210741700365644, 0.2103025697346629, 0.20986343910368183, 0.20942430847270077, 0.2089851778417197, 0.2067004882958607, 0.2044157987500017, 0.20213110920414273, 0.19984641965828376, 0.19578132198134138, 0.191716224304399, 0.18765112662745664, 0.18358602895051426, 0.1791905186462952, 0.17479500834207615, 0.1703994980378571, 0.16600398773363803, 0.16184445015003227, 0.1576849125664265, 0.15352537498282073, 0.14936583739921497, 0.14873477760902404, 0.14810371781883314, 0.1474726580286422, 0.14684159823845128, 0.1452166673023318, 0.14359173636621228, 0.14196680543009277, 0.14034187449397328, 0.1333246104396967, 0.12630734638542013, 0.11929008233114353, 0.11227281827686696, 0.10807817176336705, 0.10388352524986715, 0.09968887873636724, 0.09549423222286733, 0.09586827587187359, 0.09624231952087985, 0.0966163631698861, 0.09699040681889236, 0.09366475250112709, 0.0903390981833618, 0.08701344386559653, 0.08368778954783127, 0.08097884620016128, 0.0782699028524913, 0.07556095950482133, 0.07285201615715135, 0.07116211167490212, 0.0694722071926529, 0.06778230271040367, 0.06609239822815444, 0.06635121512569087, 0.06661003202322731, 0.06686884892076375, 0.06712766581830018, 0.06677369658967736, 0.06641972736105452, 0.06606575813243168, 0.06571178890380885, 0.06397415401242519, 0.06223651912104154, 0.06049888422965788, 0.05876124933827422, 0.05601487324780892, 0.05326849715734361, 0.0505221210668783, 0.047775744976412994, 0.047124418044726085, 0.04647309111303917, 0.04582176418135226, 0.04517043724966535, 0.044094778094669856, 0.04301911893967436, 0.04194345978467887, 0.04086780062968338, 0.039441516514036004, 0.03801523239838863, 0.03658894828274126, 0.035162664167093884, 0.03262634676161677, 0.030090029356139657, 0.027553711950662543, 0.02501739454518543, 0.018763045908889074, 0.012508697272592715, 0.006254348636296356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]))

    def test_all_the_values_are_null_or_empty_list_error_msg(self):
        return_new = fu.reshape_1d(input_object = [], length_current=0, length_interpolated=0, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        return_old = oldfu.reshape_1d(input_object = [], length_current=0, length_interpolated=0, Pixel_size_current = 0., Pixel_size_interpolated = 0.)
        self.assertEqual(return_new, [])
        self.assertEqual(return_old, [])

    def test_invalid_pixel_sizes_combination_in_null_value_as_length_interpolated_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.reshape_1d(input_object = self.input_obj, length_current=self.length_current, length_interpolated=0, Pixel_size_current = 0.3, Pixel_size_interpolated = 0.)
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.reshape_1d(input_object = self.input_obj, length_current=self.length_current, length_interpolated=0, Pixel_size_current = 0.3, Pixel_size_interpolated = 0.)
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


@unittest.skip("I m not sure how test them")
class Test_estimate_3D_center_MPI(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.estimate_3D_center_MPI'"""
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.estimate_3D_center_MPI"))

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.estimate_3D_center_MPI()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.estimate_3D_center_MPI()
        self.assertEqual(cm_new.exception.message, "estimate_3D_center_MPI() takes at least 5 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_myid_not_identical_to_main_node(self):
        (data, nima, myid, number_of_proc, main_node) = self.argum[0]
        return_new = fu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        return_old = oldfu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        self.assertTrue(numpy.array_equal(return_old, [0.0, 0.0, 0.0, 0.0, 0.0]))
        self.assertTrue(numpy.array_equal(return_new, [0.0, 0.0, 0.0, 0.0, 0.0]))

    def test_myid_not_identical_to_main_node1(self):
        (data, nima, myid, number_of_proc, main_node) = self.argum[0]
        main_node=myid
        return_new = fu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        return_old = oldfu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        self.assertTrue(numpy.array_equal(return_old, [0.0, 0.0, 0.0, 0.0, 0.0]))
        self.assertTrue(numpy.array_equal(return_new, [0.0, 0.0, 0.0, 0.0, 0.0]))



class Test_rotate_3D_shift(unittest.TestCase):
    """ values got from 'pickle files/utilities/utilities.rotate_3D_shift'"""
    argum =get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.rotate_3D_shift"))
    (data, notUsed) = argum[0]
    shift3d = [10.1, 0.2, 10.0]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotate_3D_shift()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotate_3D_shift()
        self.assertEqual(cm_new.exception.message, "rotate_3D_shift() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_wrong_image(self):
        data,not_used= get_real_data(dim = 3)
        with self.assertRaises(RuntimeError) as cm_new:
            fu.rotate_3D_shift([data], self.shift3d)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.rotate_3D_shift([data], self.shift3d)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_Nonetype_image(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.rotate_3D_shift([None], self.shift3d)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.rotate_3D_shift([None], self.shift3d)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        fu_data = deepcopy(self.data)
        oldfu_data = deepcopy(self.data)
        return_new = fu.rotate_3D_shift(fu_data, self.shift3d)
        return_old = oldfu.rotate_3D_shift(oldfu_data, self.shift3d)
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)
        for i in range(len(fu_data)):
            self.assertTrue(numpy.array_equal(fu_data[i].get_attr('xform.projection'), oldfu_data[i].get_attr('xform.projection')))
            self.assertFalse(numpy.array_equal(self.data[i].get_attr('xform.projection'), fu_data[i].get_attr('xform.projection')))

    def test_returns_IndexError_list_index_out_of_range(self):
        shift3d=[0,0.1]
        with self.assertRaises(IndexError) as cm_new:
            fu.rotate_3D_shift(self.data, shift3d)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.rotate_3D_shift(self.data, shift3d)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_set_arb_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_arb_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_arb_params()
        self.assertEqual(cm_new.exception.message, "set_arb_params() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_1Attr(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = "lowpassfilter"
        params = "0.50"
        return_new = fu.set_arb_params(fu_img,[params],[par_str])
        return_old = oldfu.set_arb_params(oldfu_img,[params],[par_str])
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)
        self.assertEqual(fu_img.get_attr(par_str), fu_img.get_attr(par_str))
        self.assertEqual(fu_img.get_attr(par_str),params)

    def test_with_ListAttr(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = ["lowpassfilter","fake_par"]
        params = ["0.50","3"]
        return_new = fu.set_arb_params(fu_img,params,par_str)
        return_old = oldfu.set_arb_params(oldfu_img,params,par_str)
        self.assertEqual(return_new, None)
        self.assertEqual(return_old, None)
        self.assertEqual(fu_img.get_attr(par_str[0]), fu_img.get_attr(par_str[0]))
        self.assertEqual(fu_img.get_attr(par_str[1]), fu_img.get_attr(par_str[1]))
        self.assertEqual(fu_img.get_attr(par_str[0]),params[0])
        self.assertEqual(fu_img.get_attr(par_str[1]), params[1])

    def test_with_BadListAttr_returns_IndexError_list_index_out_of_range(self):
        fu_img = EMData()
        oldfu_img = EMData()
        par_str = ["lowpassfilter","fake_par"]
        params = ["0.50"]
        with self.assertRaises(IndexError) as cm_new:
            fu.set_arb_params(fu_img,params,par_str)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_arb_params(oldfu_img,params,par_str)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_arb_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_arb_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_arb_params()
        self.assertEqual(cm_new.exception.message, "get_arb_params() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_1Attr(self):
        return_new = fu.get_arb_params(EMData(),["datatype"])
        return_old = oldfu.get_arb_params(EMData(),["datatype"])
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, [EMData().get_attr("datatype")])

    def test_with_ListAttr(self):
        list_of_attribute = ["datatype", "is_complex_ri"]
        return_new = fu.get_arb_params(EMData(),list_of_attribute)
        return_old = oldfu.get_arb_params(EMData(),list_of_attribute)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertEqual(return_new[0], EMData().get_attr("datatype"))
        self.assertEqual(return_new[1], EMData().get_attr("is_complex_ri"))

    def test_notValid_params_returns_RuntimeError_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_arb_params(EMData(),["invalid_param"])
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_arb_params(EMData(),["invalid_param"])
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_reduce_EMData_to_root(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.reduce_EMData_to_root()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.reduce_EMData_to_root()
        self.assertEqual(cm_new.exception.message, "reduce_EMData_to_root() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.reduce_EMData_to_root(None, myid=74, main_node=0, comm = -1)
        return_old = oldfu.reduce_EMData_to_root(None, myid=74, main_node=0, comm = -1)
        self.assertEqual(return_new, return_old)
        """

    def test_default_values(self):
        data = deepcopy(IMAGE_2D_REFERENCE)
        return_new = fu.reduce_EMData_to_root(data, myid=74, main_node=0, comm = -1)
        return_old = oldfu.reduce_EMData_to_root(data, myid=74, main_node=0, comm = -1)
        self.assertTrue(numpy.array_equal(IMAGE_2D_REFERENCE.get_3dview(), data.get_3dview()))
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        data = deepcopy(IMAGE_2D_REFERENCE)
        return_new = fu.reduce_EMData_to_root(data, myid=74, main_node=0, comm = MPI_COMM_WORLD)
        return_old = oldfu.reduce_EMData_to_root(data, myid=74, main_node=0, comm = MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(IMAGE_2D_REFERENCE.get_3dview(), data.get_3dview()))
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)



class Test_bcast_compacted_EMData_all_to_all(unittest.TestCase):
    """
    It does not matter which of my images I-ll use, I got always the following typeerror:
    Error
Traceback (most recent call last):
  File "/home/lusnig/SPHIRE_1_1/lib/python2.7/unittest/case.py", line 329, in run
    testMethod()
  File "/home/lusnig/EMAN2/eman2/sphire/tests/test_utilities.py", line 1451, in test_bcast_compacted_EMData_all_to_all_true_should_return_equal_objects
    return_new = fu.bcast_compacted_EMData_all_to_all(list_of_em_objects, myid)
  File "/home/lusnig/EMAN2/eman2/sphire/libpy/sparx_utilities.py", line 1105, in bcast_compacted_EMData_all_to_all
    em_dict = dict_received["em_dict"]
TypeError: 'NoneType' object has no attribute '__getitem__'
    """
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all()
        self.assertEqual(cm_new.exception.message, "bcast_compacted_EMData_all_to_all() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_NoneType_data_returns_TypeError_NoneType_obj_hasnot_attribute__getitem__(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all([None,None], myid=74,  comm = -1)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all([None,None], myid=74, comm = -1)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute '__getitem__'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_image(self):
        data = [deepcopy(IMAGE_3D),deepcopy(IMAGE_3D)]
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_compacted_EMData_all_to_all(data, myid=74,  comm = -1)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_compacted_EMData_all_to_all(data, myid=74,  comm = -1)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute '__getitem__'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_gather_compacted_EMData_to_root(unittest.TestCase):
    argum = get_arg_from_pickle_file(os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.gather_compacted_EMData_to_root"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.gather_compacted_EMData_to_root()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.gather_compacted_EMData_to_root()
        self.assertEqual(cm_new.exception.message, "gather_compacted_EMData_to_root() takes at least 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        (no_of_emo, list_of_emo, myid) = self.argum[0]
        return_new = fu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid, comm=-1)
        return_old = oldfu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid, comm=-1)
        self.assertEqual(return_new, return_old)

    def test_with_MPI_COMM_WORLD(self):
        (no_of_emo, list_of_emo, myid) = self.argum[0]
        return_new = fu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid, comm=MPI_COMM_WORLD)
        return_old = oldfu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid, comm=MPI_COMM_WORLD)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_pickle_file_values_wrong_number_of_number_of_all_em_objects_distributed_across_processes(self):
        (no_of_emo, list_of_emo, myid) = self.argum[0]
        return_new = fu.gather_compacted_EMData_to_root(0, list_of_emo, myid,  comm=-1)
        return_old = oldfu.gather_compacted_EMData_to_root(0, list_of_emo, myid, comm=-1)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_NoneType_as_img_returns_IndexError_list_index_out_of_range(self):
        (no_of_emo, list_of_emo, myid) = self.argum[0]
        with self.assertRaises(IndexError) as cm_new:
            fu.gather_compacted_EMData_to_root(no_of_emo, [], myid, comm=-1)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.gather_compacted_EMData_to_root(no_of_emo, [], myid, comm=-1)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_bcast_EMData_to_all(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_EMData_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_EMData_to_all()
        self.assertEqual(cm_new.exception.message, "bcast_EMData_to_all() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_default_values(self):
        tavg = deepcopy(IMAGE_2D_REFERENCE)
        return_new = fu.bcast_EMData_to_all(tavg, myid = 11, source_node =0, comm= -1)
        return_old = oldfu.bcast_EMData_to_all(tavg, myid= 11, source_node = 0, comm= -1)
        self.assertTrue(numpy.array_equal(IMAGE_2D_REFERENCE.get_3dview(), tavg.get_3dview()))
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_myid_equal_sourcenode_default_valuqes(self):
        tavg = deepcopy(IMAGE_2D_REFERENCE)
        return_new = fu.bcast_EMData_to_all(tavg, myid= 0, source_node =0, comm= -1)
        return_old = oldfu.bcast_EMData_to_all(tavg, myid= 0, source_node =0, comm= -1)
        self.assertTrue(numpy.array_equal(IMAGE_2D_REFERENCE.get_3dview(), tavg.get_3dview()))
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        tavg = deepcopy(IMAGE_2D_REFERENCE)
        return_new = fu.bcast_EMData_to_all(tavg, myid= 11, source_node =0, comm= MPI_COMM_WORLD)
        return_old = oldfu.bcast_EMData_to_all(tavg, myid= 11, source_node =0, comm= MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(IMAGE_2D_REFERENCE.get_3dview(), tavg.get_3dview()))
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.bcast_EMData_to_all(None, 11, source_node =0, comm= -1)
        return_old = oldfu.bcast_EMData_to_all(None, 11, source_node =0, comm= -1)
        self.assertEqual(return_new, return_old)
        """



class Test_send_EMData(unittest.TestCase):
    #argum = get_arg_from_pickle_file(os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.send_EMData"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.send_EMData()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.send_EMData()
        self.assertEqual(cm_new.exception.message, "send_EMData() takes at least 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.send_EMData(None, 0, 0)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.send_EMData(None, 0, 0)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_xsize'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_send_EMData_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.send_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (img, dst, tag, comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)



class Test_recv_EMData(unittest.TestCase):
    #argum = get_arg_from_pickle_file(os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.recv_EMData"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_EMData()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_EMData()
        self.assertEqual(cm_new.exception.message, "recv_EMData() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_recv_EMData_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.recv_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (src, tag,comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)




class Test_bcast_number_to_all(unittest.TestCase):

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_number_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_number_to_all()
        self.assertEqual(cm_new.exception.message, "bcast_number_to_all() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_number_to_send_is_null(self):
        return_new = fu.bcast_number_to_all(number_to_send = 0, source_node = 0, mpi_comm = -1)
        return_old = oldfu.bcast_number_to_all(number_to_send = 0, source_node = 0, mpi_comm = -1)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)

    def test_with_MPI_COMM_WORLD(self):
        return_new = fu.bcast_number_to_all(number_to_send = 0, source_node = 0, mpi_comm = MPI_COMM_WORLD)
        return_old = oldfu.bcast_number_to_all(number_to_send = 0, source_node = 0, mpi_comm = MPI_COMM_WORLD)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)

    def test_number_to_send_is_not_null(self):
        return_new = fu.bcast_number_to_all(number_to_send = 3, source_node = 0, mpi_comm = -1)
        return_old = oldfu.bcast_number_to_all(number_to_send = 3, source_node = 0, mpi_comm = -1)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 3)

    def test_invalid_number_to_send_error_msg(self):
        return_new = fu.bcast_number_to_all(number_to_send = None, source_node = 0, mpi_comm = -1)
        return_old = oldfu.bcast_number_to_all(number_to_send = None, source_node = 0, mpi_comm = -1)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, None)


class Test_bcast_list_to_all(unittest.TestCase):
    myid = 74
    source_node =0
    list_to_send = [1,2]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.bcast_list_to_all()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.bcast_list_to_all()
        self.assertEqual(cm_new.exception.message, "bcast_list_to_all() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_empty_list(self):
        return_new = fu.bcast_list_to_all([], myid = self.myid, source_node =self.source_node, mpi_comm= -1)
        return_old = oldfu.bcast_list_to_all([], myid= self.myid, source_node = self.source_node, mpi_comm= -1)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,[]))

    def test_defualt_values(self):
        return_new = fu.bcast_list_to_all(self.list_to_send, myid = self.myid, source_node =self.source_node, mpi_comm= -1)
        return_old = oldfu.bcast_list_to_all(self.list_to_send, myid= self.myid, source_node = self.source_node, mpi_comm= -1)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,[]))

    def test_defualt_values_with_MPI_COMM_WORLD(self):
        return_new = fu.bcast_list_to_all(self.list_to_send, myid = self.myid, source_node =self.source_node, mpi_comm= MPI_COMM_WORLD)
        return_old = oldfu.bcast_list_to_all(self.list_to_send, myid= self.myid, source_node = self.source_node, mpi_comm= MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,[]))

    def test_myid_equal_sourcenode(self):
        return_new = fu.bcast_list_to_all(self.list_to_send, myid = self.source_node, source_node =self.source_node, mpi_comm= MPI_COMM_WORLD)
        return_old = oldfu.bcast_list_to_all(self.list_to_send, myid= self.source_node, source_node = self.source_node, mpi_comm= MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,self.list_to_send))

    def test_myid_equal_sourcenode_and_wrong_type_in_listsender_returns_ValueError(self):
        list_to_send=[IMAGE_2D]
        with self.assertRaises(ValueError) as cm_new:
            fu.bcast_list_to_all(list_to_send, myid = self.source_node, source_node =self.source_node, mpi_comm= MPI_COMM_WORLD)
        with self.assertRaises(ValueError) as cm_old:
            oldfu.bcast_list_to_all(list_to_send, myid= self.source_node, source_node = self.source_node, mpi_comm= MPI_COMM_WORLD)
        self.assertEqual(cm_new.exception.message, "setting an array element with a sequence.")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_type_in_listsender(self):
        list_to_send=[IMAGE_2D]
        return_new = fu.bcast_list_to_all(list_to_send, myid = self.myid, source_node =self.source_node, mpi_comm= MPI_COMM_WORLD)
        return_old = oldfu.bcast_list_to_all(list_to_send, myid= self.myid, source_node = self.source_node, mpi_comm= MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,[]))



class Test_recv_attr_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_attr_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_attr_dict()
        self.assertEqual(cm_new.exception.message, "recv_attr_dict() takes at least 7 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_send_attr_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.send_attr_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.send_attr_dict()
        self.assertEqual(cm_new.exception.message, "send_attr_dict() takes at least 5 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_recv_attr_dict_bdb(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recv_attr_dict_bdb()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recv_attr_dict_bdb()
        self.assertEqual(cm_new.exception.message, "recv_attr_dict_bdb() takes at least 7 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_print_begin_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_begin_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_begin_msg()
        self.assertEqual(cm_new.exception.message, "print_begin_msg() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_print_begin_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_begin_msg("test_pgr", onscreen=False)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_begin_msg("test_pgr", onscreen=False)
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout

    def test_print_begin_msg_onscreen_True(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_begin_msg("test_pgr", onscreen=True)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_begin_msg("test_pgr", onscreen=True)
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout




class Test_print_end_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_end_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_end_msg()
        self.assertEqual(cm_new.exception.message, "print_end_msg() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_print_end_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_end_msg("test_pgr", onscreen=False)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_end_msg("test_pgr", onscreen=False)
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout

    def test_print_end_msg_onscreen_True(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_end_msg("test_pgr", onscreen=True)
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_end_msg("test_pgr", onscreen=True)
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout



class Test_print_msg(unittest.TestCase):
    """ see https://wrongsideofmemphis.com/2010/03/01/store-standard-output-on-a-variable-in-python/"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_msg()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_msg()
        self.assertEqual(cm_new.exception.message, "print_msg() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_print_msg(self):
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_msg("test_pgr")
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_msg("test_pgr")
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout



class Test_read_fsc(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.read_fsc()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.read_fsc()
        self.assertEqual(cm_new.exception.message, "read_fsc() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_write_text_row(self):
        data=[[1,1,1,1],[2,2,2,2],[3,3,3,3]]
        f=path.join(ABSOLUTE_PATH, "filefu.txt")
        fu.write_text_file(data, f)
        return_new = fu.read_fsc(f)
        return_old = oldfu.read_fsc(f)
        remove_list_of_file([f])
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, data))



class Test_circumference(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.circumference()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.circumference()
        self.assertEqual(cm_new.exception.message, "circumference() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_default_values_2Dimg(self):
        return_new = fu.circumference(deepcopy(IMAGE_BLANK_2D), inner = -1, outer = -1)
        return_old = oldfu.circumference(deepcopy(IMAGE_BLANK_2D), inner = -1, outer = -1)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_with_default_values_3Dimg(self):
        return_new = fu.circumference(deepcopy(IMAGE_BLANK_3D), inner = -1, outer = -1)
        return_old = oldfu.circumference(deepcopy(IMAGE_BLANK_3D), inner = -1, outer = -1)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_with_invalid_mask_returns_RuntimeError_ImageFormatException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.circumference(deepcopy(IMAGE_BLANK_2D), inner =IMAGE_BLANK_2D.get_xsize()+10 , outer = -1)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.circumference(deepcopy(IMAGE_BLANK_2D), inner =IMAGE_BLANK_2D.get_xsize()+10 , outer = -1)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageFormatException")
        self.assertEqual(msg[1], "Invalid mask")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_wrong_outer_value(self):
        return_new = fu.circumference(deepcopy(IMAGE_BLANK_2D), inner = -1, outer = IMAGE_BLANK_2D.get_xsize()+10 )
        return_old = oldfu.circumference(deepcopy(IMAGE_BLANK_2D), inner = -1, outer = IMAGE_BLANK_2D.get_xsize()+10 )
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))



class Test_write_headers(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_headers()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_headers()
        self.assertEqual(cm_new.exception.message, "write_headers() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_hdf_type(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_headers(path_fu, [IMAGE_2D], [1])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu,path_oldfu])

    def test_overwrite_hdf_file(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        f = open(path_fu, "w+")
        f.close()
        f = open(path_oldfu, "w+")
        f.close()
        fu.write_headers(path_fu, [IMAGE_2D], [1])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu,path_oldfu])

    def test_hdf_type_AssertError_list_differ(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_headers(path_fu, [IMAGE_2D], [2])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        with self.assertRaises(AssertionError) as cm:
            self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        msg = cm.exception.message.split("'")
        self.assertEqual(msg[0].split(":")[0], "Lists differ")
        self.assertEqual(msg[10].split("\n")[2].split(":")[0], 'First differing element 2')
        remove_list_of_file([path_fu, path_oldfu])

    def test_bdf_type(self):
        """
        in the code they inserted the following comment:
        #  For unknown reasons this does not work on Linux, but works on Mac ??? Really?
        """
        self.assertTrue(True)

    def test_invalid_filetype_error_msg(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.txt")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.txt")
        fu.write_headers(path_fu, [IMAGE_2D], [1])
        oldfu.write_headers(path_oldfu, [IMAGE_2D], [1])
        self.assertFalse(path.isfile(path_fu))
        self.assertFalse(path.isfile(path_oldfu))



class Test_write_header(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.write_header()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.write_header()
        self.assertEqual(cm_new.exception.message, "write_header() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_hdf_type(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_header(path_fu, IMAGE_2D, 1)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu,path_oldfu])

    def test_overwrite_hdf_file(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        f = open(path_fu, "w+")
        f.close()
        f = open(path_oldfu, "w+")
        f.close()
        fu.write_header(path_fu, IMAGE_2D, 1)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        remove_list_of_file([path_fu,path_oldfu])

    def test_hdf_type_AssertError_list_differ(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.hdf")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.hdf")
        fu.write_header(path_fu, IMAGE_2D, 2)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertTrue(path.isfile(path_fu))
        self.assertTrue(path.isfile(path_oldfu))
        with self.assertRaises(AssertionError) as cm:
            self.assertEqual(returns_values_in_file(path_fu), returns_values_in_file(path_oldfu))
        msg = cm.exception.message.split("'")
        self.assertEqual(msg[0].split(":")[0], "Lists differ")
        self.assertEqual(msg[10].split("\n")[2].split(":")[0], 'First differing element 2')
        remove_list_of_file([path_fu, path_oldfu])

    def test_invalid_filetype_error_msg(self):
        path_fu = path.join(ABSOLUTE_PATH, "test.txt")
        path_oldfu = path.join(ABSOLUTE_PATH, "test1.txt")
        fu.write_header(path_fu, IMAGE_2D, 1)
        oldfu.write_header(path_oldfu, IMAGE_2D, 1)
        self.assertFalse(path.isfile(path_fu))
        self.assertFalse(path.isfile(path_oldfu))



class Test_file_type(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.file_type()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.file_type()
        self.assertEqual(cm_new.exception.message, "file_type() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_bdb_filetype(self):
        fu.file_type("bdb:bdbfile")
        oldfu.file_type("bdb:bdbfile")
        self.assertTrue(True)

    def test_valid_filetype(self):
        fu.file_type("hdf.hdf")
        oldfu.file_type("hdf.hdf")
        self.assertTrue(True)

    def test_invalid_filetype_error_msg(self):
        fu.file_type("invalid.cc")
        oldfu.file_type("invalid.cc")
        self.assertTrue(True)


class Test_get_params2D(unittest.TestCase):
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params2D"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params2D()
        self.assertEqual(cm_new.exception.message, "get_params2D() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_params2D(self):
        (ima,) = self.argum[0]
        return_new = fu.get_params2D(ima, xform="xform.align2d")
        return_old = oldfu.get_params2D(ima, xform="xform.align2d")
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  (0.0, 0.0, 0.0, 0, 1.0)))

    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        (ima,) = self.argum[0]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(ima, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(ima, xform="xform.align3d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_input_2dimg_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(IMAGE_2D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(IMAGE_2D, xform="xform.align2d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_input_3dimg_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params2D(IMAGE_3D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params2D(IMAGE_3D, xform="xform.align2d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params2D(None, xform="xform.align2d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params2D(None, xform="xform.align2d")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)
        """



class Test_set_params2D(unittest.TestCase):
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params2D"))
    params=[1,2,3,4,5]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params2D()
        self.assertEqual(cm_new.exception.message, "set_params2D() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_set_params2D_using_wrongxform(self):
        (ima,) = self.argum[0]
        fu_img = deepcopy(ima)
        fu2_img = deepcopy(ima)
        fu.set_params2D(fu_img, self.params, xform="xform.align2d")
        oldfu.set_params2D(fu2_img, self.params, xform="xform.projection")     # is not setting the params
        self.assertFalse(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(fu2_img)))
        self.assertFalse(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(ima)))

    def test_set_params2D_using_wrongxform2(self):
        (ima,) = self.argum[0]
        fu_img = deepcopy(ima)
        fu2_img = deepcopy(ima)
        fu.set_params2D(fu_img, self.params, xform="xform.projection")       # is not setting the params
        oldfu.set_params2D(fu2_img, self.params, xform="xform.projection")      # is not setting the params
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(fu2_img)))
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(ima)))

    def test_set_params2D(self):
        (ima,) = self.argum[0]
        fu_img = deepcopy(ima)
        oldfu_img = deepcopy(ima)
        fu.set_params2D(fu_img, self.params, xform="xform.align2d")
        oldfu.set_params2D(oldfu_img, self.params, xform="xform.align2d")
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(oldfu_img)))
        self.assertFalse(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(ima)))

    def test_less_params(self):
        (ima,) = self.argum[0]
        fu_img = deepcopy(ima)
        oldfu_img = deepcopy(ima)
        with self.assertRaises(IndexError) as cm_new:
            fu.set_params2D(fu_img, [0,1], xform="xform.align2d")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params2D(oldfu_img, [0,1], xform="xform.align2d")
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_wrong_xform_does_not_change_the_values_IS_IT_OK_OR_NOT(self):
        (ima,) = self.argum[0]
        fu_img = deepcopy(ima)
        oldfu_img = deepcopy(ima)
        fu.set_params2D(fu_img, self.params, xform="xform.align3d")          # is not setting the params
        oldfu.set_params2D(oldfu_img, self.params, xform="xform.align3d")    # is not setting the params
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(oldfu_img)))
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(ima)))

    def test_wrong_input_img(self):
        # I called it wrong image just because in the 'get_params2D' there was an error due to the missing xform key
        (ima,) = self.argum[0]
        fu_img = deepcopy(IMAGE_2D)
        oldfu_img = deepcopy(IMAGE_2D)
        fu.set_params2D(fu_img, self.params, xform="xform.align2d")
        oldfu.set_params2D(oldfu_img, self.params, xform="xform.align2d")
        self.assertTrue(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(oldfu_img)))
        self.assertFalse(numpy.array_equal(fu.get_params2D(fu_img), oldfu.get_params2D(ima)))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params2D(None, self.params, xform="xform.align2d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params2D(None, self.params, xform="xform.align2d")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'set_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)





class Test_get_params3D(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params3D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params3D()
        self.assertEqual(cm_new.exception.message, "get_params3D() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_params3D(self):
        return_new = fu.get_params3D(IMAGE_3D, xform="xform.align3d")
        return_old = oldfu.get_params3D(IMAGE_3D, xform="xform.align3d")
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 1.0)))

    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params3D(IMAGE_3D, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params3D(IMAGE_3D, xform="xform.align2d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_input_img_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params3D(IMAGE_2D, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params3D(IMAGE_2D, xform="xform.align3d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params3D(IMAGE_3D, xform="xform.align3d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params3D(IMAGE_3D, xform="xform.align3d")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)
        """



class Test_set_params3D(unittest.TestCase):
    params=[1,2,3,4,5,6,7,8]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params2D()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params2D()
        self.assertEqual(cm_new.exception.message, "set_params2D() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_set_params3D(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        fu.set_params3D(fu_img, self.params, xform="xform.align3d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align3d")
        self.assertTrue(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        self.assertFalse(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_less_params(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        with self.assertRaises(IndexError) as cm_new:
            fu.set_params3D(fu_img, [0,1], xform="xform.align3d")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params3D(oldfu_img, [0,1], xform="xform.align3d")
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_xform_does_not_change_the_values_IS_IT_OK_OR_NOT(self):
        fu_img = deepcopy(IMAGE_3D)
        oldfu_img = deepcopy(IMAGE_3D)
        fu.set_params3D(fu_img, self.params, xform="xform.align2d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align2d")
        self.assertTrue(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        #self.assertFalse(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_wrong_input_img(self):
        # I called it wrong image just because in the 'get_params2D' there was an error due to the missing xform key
        fu_img = deepcopy(IMAGE_2D)
        oldfu_img = deepcopy(IMAGE_2D)
        fu.set_params3D(fu_img, self.params, xform="xform.align3d")
        oldfu.set_params3D(oldfu_img, self.params, xform="xform.align3d")
        self.assertTrue(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(oldfu_img)))
        self.assertFalse(numpy.array_equal(fu.get_params3D(fu_img), oldfu.get_params3D(IMAGE_3D)))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params3D(None, self.params, xform="xform.align3d")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params3D(None, self.params, xform="xform.align3d")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'set_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_params_proj(unittest.TestCase):
    argum = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params_proj"))
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_params_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_params_proj()
        self.assertEqual(cm_new.exception.message, "get_params_proj() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_params_proj(self):
        (ima,) = self.argum[0]
        return_new = fu.get_params_proj(ima, xform="xform.projection")
        return_old = oldfu.get_params_proj(ima, xform="xform.projection")
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new, (14.71329548619616, 101.3719902962565, 220.4187405823029, -0.0, -0.0)))

    def test_wrong_xform_returns_NotExistingObjectException_key_doesnot_exist(self):
        (ima,) = self.argum[0]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(ima, xform="xform.align3d")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(ima, xform="xform.align3d")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_input_2dimg_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(IMAGE_2D, xform="xform.projection")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(IMAGE_2D, xform="xform.projection")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_input_3dimg_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(IMAGE_3D, xform="xform.projection")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(IMAGE_3D, xform="xform.projection")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_NoneType_as_img_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_params_proj(None, xform="xform.projection")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_params_proj(None, xform="xform.projection")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)
        """



class Test_set_params_proj(unittest.TestCase):
    params=[1,2,3,4,5]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_params_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_params_proj()
        self.assertEqual(cm_new.exception.message, "set_params_proj() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_set_params_proj_using_wrongxform_returns_NotExistingObjectException_key_doesnot_exist(self): #error is ok
        fu_img = deepcopy(IMAGE_2D)
        fu.set_params_proj(fu_img, self.params, xform="xform.align2d")
        with self.assertRaises(RuntimeError) as cm:
            fu.get_params_proj(fu_img, xform="xform.projection")
        msg = cm.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")

    def test_set_params_proj_using_wrongxform2returns_NotExistingObjectException_key_doesnot_exist(self):
        fu_img = deepcopy(IMAGE_2D)
        fu2_img = deepcopy(IMAGE_2D)
        fu.set_params_proj(fu_img, self.params, xform="xform.align2d")       # is not setting the params
        oldfu.set_params_proj(fu2_img, self.params, xform="xform.align2d")      # is not setting the params
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_params_proj(fu_img, xform="xform.projection")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_params_proj(fu2_img, xform="xform.projection")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_set_params_proj(self):
        fu_img = deepcopy(IMAGE_2D)
        oldfu_img = deepcopy(IMAGE_2D)
        fu.set_params_proj(fu_img, self.params, xform="xform.projection")
        oldfu.set_params_proj(oldfu_img, self.params, xform="xform.projection")
        self.assertTrue(numpy.array_equal(fu.get_params_proj(fu_img, xform="xform.projection"), oldfu.get_params_proj(oldfu_img, xform="xform.projection")))
        #self.assertFalse(numpy.array_equal(fu.get_params_proj(fu_img), fu.get_params_proj(IMAGE_2D))) # IMAGE2D has not key ''xform.projection'

    def test_less_params(self):
        fu_img = deepcopy(IMAGE_2D)
        oldfu_img = deepcopy(IMAGE_2D)
        with self.assertRaises(IndexError) as cm_new:
            fu.set_params_proj(fu_img, [0,1], xform="xform.projection")
        with self.assertRaises(IndexError) as cm_old:
            oldfu.set_params_proj(oldfu_img, [0,1], xform="xform.projection")
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_params_proj(None, self.params, xform="xform.projection")
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_params_proj(None, self.params, xform="xform.projection")
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'set_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_ctf(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_ctf()
        self.assertEqual(cm_new.exception.message, "get_ctf() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_wrong_img_returns_NotExistingObjectException_key_doesnot_exist(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_ctf(IMAGE_2D)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_ctf(IMAGE_2D)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_ctf(self):
        img_with_ctf = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/alignment.ali2d_single_iter"))[0][0][0]
        return_new = fu.get_ctf(img_with_ctf)
        return_old = oldfu.get_ctf(img_with_ctf)
        self.assertTrue(numpy.array_equal(return_new,return_old ))
        self.assertTrue(numpy.array_equal(return_new, (1.1349999904632568, 0.009999999776482582, 300.0, 5.699999809265137, 0.0, 10.0, 0.04473999887704849, 130.39999389648438)))

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_ctf(None)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_ctf(None)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_same_ctf(unittest.TestCase):
    params = [1,2,3,4,5,6]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.same_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.same_ctf()
        self.assertEqual(cm_new.exception.message, "same_ctf() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_same_ctf(self):
        self.assertTrue(fu.same_ctf(fu.generate_ctf(self.params),oldfu.generate_ctf(self.params)))

    def test_not_same_ctf(self):
        self.assertFalse(fu.same_ctf(fu.generate_ctf(self.params),oldfu.generate_ctf([0,1,2,3,4,5])))



class Test_generate_ctf(unittest.TestCase):
    """ params = [defocus, cs, voltage, apix, bfactor, ampcont, astigmatism_amplitude, astigmatism_angle] """
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.generate_ctf()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.generate_ctf()
        self.assertEqual(cm_new.exception.message, "generate_ctf() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_generate_ctf_with6Values(self):
        self.assertTrue(fu.same_ctf(fu.generate_ctf([1, 2, 3, 4, 5, 6]), oldfu.generate_ctf([1, 2, 3, 4, 5, 6])))

    def test_generate_ctf_with8Values(self):
        self.assertTrue(fu.same_ctf(fu.generate_ctf([1, 2, 3, 4, 5, 6,7,8]), oldfu.generate_ctf([1, 2, 3, 4, 5, 6,7,8])))

    def test_generate_ctf_with_incorrect_number_of_params_warning_msg(self):
        self.assertTrue(fu.generate_ctf([1, 2, 3, 4, 5, 6, 7]) is None)
        self.assertTrue(oldfu.generate_ctf([1, 2, 3, 4, 5, 6, 7]) is None)



class Test_delete_bdb(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.delete_bdb()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.delete_bdb()
        self.assertEqual(cm_new.exception.message, "delete_bdb() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_disable_bdb_cache(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.disable_bdb_cache(3)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.disable_bdb_cache(3)
        self.assertEqual(cm_new.exception.message, "disable_bdb_cache() takes no arguments (1 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_disable_bdb_cache(self):
        EMAN2db.BDB_CACHE_DISABLE = False
        self.assertFalse(EMAN2db.BDB_CACHE_DISABLE)
        fu.disable_bdb_cache()
        self.assertTrue(EMAN2db.BDB_CACHE_DISABLE)
        EMAN2db.BDB_CACHE_DISABLE = False
        self.assertFalse(EMAN2db.BDB_CACHE_DISABLE)
        oldfu.disable_bdb_cache()
        self.assertTrue(EMAN2db.BDB_CACHE_DISABLE )



class Test_getvec(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getvec()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getvec()
        self.assertEqual(cm_new.exception.message, "getvec() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_tht_between_90_180(self):
        return_new = fu.getvec(0,100)
        return_old = oldfu.getvec(0, 100)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (-0.98480775301220802, 1.2060416625018976e-16, 0.17364817766693041)))

    def test_tht_bigger_than_180(self):
        return_new = fu.getvec(0,200)
        return_old = oldfu.getvec(0, 200)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  (-0.34202014332566871, 4.1885387376769918e-17, 0.93969262078590843)))

    def test_tht_lower_than_90(self):
        return_new = fu.getvec(0, 0)
        return_old = oldfu.getvec(0, 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  (0.0, 0.0, 1.0)))



class Test_getfvec(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getfvec()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getfvec()
        self.assertEqual(cm_new.exception.message, "getfvec() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_tht_between_90_180(self):
        return_new = fu.getfvec(0,100)
        return_old = oldfu.getfvec(0, 100)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.98480775301220802, 0.0, -0.1736481776669303)))


    def test_tht_bigger_than_180(self):
        return_new = fu.getfvec(0, 200)
        return_old = oldfu.getfvec(0, 200)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  (-0.34202014332566866, -0.0, -0.93969262078590843)))

    def test_tht_lower_than_90(self):
        return_new = fu.getfvec(0, 0)
        return_old = oldfu.getfvec(0, 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.0, 0.0, 1.0)))



class Test_nearest_fang(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_fang()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_fang()
        self.assertEqual(cm_new.exception.message, "nearest_fang() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_nearest_fang_true_should_return_equal_objects(self):
        """ values got from pickle files/utilities/utilities.nearest_fang """
        vecs = [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487908840179443, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417963027954, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309417963027954, 0.44544869661331177, -0.3333333134651184], [-0.6804221868515015, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]
        tht = 66.00945
        phi = 58.54455
        return_new = fu.nearest_fang(vecs, phi, tht)
        return_old = oldfu.nearest_fang(vecs, phi, tht)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)


    def test_empty_vectore(self):
        """ values got from pickle files/utilities/utilities.nearest_fang """
        self.assertEqual(fu.nearest_fang([], 100, 100), oldfu.nearest_fang([], 100, 100))
        self.assertEqual(fu.nearest_fang([], 100, 100), -1)



class Test_nearest_many_full_k_projangles(unittest.TestCase):
    reference_normals = [[0.606369137763977, 0.7754802703857422, 0.17591717839241028], [0.344023197889328, 0.9092735648155212, 0.23424272239208221], [0.5131438970565796, 0.7110531330108643, -0.4807148575782776], [0.6525110006332397, 0.6401833295822144, 0.4054562747478485], [0.5846421718597412, 0.5353381037712097, 0.6095954775810242], [0.3914891481399536, 0.4943649470806122, 0.7761054039001465], [0.21746492385864258, 0.411188542842865, 0.8852304816246033], [0.18686196208000183, 0.4279184937477112, 0.8842897415161133], [0.2696961760520935, 0.41237473487854004, 0.870178759098053], [0.34728822112083435, 0.3424328565597534, 0.8730009198188782], [0.2467251867055893, 0.39220815896987915, 0.8861712217330933], [0.43794623017311096, 0.19451908767223358, 0.8777046203613281], [0.35838937759399414, 0.0876869484782219, -0.9294450283050537], [0.6956571340560913, 0.7182994484901428, 0.010348091833293438], [0.6555072665214539, 0.7445935010910034, -0.12605828046798706], [0.7438855767250061, 0.6679566502571106, -0.02163686789572239], [0.58192378282547, 0.8076738715171814, -0.09501412510871887], [0.7202955484390259, 0.693575382232666, 0.011288836598396301], [0.6438657641410828, 0.765091598033905, 0.008466575294733047], [0.6417456269264221, 0.7646241188049316, -0.05926619470119476], [0.593335747718811, 0.7773913145065308, 0.20884287357330322], [0.5866740942001343, 0.8075113296508789, -0.06114771217107773], [0.5893274545669556, 0.8044687509536743, 0.07431796938180923], [0.48042023181915283, 0.8660674691200256, 0.13828791677951813], [0.46822038292884827, 0.8812242746353149, -0.06491056084632874], [0.34745562076568604, 0.9322780966758728, 0.10065855830907822], [0.4396599531173706, 0.898162305355072, 0.0018815546063706279], [0.5071992874145508, 0.8368419408798218, 0.2060207575559616], [0.35214218497276306, 0.913831353187561, -0.20225776731967926], [0.5917134881019592, 0.798856258392334, 0.1081843376159668], [0.31928351521492004, 0.9256179332733154, -0.2031984180212021], [0.5689234137535095, 0.8101938962936401, 0.14111001789569855], [0.5366130471229553, 0.8180546164512634, 0.2069614678621292], [0.6138750910758972, 0.751165509223938, 0.24270929396152496], [0.6470115184783936, 0.7327832579612732, 0.210724338889122], [0.6170760989189148, 0.7832963466644287, 0.0752587541937828], [0.6726201176643372, 0.7090698480606079, 0.21166512370109558], [0.5653374195098877, 0.7982293963432312, 0.2079022079706192], [0.6659785509109497, 0.704732358455658, 0.24459083378314972], [0.6436562538146973, 0.7641429901123047, 0.04233306273818016], [0.6849393248558044, 0.7063358426094055, 0.17873942852020264], [0.5400856733322144, 0.8298555016517639, 0.14016936719417572], [0.5633652806282043, 0.8192181587219238, 0.10724367946386337], [0.5887830853462219, 0.8072782158851624, 0.040451530367136], [0.5886198282241821, 0.8079495429992676, -0.02728116139769554], [0.5608543157577515, 0.8246564269065857, 0.07337724417448044], [0.6164841055870056, 0.7869266271591187, -0.026340581476688385], [0.6699250340461731, 0.7420257925987244, -0.0244591124355793], [0.6205720901489258, 0.7555667161941528, 0.20978358387947083], [0.668122410774231, 0.7417618036270142, -0.058325473219156265], [0.6953815221786499, 0.7172793745994568, 0.04421444982290268], [0.6165966987609863, 0.7861903309822083, 0.04139237478375435], [0.6167761087417603, 0.7871026396751404, 0.007525925524532795], [0.7440555691719055, 0.6680058240890503, 0.012229571118950844], [0.5889342427253723, 0.8081541061401367, 0.006585149094462395], [0.6699285507202148, 0.7411633729934692, 0.04327383637428284], [0.7258118987083435, 0.6720566749572754, 0.1467544287443161], [0.6510280966758728, 0.7452824115753174, 0.1439322829246521], [0.695436418056488, 0.7182027697563171, -0.02351834438741207], [0.6768127679824829, 0.7217592000961304, 0.1448730081319809], [0.659572958946228, 0.7303088307380676, 0.1777988076210022], [0.6193289160728455, 0.7775111198425293, 0.10912513732910156], [0.644066333770752, 0.7611650824546814, 0.07619946449995041], [0.646177351474762, 0.7552087903022766, 0.11006595939397812], [0.7330403327941895, 0.6557652354240417, 0.18062089383602142], [0.7375331521034241, 0.6283562183380127, 0.2474130392074585], [0.7217933535575867, 0.68284010887146, 0.11288806051015854], [0.6975162625312805, 0.6453772783279419, 0.311382919549942], [0.8656806349754333, 0.48613080382347107, 0.11947321146726608], [0.7893708944320679, 0.6029136180877686, 0.11571019887924194], [0.8126943111419678, 0.5629141926765442, 0.15051743388175964], [0.8193334341049194, 0.5153672695159912, 0.25117599964141846], [0.8606626391410828, 0.45913165807724, 0.22013163566589355], [0.9627028107643127, 0.2471613585948944, -0.11006592959165573], [0.8993244171142578, 0.4370543360710144, -0.014110974967479706], [0.8985337615013123, 0.4356166422367096, 0.053621746599674225], [0.6973650455474854, 0.6844565272331238, 0.21260593831539154], [0.7557139992713928, 0.6292310357093811, 0.18156161904335022], [0.720099925994873, 0.6935028433799744, -0.0225775558501482], [0.6813780665397644, 0.7211584448814392, -0.12511759996414185], [0.720158576965332, 0.689294695854187, 0.07902166992425919], [0.6333718299865723, 0.7533666491508484, 0.17685800790786743], [0.7017511129379272, 0.6973404884338379, 0.14581383764743805], [0.670264720916748, 0.7381020188331604, 0.07714022696018219], [0.6722255349159241, 0.7319769859313965, 0.11100655794143677], [0.6406394839286804, 0.7163008451461792, 0.2765757739543915], [0.6907424926757812, 0.6801389455795288, 0.2455316036939621], [0.6244292855262756, 0.7678812146186829, 0.1429915428161621], [0.7094387412071228, 0.6814774870872498, 0.17968012392520905], [0.5963707566261292, 0.7414255142211914, 0.30761995911598206], [0.6974412798881531, 0.7078441977500916, 0.11194729804992676], [0.5866034030914307, 0.7729452252388, 0.24176852405071259], [0.7146044969558716, 0.6546692252159119, 0.24647238850593567], [0.5873112082481384, 0.7613202929496765, 0.2746942937374115], [0.50588458776474, 0.7085287570953369, 0.49200382828712463]]
    angles = [[41.921590970437258, 91.23979851375101, 333.346436124961, -0.0, -0.0]]
    howmany = 47
    symclass = sparx_fundamentals.symclass("c1")
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_many_full_k_projangles()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_many_full_k_projangles()
        self.assertEqual(cm_new.exception.message, "nearest_many_full_k_projangles() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_pickle_file_values(self):
        symclass = sparx_fundamentals.symclass("c5")    # I creasted it like the one of the pickle file
        return_new = fu.nearest_many_full_k_projangles(self.reference_normals, self.angles, self.howmany, symclass)
        return_old = oldfu.nearest_many_full_k_projangles(self.reference_normals, self.angles, self.howmany, symclass)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new, [[15, 53, 78, 17, 58, 13, 50, 47, 80, 49, 55, 79, 66, 83, 18, 19, 90, 39, 14, 69, 84, 62, 56, 46, 82, 52, 51, 63, 59, 35, 64, 88, 57, 77, 44, 54, 61, 40, 70, 21, 43, 60, 16, 87, 22, 29, 76]]))

    def test_with_class_c1(self):
        return_new = fu.nearest_many_full_k_projangles(self.reference_normals, self.angles, self.howmany, self.symclass)
        return_old = oldfu.nearest_many_full_k_projangles(self.reference_normals, self.angles, self.howmany, self.symclass)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[15, 53, 78, 17, 58, 13, 50, 47, 80, 49, 55, 79, 66, 83, 18, 19, 90, 39, 14, 69, 84, 62, 56, 46, 82, 52, 51, 63, 59, 35, 64, 88, 57, 77, 44, 54, 61, 40, 70, 21, 43, 60, 16, 87, 22, 29, 76]]))

    def test_with_null_howmany(self):
        return_new = fu.nearest_many_full_k_projangles(self.reference_normals, self.angles, 0, self.symclass)
        return_old = oldfu.nearest_many_full_k_projangles(self.reference_normals, self.angles, 0, self.symclass)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[]]))

    def test_with_empty_list_returns_RuntimeError_InvalidValueException(self):
        with self.assertRaises(RuntimeError) as cm_new:
            fu.nearest_many_full_k_projangles([], self.angles, self.howmany, self.symclass)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.nearest_many_full_k_projangles([], self.angles, self.howmany, self.symclass)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "Error, number of neighbors cannot be larger than number of reference directions")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_assign_projdirs_f(unittest.TestCase):
    """
    Since 'projdirs' and 'refdirs' are got in the sxmeridian from  angles_to_normals(list_of_angles) I used the
    output of the angles_to_normals tests to fill the 'projdirs' variable. the refdirs values are 2/3 of projdirs values
    """
    projdirs =  [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]
    refdirs = [[0.0, 0.0, 0.66], [0.44907856464385987, 0.4307301163673401, 0.22000000655651095], [-0.27087580382823945, 0.5602020227909088, 0.22000000655651095], [-0.6164889872074127, -0.08450628250837326, 0.22000000655651095], [-0.11013545751571656, -0.6124297463893891, 0.22000000655651095], [0.5484215462207794, -0.2939962184429169, 0.22000000655651095], [5.7699032538494066e-08, 5.044209628034821e-15, -0.66], [0.6164889872074127, 0.08450620383024215, -0.21999998688697817], [0.11013536900281906, 0.6124297463893891, -0.21999998688697817], [-0.5484216248989106, 0.2939961397647858, -0.21999998688697817], [-0.44907860398292543, -0.43073007702827454, -0.21999998688697817], [0.2708758628368378, -0.5602019834518432, -0.21999998688697817]]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.assign_projdirs_f()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.assign_projdirs_f()
        self.assertEqual(cm_new.exception.message, "assign_projdirs_f() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_real_data(self):
        neighbors = int(len(self.projdirs)/ len(self.refdirs))
        return_new = fu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        return_old = oldfu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]]))

    def test_with_null_neighboor_value_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.assign_projdirs_f(self.projdirs, self.refdirs, 0)
        return_old = oldfu.assign_projdirs_f(self.projdirs, self.refdirs, 0)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        """

    def test_with_negative_neighboor_value_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, -1)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, -1)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_too_high_neighboor_value_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, 5)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, 5)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_invalid_neighbors_type(self):
        neighbors = len(self.projdirs)/ len(self.refdirs)
        with self.assertRaises(TypeError) as cm_new:
            fu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.assign_projdirs_f(self.projdirs, self.refdirs, neighbors)
        msg = cm_new.exception.message.split("\n")
        msg_old = cm_old.exception.message.split("\n")
        self.assertEqual(msg[0]+msg[1], 'Python argument types in    Util.assign_projdirs_f(list, list, float)')
        self.assertEqual(msg[0]+msg[1], msg_old[0]+msg_old[1])

    def test_with_projdirs_refdirs_have_different_length(self):
        refdirs= self.refdirs [:10]
        neighbors = int(len(self.projdirs)/ len(refdirs))
        return_new = fu.assign_projdirs_f(self.projdirs, refdirs, neighbors)
        return_old = oldfu.assign_projdirs_f(self.projdirs, refdirs, neighbors)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0], [1], [2], [3, 10], [4], [5, 11], [6], [7], [8], [9]]))

    def test_empty_projdirs(self):
        return_new = fu.assign_projdirs_f([], self.refdirs, 1)
        return_old = oldfu.assign_projdirs_f([], self.refdirs, 1)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[], [], [], [], [], [], [], [], [], [], [], []]))

    def test_empty_refdirs_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.assign_projdirs_f(self.projdirs, [], 1)
        return_old = oldfu.assign_projdirs_f(self.projdirs, [], 1)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        """



class Test_angles_to_normals(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angles_to_normals()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angles_to_normals()
        self.assertEqual(cm_new.exception.message, "angles_to_normals() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_pickle_file_values(self):
        angles = [[0.0, 0.0, 0.0], [43.805265094506787, 70.528779365509308, 0.0], [115.80526509450678, 70.528779365509308, 0.0], [187.80526509450678, 70.528779365509308, 0.0], [259.80526509450681, 70.528779365509308, 0.0], [331.80526509450681, 70.528779365509308, 0.0], [180.0, 180.0, 0.0], [7.8052650945068081, 109.47122063449069, 0.0], [79.805265094506808, 109.47122063449069, 0.0], [151.80526509450681, 109.47122063449069, 0.0], [223.80526509450681, 109.47122063449069, 0.0], [295.80526509450681, 109.47122063449069, 0.0]]
        return_new = fu.angles_to_normals(angles)
        return_old = oldfu.angles_to_normals(angles)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]))

    def test_with_empty_angles_list(self):
        return_new = fu.angles_to_normals([])
        return_old = oldfu.angles_to_normals([])
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,[]))



class Test_angular_occupancy(unittest.TestCase):
    params = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.angular_occupancy"))[0][0]
    angstep = 15 # i change it becuase the lower value got from the pickle file leads each test to run for more than 10 sec, nov less than 1

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angular_occupancy()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angular_occupancy()
        self.assertEqual(cm_new.exception.message, "angular_occupancy() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_less_angles_returns_IndexError_list_index_out_of_range(self):
        angles=[[0.1],[21.1],[30.11],[1.1]]
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_occupancy(angles, self.angstep, 'c5', 'S')
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_occupancy(angles, self.angstep, 'c5', 'S')
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_method_S(self):
        """ the values got from the pickle file"""
        return_new = fu.angular_occupancy(self.params, self.angstep, 'c5', 'S')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'c5', 'S')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[175, 297, 578, 666, 945, 960, 1000, 1069, 1189, 1371, 1411, 1452, 1566, 1873, 2150, 2232, 2285, 2386, 2447, 2496, 2531, 2606, 2761, 2805, 2816, 2975, 3094, 3258, 3265, 3266, 3427, 3462, 3643, 3674, 3704, 3791, 4039, 4181, 4292, 4307, 4365, 4436, 4578, 4629, 4689, 4707, 4709, 4735, 5145, 5277, 5302, 5385, 5483, 5499, 5502, 5587, 5667, 5976, 6063, 6244], [32, 48, 75, 79, 115, 171, 176, 202, 277, 281, 328, 375, 511, 525, 559, 572, 573, 704, 723, 777, 1017, 1039, 1053, 1089, 1149, 1182, 1213, 1264, 1350, 1473, 1501, 1522, 1551, 1552, 1558, 1563, 1576, 1640, 1686, 1731, 1746, 1770, 1840, 1878, 1884, 1891, 2056, 2171, 2206, 2220, 2242, 2263, 2291, 2317, 2341, 2361, 2378, 2444, 2490, 2505, 2510, 2536, 2573, 2590, 2659, 2669, 2799, 2803, 2855, 2869, 2894, 2927, 2982, 3060, 3090, 3134, 3135, 3140, 3165, 3197, 3215, 3221, 3260, 3281, 3359, 3361, 3433, 3452, 3505, 3515, 3527, 3556, 3558, 3580, 3605, 3637, 3653, 3655, 3667, 3668, 3687, 3764, 3776, 3862, 3934, 3978, 4105, 4532, 4708, 4730, 4770, 4849, 4860, 4923, 4934, 4955, 4971, 5125, 5394, 5417, 5481, 5536, 5619, 5666, 5735, 5835, 6252, 6255, 6291, 6320, 6328], [119, 185, 590, 785, 1177, 1317, 1380, 1442, 1732, 1758, 1888, 2095, 2161, 2169, 2264, 2334, 2539, 2682, 2764, 2916, 3109, 3161, 3205, 3233, 3268, 3280, 3299, 3307, 3318, 3561, 3633, 3714, 3731, 3760, 3790, 3792, 3800, 3819, 3850, 3935, 4020, 4050, 4094, 4186, 4621, 4635, 4742, 4771, 4809, 4999, 5104, 5444, 5498, 5506, 5531, 5538, 5588, 5636, 5655, 5674, 5689, 5709, 5727, 5737, 5752, 5813, 5816, 5836, 5842, 5869, 5870, 5880, 5915, 6028, 6050, 6164, 6194, 6232, 6233, 6257, 6290, 6293, 6314, 6319, 6361, 6372, 6389], [15, 18, 19, 20, 24, 29, 36, 50, 57, 71, 74, 76, 77, 86, 95, 101, 102, 110, 118, 120, 123, 125, 126, 135, 137, 139, 148, 160, 165, 174, 177, 189, 193, 195, 196, 197, 199, 200, 206, 219, 220, 228, 238, 240, 246, 248, 260, 282, 286, 288, 290, 295, 301, 305, 306, 314, 316, 317, 320, 329, 330, 333, 338, 341, 342, 343, 344, 345, 350, 355, 359, 361, 364, 365, 369, 373, 377, 379, 380, 381, 382, 383, 388, 389, 395, 397, 398, 401, 408, 411, 412, 413, 415, 417, 419, 421, 423, 425, 427, 428, 430, 434, 436, 437, 440, 442, 444, 445, 447, 451, 454, 455, 458, 459, 461, 462, 463, 467, 468, 470, 471, 472, 478, 496, 501, 504, 509, 512, 515, 516, 517, 519, 522, 540, 541, 542, 551, 556, 561, 563, 576, 581, 583, 584, 589, 591, 592, 597, 598, 601, 604, 605, 606, 607, 608, 614, 617, 619, 620, 624, 631, 634, 635, 638, 639, 641, 646, 652, 653, 655, 659, 670, 676, 677, 683, 685, 689, 696, 698, 700, 702, 712, 715, 720, 729, 732, 733, 735, 742, 746, 747, 749, 753, 754, 756, 758, 759, 761, 762, 764, 767, 773, 776, 784, 789, 792, 795, 797, 803, 809, 810, 812, 816, 817, 820, 823, 827, 828, 830, 835, 840, 843, 844, 848, 852, 856, 857, 863, 865, 868, 871, 873, 874, 880, 882, 887, 890, 897, 901, 908, 912, 914, 919, 923, 930, 934, 935, 938, 947, 948, 951, 973, 991, 994, 996, 997, 1001, 1003, 1005, 1015, 1016, 1018, 1019, 1029, 1041, 1044, 1045, 1046, 1047, 1049, 1062, 1068, 1079, 1083, 1086, 1091, 1093, 1094, 1097, 1107, 1112, 1115, 1116, 1117, 1120, 1122, 1131, 1132, 1148, 1160, 1179, 1183, 1190, 1199, 1207, 1208, 1218, 1220, 1221, 1222, 1230, 1240, 1241, 1243, 1244, 1249, 1259, 1268, 1271, 1275, 1293, 1297, 1298, 1299, 1300, 1301, 1306, 1307, 1308, 1314, 1316, 1324, 1326, 1329, 1334, 1335, 1336, 1337, 1338, 1339, 1343, 1349, 1376, 1383, 1396, 1398, 1403, 1405, 1413, 1426, 1428, 1433, 1434, 1448, 1451, 1454, 1463, 1465, 1467, 1470, 1478, 1484, 1486, 1487, 1499, 1500, 1507, 1510, 1512, 1521, 1523, 1532, 1538, 1540, 1541, 1562, 1571, 1588, 1590, 1595, 1597, 1600, 1601, 1628, 1629, 1630, 1631, 1632, 1633, 1635, 1638, 1659, 1661, 1669, 1671, 1675, 1679, 1680, 1682, 1684, 1693, 1695, 1710, 1711, 1720, 1725, 1733, 1734, 1742, 1768, 1775, 1777, 1786, 1790, 1798, 1799, 1803, 1804, 1807, 1810, 1812, 1818, 1823, 1824, 1835, 1837, 1841, 1842, 1843, 1845, 1847, 1849, 1851, 1852, 1856, 1859, 1881, 1890, 1898, 1905, 1907, 1915, 1919, 1927, 1933, 1934, 1946, 1950, 1955, 1956, 1963, 1968, 1970, 1973, 1983, 1984, 1986, 1990, 1992, 2000, 2002, 2017, 2022, 2024, 2026, 2030, 2047, 2050, 2051, 2059, 2060, 2073, 2081, 2092, 2102, 2113, 2115, 2117, 2119, 2120, 2126, 2127, 2129, 2130, 2136, 2137, 2139, 2141, 2148, 2151, 2159, 2163, 2166, 2167, 2174, 2176, 2182, 2192, 2193, 2207, 2211, 2213, 2217, 2222, 2227, 2229, 2231, 2234, 2237, 2238, 2259, 2267, 2269, 2270, 2273, 2274, 2276, 2280, 2288, 2300, 2308, 2311, 2312, 2314, 2320, 2331, 2335, 2346, 2349, 2350, 2356, 2362, 2364, 2369, 2372, 2376, 2391, 2398, 2409, 2410, 2413, 2416, 2419, 2425, 2430, 2438, 2439, 2441, 2452, 2456, 2463, 2467, 2476, 2482, 2493, 2498, 2502, 2506, 2513, 2523, 2526, 2532, 2541, 2543, 2548, 2549, 2552, 2565, 2566, 2567, 2571, 2575, 2582, 2588, 2589, 2597, 2602, 2604, 2605, 2611, 2616, 2618, 2622, 2623, 2624, 2628, 2630, 2632, 2640, 2642, 2647, 2648, 2650, 2653, 2656, 2661, 2679, 2680, 2687, 2695, 2698, 2699, 2705, 2706, 2712, 2717, 2719, 2721, 2727, 2732, 2736, 2743, 2744, 2745, 2748, 2750, 2752, 2753, 2754, 2759, 2763, 2765, 2771, 2775, 2782, 2784, 2788, 2791, 2793, 2797, 2798, 2800, 2812, 2813, 2820, 2823, 2825, 2826, 2827, 2829, 2830, 2832, 2833, 2835, 2836, 2838, 2841, 2842, 2844, 2845, 2847, 2848, 2851, 2853, 2856, 2858, 2862, 2863, 2865, 2868, 2871, 2874, 2876, 2883, 2884, 2887, 2888, 2889, 2890, 2892, 2899, 2911, 2912, 2914, 2922, 2923, 2924, 2926, 2928, 2929, 2931, 2932, 2933, 2935, 2936, 2940, 2941, 2949, 2954, 2955, 2957, 2959, 2960, 2965, 2967, 2968, 2969, 2971, 2981, 2983, 2984, 2992, 2996, 2998, 2999, 3006, 3008, 3011, 3013, 3019, 3020, 3022, 3028, 3029, 3030, 3032, 3034, 3035, 3036, 3038, 3040, 3042, 3046, 3049, 3052, 3056, 3062, 3065, 3066, 3067, 3069, 3070, 3073, 3074, 3079, 3081, 3082, 3083, 3087, 3088, 3093, 3097, 3100, 3103, 3106, 3112, 3113, 3119, 3121, 3122, 3125, 3129, 3141, 3142, 3146, 3147, 3149, 3152, 3156, 3157, 3158, 3159, 3160, 3162, 3168, 3171, 3172, 3173, 3175, 3176, 3179, 3183, 3184, 3185, 3186, 3187, 3189, 3191, 3193, 3194, 3196, 3199, 3200, 3201, 3203, 3207, 3211, 3224, 3236, 3240, 3241, 3243, 3244, 3245, 3248, 3250, 3254, 3287, 3288, 3310, 3314, 3317, 3323, 3346, 3366, 3373, 3375, 3380, 3381, 3382, 3385, 3386, 3387, 3388, 3390, 3391, 3394, 3396, 3397, 3398, 3399, 3401, 3403, 3404, 3405, 3406, 3412, 3415, 3417, 3418, 3422, 3428, 3432, 3434, 3435, 3437, 3438, 3440, 3441, 3444, 3448, 3449, 3451, 3455, 3463, 3465, 3469, 3470, 3472, 3473, 3474, 3475, 3476, 3477, 3479, 3481, 3487, 3488, 3492, 3494, 3498, 3502, 3506, 3507, 3510, 3512, 3513, 3518, 3521, 3523, 3528, 3530, 3531, 3534, 3535, 3542, 3546, 3551, 3552, 3553, 3555, 3557, 3562, 3564, 3569, 3572, 3574, 3578, 3581, 3582, 3584, 3585, 3590, 3591, 3594, 3598, 3607, 3610, 3615, 3617, 3618, 3622, 3624, 3628, 3629, 3630, 3631, 3635, 3636, 3644, 3645, 3646, 3648, 3650, 3656, 3657, 3658, 3660, 3664, 3665, 3669, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3691, 3692, 3693, 3694, 3695, 3698, 3699, 3700, 3701, 3702, 3703, 3705, 3706, 3707, 3708, 3709, 3711, 3713, 3715, 3717, 3718, 3719, 3720, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3733, 3734, 3735, 3736, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3747, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3759, 3761, 3762, 3763, 3765, 3766, 3767, 3768, 3769, 3771, 3774, 3775, 3777, 3779, 3780, 3781, 3785, 3786, 3787, 3789, 3793, 3794, 3795, 3797, 3798, 3801, 3802, 3803, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3817, 3821, 3822, 3825, 3826, 3827, 3828, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3842, 3843, 3844, 3845, 3847, 3848, 3849, 3851, 3852, 3854, 3855, 3856, 3858, 3859, 3860, 3861, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3873, 3874, 3875, 3876, 3877, 3879, 3880, 3881, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3905, 3907, 3908, 3909, 3910, 3912, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3929, 3930, 3931, 3939, 3940, 3941, 3942, 3943, 3944, 3946, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4040, 4041, 4042, 4043, 4044, 4046, 4047, 4048, 4049, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4089, 4090, 4091, 4092, 4093, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4106, 4107, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4182, 4183, 4184, 4185, 4187, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4225, 4226, 4227, 4228, 4229, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4272, 4273, 4275, 4276, 4277, 4278, 4279, 4280, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4330, 4331, 4332, 4333, 4337, 4339, 4340, 4341, 4342, 4343, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4366, 4368, 4369, 4370, 4371, 4373, 4374, 4376, 4377, 4378, 4379, 4380, 4381, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4433, 4434, 4435, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4447, 4448, 4449, 4450, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4483, 4485, 4486, 4487, 4488, 4489, 4490, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4512, 4513, 4514, 4515, 4518, 4519, 4520, 4521, 4522, 4523, 4525, 4527, 4528, 4529, 4531, 4533, 4534, 4535, 4536, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4558, 4559, 4561, 4562, 4563, 4564, 4565, 4567, 4568, 4569, 4570, 4571, 4573, 4574, 4575, 4579, 4580, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4590, 4591, 4592, 4593, 4594, 4597, 4599, 4600, 4601, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4630, 4632, 4633, 4634, 4637, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4650, 4651, 4652, 4653, 4654, 4655, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4668, 4669, 4670, 4671, 4672, 4673, 4675, 4678, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4691, 4693, 4694, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4710, 4711, 4713, 4714, 4716, 4717, 4719, 4720, 4721, 4722, 4725, 4726, 4727, 4729, 4733, 4736, 4738, 4739, 4740, 4741, 4745, 4746, 4747, 4748, 4749, 4750, 4752, 4753, 4754, 4755, 4756, 4758, 4759, 4760, 4761, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4774, 4775, 4779, 4781, 4783, 4785, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4799, 4800, 4801, 4805, 4806, 4807, 4808, 4811, 4812, 4814, 4815, 4817, 4818, 4819, 4820, 4822, 4823, 4824, 4825, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4843, 4844, 4846, 4848, 4850, 4851, 4853, 4855, 4856, 4857, 4858, 4859, 4863, 4864, 4865, 4866, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4893, 4894, 4895, 4897, 4898, 4899, 4900, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4917, 4919, 4920, 4921, 4922, 4924, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4935, 4936, 4938, 4941, 4942, 4943, 4946, 4947, 4948, 4949, 4950, 4952, 4954, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4965, 4966, 4967, 4968, 4969, 4970, 4972, 4973, 4974, 4975, 4977, 4978, 4980, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4991, 4992, 4993, 4994, 4995, 4997, 4998, 5000, 5001, 5002, 5003, 5004, 5007, 5009, 5011, 5012, 5014, 5016, 5017, 5018, 5019, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5030, 5031, 5033, 5036, 5037, 5038, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5049, 5052, 5053, 5055, 5056, 5057, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5070, 5072, 5073, 5075, 5076, 5077, 5078, 5082, 5083, 5084, 5085, 5086, 5087, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5100, 5101, 5105, 5109, 5111, 5112, 5113, 5115, 5116, 5117, 5119, 5120, 5121, 5126, 5127, 5129, 5130, 5131, 5132, 5133, 5135, 5136, 5139, 5140, 5141, 5142, 5143, 5147, 5148, 5149, 5150, 5153, 5154, 5155, 5156, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5170, 5171, 5172, 5173, 5176, 5177, 5178, 5179, 5180, 5181, 5183, 5185, 5186, 5187, 5188, 5189, 5191, 5193, 5194, 5195, 5196, 5198, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5223, 5225, 5226, 5227, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5265, 5266, 5268, 5270, 5271, 5274, 5278, 5279, 5280, 5281, 5283, 5285, 5287, 5288, 5289, 5290, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5304, 5307, 5308, 5309, 5311, 5312, 5313, 5314, 5315, 5316, 5318, 5319, 5320, 5321, 5322, 5325, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5352, 5353, 5355, 5356, 5357, 5358, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5370, 5371, 5372, 5373, 5375, 5376, 5377, 5378, 5380, 5381, 5383, 5384, 5386, 5387, 5389, 5390, 5392, 5395, 5396, 5397, 5398, 5400, 5401, 5402, 5403, 5405, 5406, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5418, 5419, 5420, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5445, 5446, 5448, 5450, 5451, 5452, 5453, 5454, 5457, 5458, 5459, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5477, 5478, 5480, 5482, 5484, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5495, 5497, 5500, 5503, 5504, 5505, 5507, 5509, 5512, 5513, 5514, 5515, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5527, 5528, 5530, 5532, 5533, 5535, 5537, 5539, 5540, 5541, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5553, 5554, 5555, 5556, 5557, 5559, 5560, 5561, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5581, 5582, 5583, 5584, 5585, 5589, 5590, 5591, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5610, 5611, 5613, 5615, 5616, 5618, 5620, 5621, 5622, 5624, 5625, 5627, 5628, 5630, 5631, 5632, 5634, 5635, 5637, 5638, 5640, 5641, 5643, 5644, 5645, 5646, 5647, 5651, 5652, 5653, 5656, 5657, 5658, 5660, 5661, 5662, 5663, 5664, 5668, 5670, 5671, 5672, 5673, 5676, 5678, 5680, 5681, 5683, 5684, 5685, 5686, 5687, 5688, 5691, 5693, 5696, 5697, 5698, 5699, 5701, 5703, 5704, 5705, 5706, 5707, 5708, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5724, 5725, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5736, 5738, 5739, 5741, 5742, 5743, 5744, 5745, 5748, 5749, 5750, 5751, 5754, 5755, 5756, 5758, 5759, 5760, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5780, 5781, 5782, 5783, 5784, 5785, 5787, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5806, 5808, 5809, 5810, 5811, 5812, 5814, 5815, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5837, 5838, 5839, 5840, 5841, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5868, 5871, 5872, 5873, 5874, 5875, 5877, 5878, 5879, 5881, 5882, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5899, 5900, 5901, 5902, 5904, 5906, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5952, 5954, 5955, 5956, 5957, 5958, 5959, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6151, 6152, 6153, 6154, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6245, 6247, 6248, 6249, 6251, 6253, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6281, 6282, 6283, 6285, 6286, 6287, 6288, 6289, 6292, 6294, 6295, 6296, 6297, 6298, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6315, 6316, 6317, 6318, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6373, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419], [1, 88, 89, 97, 208, 213, 230, 259, 266, 432, 600, 640, 774, 954, 963, 982, 1004, 1008, 1032, 1095, 1099, 1130, 1161, 1165, 1194, 1225, 1254, 1260, 1263, 1288, 1303, 1318, 1330, 1384, 1393, 1422, 1449, 1520, 1545, 1547, 1549, 1652, 1664, 1666, 1672, 1691, 1724, 1729, 1754, 1756, 1789, 1794, 1795, 1796, 1831, 1832, 1860, 1899, 1900, 1901, 1903, 1942, 2041, 2083, 2105, 2106, 2132, 2140, 2152, 2153, 2208, 2281, 2491, 2564, 2694, 2859, 3169, 3322, 3543, 3871, 3882, 3904, 3906, 3945, 4357, 4560, 4631, 4657, 4776, 4803, 4804, 4852, 4888, 4889, 4916, 5006, 5051, 5174, 5224, 5273, 5303, 5431, 5460, 5690, 5867, 6155], [4, 6, 11, 16, 17, 21, 23, 25, 35, 41, 42, 43, 44, 59, 81, 84, 96, 103, 106, 117, 124, 128, 131, 142, 145, 147, 154, 159, 164, 168, 173, 182, 188, 190, 201, 209, 217, 222, 226, 233, 239, 256, 258, 261, 262, 268, 272, 273, 274, 283, 296, 302, 304, 307, 308, 309, 310, 313, 318, 322, 325, 326, 334, 335, 339, 349, 353, 357, 362, 366, 370, 376, 384, 386, 391, 393, 394, 399, 400, 403, 409, 414, 416, 422, 429, 431, 435, 438, 441, 448, 457, 464, 475, 489, 492, 493, 502, 505, 508, 514, 523, 524, 526, 537, 543, 547, 548, 553, 557, 558, 562, 564, 574, 579, 585, 596, 603, 612, 613, 615, 618, 627, 644, 648, 649, 650, 663, 665, 668, 669, 671, 672, 684, 686, 692, 706, 708, 716, 719, 721, 731, 740, 743, 757, 763, 771, 772, 775, 783, 786, 794, 801, 804, 807, 811, 819, 825, 826, 834, 836, 839, 847, 849, 850, 855, 858, 860, 862, 867, 875, 876, 883, 886, 895, 907, 913, 920, 925, 939, 942, 946, 957, 961, 962, 965, 966, 967, 972, 975, 977, 983, 985, 989, 992, 1013, 1034, 1051, 1059, 1064, 1066, 1076, 1090, 1100, 1101, 1105, 1106, 1110, 1118, 1128, 1134, 1144, 1154, 1169, 1176, 1188, 1196, 1211, 1214, 1215, 1237, 1238, 1248, 1256, 1261, 1265, 1267, 1285, 1289, 1291, 1312, 1340, 1348, 1354, 1356, 1358, 1360, 1362, 1363, 1364, 1370, 1385, 1387, 1391, 1412, 1414, 1416, 1419, 1429, 1431, 1447, 1453, 1462, 1481, 1483, 1491, 1495, 1497, 1504, 1509, 1511, 1516, 1518, 1533, 1536, 1537, 1554, 1568, 1572, 1579, 1586, 1592, 1603, 1615, 1625, 1639, 1645, 1651, 1660, 1665, 1676, 1690, 1697, 1703, 1706, 1712, 1713, 1714, 1715, 1719, 1736, 1741, 1743, 1750, 1753, 1761, 1762, 1776, 1780, 1783, 1784, 1802, 1805, 1811, 1816, 1826, 1836, 1838, 1844, 1853, 1855, 1858, 1864, 1867, 1876, 1877, 1880, 1897, 1916, 1936, 1937, 1939, 1940, 1949, 1975, 1978, 1979, 1982, 1985, 1991, 1994, 1997, 1998, 2004, 2007, 2012, 2013, 2034, 2038, 2040, 2044, 2048, 2054, 2085, 2086, 2093, 2099, 2109, 2131, 2138, 2146, 2149, 2154, 2165, 2168, 2180, 2191, 2209, 2210, 2215, 2216, 2218, 2221, 2224, 2235, 2244, 2248, 2250, 2253, 2256, 2265, 2268, 2278, 2287, 2289, 2303, 2306, 2313, 2315, 2323, 2337, 2339, 2342, 2348, 2351, 2360, 2363, 2367, 2384, 2399, 2405, 2424, 2427, 2432, 2446, 2450, 2458, 2460, 2481, 2483, 2487, 2495, 2500, 2511, 2514, 2534, 2537, 2542, 2546, 2547, 2553, 2555, 2576, 2579, 2580, 2581, 2584, 2594, 2596, 2600, 2601, 2626, 2646, 2649, 2670, 2671, 2672, 2675, 2676, 2678, 2684, 2693, 2702, 2704, 2708, 2720, 2730, 2731, 2734, 2738, 2739, 2758, 2770, 2772, 2774, 2776, 2777, 2781, 2785, 2787, 2790, 2792, 2808, 2809, 2819, 2821, 2828, 2834, 2843, 2850, 2852, 2857, 2866, 2867, 2873, 2879, 2881, 2882, 2893, 2896, 2897, 2898, 2900, 2901, 2902, 2903, 2904, 2905, 2910, 2917, 2921, 2925, 2930, 2939, 2942, 2946, 2950, 2952, 2956, 2961, 2963, 2964, 2970, 2974, 2977, 2986, 2989, 2993, 2994, 3002, 3003, 3007, 3012, 3016, 3021, 3023, 3024, 3026, 3027, 3031, 3037, 3039, 3041, 3045, 3047, 3050, 3053, 3054, 3058, 3059, 3061, 3063, 3068, 3071, 3072, 3075, 3076, 3077, 3078, 3084, 3085, 3086, 3089, 3102, 3111, 3114, 3116, 3117, 3118, 3120, 3123, 3124, 3126, 3127, 3130, 3132, 3133, 3136, 3138, 3139, 3143, 3148, 3150, 3151, 3153, 3154, 3155, 3163, 3164, 3167, 3170, 3180, 3190, 3192, 3195, 3198, 3204, 3206, 3208, 3209, 3210, 3216, 3227, 3228, 3229, 3232, 3234, 3242, 3246, 3247, 3253, 3259, 3262, 3263, 3277, 3282, 3285, 3290, 3295, 3300, 3303, 3305, 3309, 3320, 3325, 3329, 3330, 3331, 3334, 3337, 3338, 3342, 3355, 3360, 3369, 3372, 3374, 3376, 3377, 3379, 3389, 3392, 3395, 3400, 3402, 3409, 3414, 3416, 3421, 3423, 3430, 3439, 3443, 3447, 3456, 3457, 3459, 3466, 3471, 3478, 3480, 3482, 3484, 3489, 3490, 3491, 3495, 3496, 3497, 3503, 3509, 3511, 3514, 3516, 3517, 3522, 3525, 3526, 3532, 3536, 3537, 3538, 3541, 3547, 3548, 3549, 3550, 3554, 3559, 3566, 3567, 3568, 3570, 3579, 3586, 3587, 3588, 3589, 3595, 3597, 3599, 3600, 3602, 3604, 3606, 3611, 3612, 3614, 3616, 3620, 3621, 3625, 3626, 3632, 3638, 3640, 3642, 3647, 3652, 3659, 3661, 3662, 3663, 3666, 3671, 3748, 3784, 3818, 3846, 3932, 3933, 4045, 4338, 4537, 4602, 4648, 4658, 4667, 4674, 4712, 4734, 4777, 4778, 4854, 4861, 4890, 4891, 4892, 4951, 5010, 5059, 5081, 5123, 5146, 5151, 5152, 5199, 5222, 5244, 5245, 5301, 5324, 5369, 5501, 5529, 5534, 6174], [10, 90, 91, 149, 150, 180, 210, 211, 229, 271, 278, 483, 693, 730, 769, 885, 892, 900, 928, 974, 976, 1040, 1063, 1129, 1135, 1138, 1163, 1178, 1197, 1226, 1319, 1374, 1386, 1392, 1400, 1420, 1427, 1441, 1457, 1469, 1519, 1544, 1550, 1567, 1612, 1623, 1644, 1685, 1751, 1760, 1774, 1827, 1833, 1871, 1885, 1896, 1906, 1911, 1913, 1926, 1941, 1943, 1947, 1958, 1959, 1976, 2005, 2006, 2039, 2070, 2074, 2076, 2104, 2111, 2122, 2186, 2252, 2326, 2327, 2370, 2377, 2404, 2418, 2472, 2613, 2615, 2620, 2631, 2664, 2688, 2718, 2737, 3335, 3425, 3426, 3770, 3820, 3938, 4271, 4649, 4656, 4718, 5074, 5080, 5124, 5305, 5351, 5374, 5404, 5432, 5485], [13, 51, 52, 92, 99, 144, 146, 179, 181, 212, 215, 218, 227, 253, 263, 267, 269, 270, 279, 280, 476, 594, 633, 636, 647, 654, 710, 745, 787, 841, 851, 944, 1009, 1023, 1036, 1037, 1043, 1050, 1065, 1125, 1133, 1164, 1171, 1205, 1219, 1246, 1251, 1279, 1282, 1283, 1290, 1292, 1296, 1320, 1344, 1347, 1359, 1361, 1388, 1390, 1394, 1423, 1464, 1471, 1528, 1553, 1555, 1583, 1587, 1591, 1598, 1608, 1614, 1616, 1627, 1634, 1637, 1667, 1689, 1699, 1702, 1722, 1752, 1757, 1759, 1793, 1800, 1829, 1865, 1872, 1886, 1909, 1910, 1938, 1951, 1961, 1972, 1989, 2001, 2003, 2008, 2061, 2066, 2068, 2069, 2089, 2100, 2110, 2143, 2194, 2205, 2225, 2245, 2249, 2254, 2257, 2262, 2272, 2282, 2332, 2347, 2380, 2401, 2407, 2421, 2434, 2459, 2475, 2484, 2544, 2636, 2818, 2880, 2909, 3178, 3239, 3252, 3424, 3529, 3539, 3563, 3576, 3651, 3679, 4484, 4530, 4802, 4813, 4953, 4990, 5005, 5008, 5102, 5228, 5276, 5323, 5633, 5951, 6304], [], [107, 371, 480, 482, 1071, 1157, 1309, 1460, 1492, 1498, 1503, 1782, 1882, 1952, 2009, 2080, 2197, 2243, 2297, 2374, 2455, 2499, 2522, 2651, 2681, 3326, 3429, 3716, 3937, 5264, 5960], [134, 143, 481, 846, 1156, 1266, 1274, 1564, 1846, 2029, 2043, 2172, 2305, 2406, 2520, 3340, 3493, 3696, 3853, 4679, 4690, 4751, 5029, 5058, 5110, 5379, 5496, 5552, 5562, 5579, 5723], [33, 49, 111, 170, 178, 255, 264, 299, 337, 484, 582, 664, 949, 956, 970, 1006, 1022, 1070, 1075, 1111, 1136, 1155, 1184, 1192, 1195, 1200, 1247, 1250, 1255, 1378, 1381, 1417, 1430, 1475, 1506, 1546, 1565, 1577, 1593, 1602, 1611, 1613, 1620, 1668, 1694, 1704, 1708, 1718, 1735, 1738, 1740, 1766, 1779, 1791, 1839, 1861, 1894, 1931, 1945, 1953, 1999, 2023, 2027, 2033, 2037, 2107, 2118, 2199, 2200, 2212, 2230, 2299, 2316, 2330, 2343, 2394, 2478, 2638, 2674, 2677, 2860, 3273, 3408, 4638, 4676, 4798, 5021, 5269, 5272, 5416, 5456, 5612, 5884, 6149, 6284], [78, 327, 352, 611, 909, 958, 998, 1202, 1209, 1355, 1526, 1574, 1580, 1599, 1707, 1763, 1773, 1874, 1928, 2090, 2142, 2181, 2201, 2290, 2307, 2392, 2448, 2453, 2528, 2988, 3301, 5267, 5275, 5508, 5580, 5807, 5876, 5905, 6378], [], [0, 38, 40, 58, 73, 82, 151, 172, 187, 191, 198, 234, 312, 319, 351, 387, 420, 485, 503, 518, 530, 566, 609, 623, 629, 645, 651, 675, 679, 681, 690, 691, 709, 725, 738, 741, 770, 799, 802, 824, 837, 838, 924, 937, 950, 953, 968, 1026, 1031, 1033, 1067, 1078, 1147, 1150, 1181, 1186, 1191, 1193, 1228, 1239, 1272, 1273, 1277, 1295, 1322, 1325, 1346, 1366, 1401, 1407, 1424, 1445, 1459, 1461, 1466, 1474, 1529, 1539, 1569, 1609, 1610, 1657, 1663, 1674, 1700, 1709, 1745, 1755, 1868, 1875, 1974, 2058, 2101, 2175, 2185, 2246, 2277, 2296, 2301, 2336, 2402, 2408, 2414, 2443, 2454, 2466, 2480, 2485, 2492, 2501, 2503, 2504, 2507, 2518, 2550, 2551, 2558, 2559, 2591, 2668, 2673, 2689, 2690, 2710, 2713, 2725, 2768, 2804, 2807, 2817, 2831, 2846, 2854, 2861, 2870, 2872, 2907, 2920, 2934, 2966, 2976, 3182, 3202, 3222, 3251, 3255, 3276, 3308, 3332, 3362, 3393, 3545, 3575, 3627, 3634, 3639, 3641, 3678, 3680, 3758, 5197, 5455, 5629, 5694, 5740, 6150], [2, 7, 46, 61, 105, 109, 116, 127, 133, 169, 214, 231, 237, 257, 275, 285, 303, 324, 336, 346, 348, 356, 392, 402, 418, 426, 446, 465, 473, 479, 536, 546, 555, 560, 626, 699, 726, 744, 866, 878, 904, 922, 929, 932, 936, 971, 1024, 1035, 1055, 1072, 1085, 1140, 1162, 1166, 1206, 1217, 1232, 1258, 1280, 1286, 1305, 1373, 1450, 1505, 1517, 1530, 1531, 1542, 1581, 1662, 1681, 1765, 1767, 1781, 1792, 1814, 1825, 1854, 1862, 1866, 1879, 1887, 1930, 1944, 1960, 1971, 1995, 2028, 2079, 2184, 2198, 2219, 2260, 2279, 2324, 2345, 2358, 2359, 2381, 2393, 2420, 2426, 2428, 2445, 2451, 2473, 2512, 2527, 2545, 2563, 2569, 2577, 2583, 2586, 2593, 2603, 2607, 2617, 2634, 2639, 2643, 2658, 2662, 2667, 2683, 2686, 2701, 2703, 2714, 2735, 2741, 2746, 2756, 2773, 2806, 2811, 2814, 2815, 2891, 2918, 2938, 2947, 2948, 2953, 2962, 2973, 2979, 2980, 2990, 2995, 3009, 3010, 3080, 3095, 3104, 3144, 3145, 3166, 3174, 3177, 3188, 3213, 3231, 3237, 3292, 3324, 3354, 3410, 3419, 3431, 3467, 3468, 3485, 3486, 3524, 3560, 3571, 3613, 3681, 3824, 3911, 4253, 4382, 4491, 4566, 4581, 4784, 4821, 4940, 4979, 5015, 5103, 5134, 5190, 5236, 5306, 5317, 5494, 5516, 5649, 5761, 6250], [39, 156, 157, 204, 252, 534, 750, 987, 990, 1002, 1142, 1174, 1185, 1229, 1327, 1395, 1479, 1641, 1869, 1912, 2010, 2016, 2032, 2084, 2121, 2144, 2164, 2170, 2293, 2383, 2385, 2389, 2397, 2423, 2462, 2497, 2517, 2635, 2637, 2767, 3001, 3051, 3055, 3064, 3091, 3098, 3099, 3101, 3105, 3107, 3108, 3110, 3115, 3128, 3137, 3181, 3217, 3218, 3219, 3220, 3223, 3225, 3226, 3235, 3238, 3249, 3256, 3257, 3264, 3269, 3270, 3271, 3272, 3274, 3278, 3279, 3283, 3284, 3289, 3291, 3293, 3296, 3298, 3302, 3304, 3306, 3311, 3312, 3313, 3315, 3316, 3319, 3321, 3327, 3328, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3349, 3350, 3353, 3356, 3357, 3358, 3363, 3364, 3365, 3368, 3370, 3378, 3384, 3413, 3436, 3445, 3446, 3454, 3458, 3461, 3464, 3483, 3499, 3501, 3508, 3519, 3592, 3601, 3608, 3609, 3619, 3649, 3654, 3676, 3710, 3712, 3778, 3947, 4230, 4464, 4501, 4516, 4517, 4526, 4572, 4610, 4724, 4731, 4757, 4780, 4896, 4925, 4937, 4996, 5020, 5032, 5039, 5128, 5282, 5336, 5350, 5354, 5382, 5388, 5421, 5447, 5479, 5511, 5558, 5626, 5639, 5675, 5682, 5710, 5726, 5747, 5788, 5903, 5953, 6133, 6246, 6269, 6299], [3, 5, 8, 9, 12, 14, 22, 26, 27, 28, 30, 31, 34, 37, 45, 47, 53, 54, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 80, 83, 85, 87, 93, 94, 98, 100, 104, 108, 112, 113, 114, 121, 122, 129, 130, 132, 136, 138, 140, 141, 152, 153, 155, 158, 161, 162, 163, 166, 167, 183, 184, 186, 192, 194, 203, 205, 207, 216, 221, 223, 224, 225, 232, 235, 236, 241, 242, 243, 244, 245, 247, 249, 250, 251, 254, 265, 276, 284, 287, 289, 291, 292, 293, 294, 298, 300, 311, 315, 321, 323, 331, 332, 340, 347, 354, 358, 360, 363, 367, 368, 372, 374, 378, 385, 390, 396, 404, 405, 406, 407, 410, 424, 433, 439, 443, 449, 450, 452, 453, 456, 460, 466, 469, 474, 477, 486, 487, 488, 490, 491, 494, 495, 497, 498, 499, 500, 506, 507, 510, 513, 520, 521, 527, 528, 529, 531, 532, 533, 535, 538, 539, 544, 545, 549, 550, 552, 554, 565, 567, 568, 569, 570, 571, 575, 577, 580, 586, 587, 588, 593, 595, 599, 602, 610, 616, 621, 622, 625, 628, 630, 632, 637, 642, 643, 656, 657, 658, 660, 661, 662, 667, 673, 674, 678, 680, 682, 687, 688, 694, 695, 697, 701, 703, 705, 707, 711, 713, 714, 717, 718, 722, 724, 727, 728, 734, 736, 737, 739, 748, 751, 752, 755, 760, 765, 766, 768, 778, 779, 780, 781, 782, 788, 790, 791, 793, 796, 798, 800, 805, 806, 808, 813, 814, 815, 818, 821, 822, 829, 831, 832, 833, 842, 845, 853, 854, 859, 861, 864, 869, 870, 872, 877, 879, 881, 884, 888, 889, 891, 893, 894, 896, 898, 899, 902, 903, 905, 906, 910, 911, 915, 916, 917, 918, 921, 926, 927, 931, 933, 940, 941, 943, 952, 955, 959, 964, 969, 978, 979, 980, 981, 984, 986, 988, 993, 995, 999, 1007, 1010, 1011, 1012, 1014, 1020, 1021, 1025, 1027, 1028, 1030, 1038, 1042, 1048, 1052, 1054, 1056, 1057, 1058, 1060, 1061, 1073, 1074, 1077, 1080, 1081, 1082, 1084, 1087, 1088, 1092, 1096, 1098, 1102, 1103, 1104, 1108, 1109, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1137, 1139, 1141, 1143, 1145, 1146, 1151, 1152, 1153, 1158, 1159, 1167, 1168, 1170, 1172, 1173, 1175, 1180, 1187, 1198, 1201, 1203, 1204, 1210, 1212, 1216, 1223, 1224, 1227, 1231, 1233, 1234, 1235, 1236, 1242, 1245, 1252, 1253, 1257, 1262, 1269, 1270, 1276, 1278, 1281, 1284, 1287, 1294, 1302, 1304, 1310, 1311, 1313, 1315, 1321, 1323, 1328, 1331, 1332, 1333, 1341, 1342, 1345, 1351, 1352, 1353, 1357, 1365, 1367, 1368, 1369, 1372, 1375, 1377, 1379, 1382, 1389, 1397, 1399, 1402, 1404, 1406, 1408, 1409, 1410, 1415, 1418, 1421, 1425, 1432, 1435, 1436, 1437, 1438, 1439, 1440, 1443, 1444, 1446, 1455, 1456, 1458, 1468, 1472, 1476, 1477, 1480, 1482, 1485, 1488, 1489, 1490, 1493, 1494, 1496, 1502, 1508, 1513, 1514, 1515, 1524, 1525, 1527, 1534, 1535, 1543, 1548, 1556, 1557, 1559, 1560, 1561, 1570, 1573, 1575, 1578, 1582, 1584, 1585, 1589, 1594, 1596, 1604, 1605, 1606, 1607, 1617, 1618, 1619, 1621, 1622, 1624, 1626, 1636, 1642, 1643, 1646, 1647, 1648, 1649, 1650, 1653, 1654, 1655, 1656, 1658, 1670, 1673, 1677, 1678, 1683, 1687, 1688, 1692, 1696, 1698, 1701, 1705, 1716, 1717, 1721, 1723, 1726, 1727, 1728, 1730, 1737, 1739, 1744, 1747, 1748, 1749, 1764, 1769, 1771, 1772, 1778, 1785, 1787, 1788, 1797, 1801, 1806, 1808, 1809, 1813, 1815, 1817, 1819, 1820, 1821, 1822, 1828, 1830, 1834, 1848, 1850, 1857, 1863, 1870, 1883, 1889, 1892, 1893, 1895, 1902, 1904, 1908, 1914, 1917, 1918, 1920, 1921, 1922, 1923, 1924, 1925, 1929, 1932, 1935, 1948, 1954, 1957, 1962, 1964, 1965, 1966, 1967, 1969, 1977, 1980, 1981, 1987, 1988, 1993, 1996, 2011, 2014, 2015, 2018, 2019, 2020, 2021, 2025, 2031, 2035, 2036, 2042, 2045, 2046, 2049, 2052, 2053, 2055, 2057, 2062, 2063, 2064, 2065, 2067, 2071, 2072, 2075, 2077, 2078, 2082, 2087, 2088, 2091, 2094, 2096, 2097, 2098, 2103, 2108, 2112, 2114, 2116, 2123, 2124, 2125, 2128, 2133, 2134, 2135, 2145, 2147, 2155, 2156, 2157, 2158, 2160, 2162, 2173, 2177, 2178, 2179, 2183, 2187, 2188, 2189, 2190, 2195, 2196, 2202, 2203, 2204, 2214, 2223, 2226, 2228, 2233, 2236, 2239, 2240, 2241, 2247, 2251, 2255, 2258, 2261, 2266, 2271, 2275, 2283, 2284, 2286, 2292, 2294, 2295, 2298, 2302, 2304, 2309, 2310, 2318, 2319, 2321, 2322, 2325, 2328, 2329, 2333, 2338, 2340, 2344, 2352, 2353, 2354, 2355, 2357, 2365, 2366, 2368, 2371, 2373, 2375, 2379, 2382, 2387, 2388, 2390, 2395, 2396, 2400, 2403, 2411, 2412, 2415, 2417, 2422, 2429, 2431, 2433, 2435, 2436, 2437, 2440, 2442, 2449, 2457, 2461, 2464, 2465, 2468, 2469, 2470, 2471, 2474, 2477, 2479, 2486, 2488, 2489, 2494, 2508, 2509, 2515, 2516, 2519, 2521, 2524, 2525, 2529, 2530, 2533, 2535, 2538, 2540, 2554, 2556, 2557, 2560, 2561, 2562, 2568, 2570, 2572, 2574, 2578, 2585, 2587, 2592, 2595, 2598, 2599, 2608, 2609, 2610, 2612, 2614, 2619, 2621, 2625, 2627, 2629, 2633, 2641, 2644, 2645, 2652, 2654, 2655, 2657, 2660, 2663, 2665, 2666, 2685, 2691, 2692, 2696, 2697, 2700, 2707, 2709, 2711, 2715, 2716, 2722, 2723, 2724, 2726, 2728, 2729, 2733, 2740, 2742, 2747, 2749, 2751, 2755, 2757, 2760, 2762, 2766, 2769, 2778, 2779, 2780, 2783, 2786, 2789, 2794, 2795, 2796, 2801, 2802, 2810, 2822, 2824, 2837, 2839, 2840, 2849, 2864, 2875, 2877, 2878, 2885, 2886, 2895, 2906, 2908, 2913, 2915, 2919, 2937, 2943, 2944, 2945, 2951, 2958, 2972, 2978, 2985, 2987, 2991, 2997, 3000, 3004, 3005, 3014, 3015, 3017, 3018, 3025, 3033, 3043, 3044, 3048, 3057, 3092, 3096, 3131, 3212, 3214, 3230, 3261, 3267, 3275, 3286, 3294, 3297, 3347, 3351, 3352, 3367, 3371, 3383, 3407, 3411, 3420, 3442, 3450, 3453, 3460, 3500, 3504, 3520, 3533, 3540, 3544, 3565, 3573, 3577, 3583, 3593, 3596, 3603, 3623, 3670, 3673, 3682, 3686, 3690, 3697, 3721, 3730, 3732, 3737, 3746, 3772, 3773, 3782, 3783, 3788, 3796, 3799, 3804, 3816, 3823, 3829, 3841, 3857, 3872, 3878, 3913, 3928, 3936, 3998, 4018, 4019, 4063, 4075, 4088, 4108, 4109, 4127, 4180, 4188, 4224, 4274, 4281, 4306, 4317, 4329, 4334, 4335, 4336, 4344, 4367, 4372, 4375, 4407, 4432, 4446, 4451, 4482, 4511, 4524, 4547, 4557, 4576, 4577, 4589, 4595, 4596, 4598, 4636, 4639, 4677, 4692, 4695, 4696, 4697, 4715, 4723, 4728, 4732, 4737, 4743, 4744, 4762, 4782, 4786, 4810, 4816, 4826, 4842, 4845, 4847, 4862, 4867, 4901, 4918, 4939, 4944, 4945, 4964, 4976, 4981, 5013, 5034, 5035, 5047, 5048, 5050, 5054, 5069, 5071, 5079, 5088, 5098, 5099, 5106, 5107, 5108, 5114, 5118, 5122, 5137, 5138, 5144, 5157, 5169, 5175, 5182, 5184, 5192, 5200, 5284, 5286, 5291, 5310, 5326, 5359, 5391, 5393, 5399, 5407, 5433, 5449, 5476, 5510, 5526, 5542, 5563, 5586, 5592, 5609, 5614, 5617, 5623, 5642, 5648, 5650, 5654, 5659, 5665, 5669, 5677, 5679, 5692, 5695, 5700, 5702, 5722, 5746, 5753, 5757, 5762, 5779, 5786, 5805, 5854, 5883, 5898, 5907, 5998, 6009, 6020, 6280], []], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]])))

    def test_with_sym_c1_method_S(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'c1', 'S')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'c1', 'S')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[3317], [], [213, 4803, 5273, 5867], [272, 357, 432, 600, 1169, 1303, 1360, 1936, 2694, 3906, 4777, 4888, 4889, 4951, 5245], [], [], [525, 666, 1442, 1452, 2496, 2805, 3094, 4860], [3674], [], [], [], [1, 51, 52, 88, 92, 97, 179, 181, 208, 212, 215, 218, 227, 230, 253, 259, 267, 270, 594, 636, 640, 654, 710, 745, 774, 787, 851, 954, 982, 1004, 1008, 1032, 1036, 1037, 1050, 1095, 1099, 1125, 1161, 1165, 1171, 1194, 1219, 1225, 1246, 1251, 1254, 1263, 1282, 1290, 1296, 1318, 1320, 1330, 1347, 1356, 1359, 1384, 1390, 1394, 1422, 1423, 1431, 1520, 1528, 1547, 1549, 1587, 1591, 1608, 1616, 1637, 1652, 1664, 1666, 1667, 1689, 1691, 1699, 1714, 1722, 1724, 1750, 1752, 1753, 1756, 1759, 1761, 1793, 1794, 1795, 1796, 1800, 1811, 1829, 1831, 1836, 1838, 1865, 1872, 1886, 1899, 1901, 1903, 1909, 1938, 1978, 1989, 2008, 2041, 2066, 2068, 2069, 2083, 2105, 2106, 2110, 2140, 2143, 2153, 2208, 2225, 2257, 2262, 2282, 2332, 2347, 2407, 2421, 2459, 2475, 2491, 2544, 2564, 2636, 2818, 2859, 2909, 3178, 3322, 3576, 3651, 3871, 3882, 3904, 3945, 4357, 4484, 4530, 4560, 4631, 4657, 4658, 4712, 4776, 4802, 4804, 4813, 4852, 4861, 4892, 4916, 4953, 4990, 5005, 5006, 5010, 5051, 5102, 5174, 5224, 5228, 5244, 5276, 5303, 5323, 5431, 5460, 5633, 5690, 5951], [103, 117, 150, 182, 268, 403, 409, 476, 786, 801, 819, 1034, 1059, 1064, 1134, 1138, 1176, 1196, 1238, 1256, 1261, 1285, 1319, 1385, 1387, 1391, 1419, 1457, 1503, 1516, 1518, 1536, 1579, 1651, 1660, 1690, 1712, 1713, 1897, 1937, 1939, 1940, 1943, 1975, 1998, 2006, 2076, 2104, 2287, 2418, 2681, 3263, 3599, 3606, 3748, 3770, 3784, 3818, 3846, 3932, 3933, 3937, 4338, 4537, 4602, 4648, 4667, 4674, 4734, 4778, 4854, 4890, 4891, 5059, 5081, 5123, 5146, 5151, 5152, 5222, 5301, 5305, 5324, 5369, 5374, 5501, 5529, 5534], [10, 89, 90, 91, 149, 180, 210, 211, 229, 271, 278, 730, 769, 885, 892, 900, 928, 963, 974, 976, 1040, 1063, 1129, 1130, 1135, 1163, 1197, 1226, 1260, 1288, 1374, 1386, 1392, 1393, 1420, 1427, 1441, 1449, 1469, 1519, 1544, 1545, 1550, 1554, 1567, 1612, 1623, 1644, 1685, 1751, 1754, 1760, 1774, 1789, 1827, 1832, 1833, 1860, 1871, 1896, 1900, 1906, 1911, 1913, 1926, 1941, 1942, 1947, 1958, 1959, 1976, 2005, 2039, 2070, 2074, 2111, 2122, 2132, 2252, 2326, 2327, 2370, 2377, 2613, 2615, 2620, 2631, 2664, 2718, 2737, 3335, 3426, 3543, 3820, 3938, 4656, 4718, 5074, 5080, 5124, 5404, 5432, 5485], [], [], [], [277, 834, 1473, 1878, 2138, 2590, 4532, 6174, 6328], [590, 777, 785, 1888, 2539, 2682, 2688, 3109, 3731, 3800, 3819, 4020, 5444, 5588, 6028], [185, 1317, 1672, 1729, 2152, 2161, 2169, 2281, 3169, 3792, 6155], [266, 4045, 5199], [], [], [], [484, 1043, 1344, 1464, 2484, 5416], [13, 99, 111, 144, 146, 178, 263, 269, 279, 280, 337, 633, 647, 944, 949, 1006, 1009, 1022, 1023, 1070, 1133, 1164, 1195, 1205, 1250, 1255, 1283, 1361, 1378, 1381, 1388, 1430, 1471, 1475, 1506, 1553, 1555, 1577, 1583, 1602, 1613, 1614, 1627, 1668, 1702, 1708, 1738, 1757, 1766, 1839, 1861, 1931, 1953, 1961, 1972, 2001, 2003, 2023, 2027, 2033, 2037, 2061, 2089, 2107, 2200, 2205, 2245, 2249, 2254, 2380, 2401, 2434, 2880, 3252, 3408, 3424, 3563, 4638], [78, 371, 480, 482, 909, 1157, 1292, 1634, 1763, 1910, 1951, 2080, 2100, 2181, 2197, 2243, 2374, 3539, 3716, 5008, 5264], [143, 483, 846, 1156, 1266, 1309, 1492, 1564, 1846, 2029, 2172, 2186, 2472, 2520, 3326, 3493, 3853, 5058, 5579], [3340, 4649, 4690, 4751, 5029, 5351, 5496, 5552, 5562, 5723], [], [], [], [], [96, 481, 1358, 2248, 2250, 2305, 2406, 2672], [693, 1178, 1274, 1400, 2675, 2843], [841, 1279, 1885, 2194, 2272, 2404, 3239, 3425, 3529, 3679, 4271, 6304], [107, 1065, 1460, 1598, 2009, 2455, 5960], [1498, 1782, 2522, 3429, 3489], [], [], [], [], [], [49, 170, 299, 664, 956, 970, 1075, 1111, 1136, 1546, 1593, 1620, 1779, 1894, 1912, 2212, 2394, 2860, 3001, 5612, 5884, 6149], [33, 87, 141, 255, 264, 352, 500, 760, 778, 793, 921, 952, 998, 1002, 1155, 1172, 1184, 1192, 1200, 1202, 1209, 1242, 1247, 1313, 1375, 1417, 1526, 1565, 1574, 1599, 1646, 1694, 1704, 1707, 1718, 1735, 1740, 1791, 1869, 1874, 1923, 1945, 1999, 2090, 2091, 2118, 2133, 2142, 2190, 2201, 2230, 2290, 2307, 2316, 2318, 2330, 2340, 2343, 2392, 2448, 2453, 2638, 2645, 2711, 3301, 5508, 5580], [58, 770, 958, 960, 1355, 1569, 1609, 1773, 1873, 1875, 1928, 2101, 2447, 2480, 2689], [134, 1305, 1879, 2043, 2428, 2668, 2703, 2768, 3410, 3824, 4253, 4581, 4679, 4940, 5015, 5134, 5197, 5306, 5379, 5455, 6250], [169, 1450, 2593, 3696, 3778, 4382, 4491, 4566, 4821, 4896, 4979, 5103, 5110, 5190, 5236, 5494, 5516, 5649, 5761], [], [], [], [], [], [1140, 1581], [356, 582, 1229, 2299, 3298, 5021, 5953], [1611, 2199, 2478, 2674, 2677, 3273, 3351, 4676, 4798, 5269, 5272, 5456, 5807, 5876, 6284], [530, 2528, 2988, 5694, 5905], [0, 40, 46, 82, 109, 151, 187, 237, 275, 319, 418, 446, 518, 536, 566, 609, 623, 626, 645, 679, 681, 738, 741, 744, 799, 802, 878, 937, 968, 971, 1026, 1031, 1067, 1071, 1078, 1147, 1150, 1186, 1191, 1217, 1232, 1280, 1286, 1295, 1322, 1325, 1366, 1401, 1466, 1529, 1530, 1531, 1542, 1663, 1700, 1745, 1755, 1765, 1781, 1868, 1882, 1952, 1960, 1974, 2058, 2184, 2185, 2246, 2277, 2297, 2336, 2393, 2408, 2414, 2443, 2445, 2451, 2454, 2466, 2473, 2485, 2492, 2499, 2507, 2512, 2518, 2527, 2559, 2577, 2639, 2651, 2658, 2667, 2673, 2690, 2701, 2741, 2746, 2804, 2815, 2854, 2891, 2907, 2934, 2962, 2966, 2973, 2976, 3010, 3104, 3145, 3182, 3354, 3393, 3634, 3641, 3680, 5740], [699, 922, 932, 1024, 1206, 1814, 2324, 2662, 2686, 3681], [], [], [], [], [], [4495, 6133], [5, 8, 26, 57, 72, 74, 100, 129, 138, 183, 186, 205, 224, 236, 244, 251, 254, 289, 292, 298, 389, 404, 405, 424, 425, 433, 447, 471, 499, 507, 532, 534, 539, 545, 565, 571, 674, 678, 717, 724, 734, 737, 751, 832, 859, 893, 906, 911, 914, 917, 933, 951, 978, 987, 1011, 1014, 1020, 1025, 1027, 1028, 1042, 1045, 1052, 1054, 1073, 1080, 1088, 1092, 1102, 1143, 1167, 1174, 1198, 1201, 1212, 1227, 1231, 1259, 1321, 1323, 1341, 1353, 1368, 1382, 1395, 1403, 1436, 1480, 1482, 1489, 1557, 1604, 1607, 1635, 1636, 1641, 1642, 1692, 1693, 1701, 1749, 1769, 1772, 1778, 1785, 1808, 1820, 1837, 1914, 1948, 1966, 1992, 2016, 2019, 2020, 2031, 2052, 2071, 2073, 2084, 2087, 2088, 2121, 2123, 2147, 2217, 2228, 2239, 2241, 2258, 2259, 2284, 2286, 2294, 2298, 2319, 2328, 2333, 2355, 2385, 2411, 2440, 2449, 2474, 2489, 2494, 2523, 2530, 2535, 2556, 2587, 2599, 2608, 2609, 2696, 2700, 2716, 2722, 2829, 2875, 2941, 2996, 3017, 3520, 3691, 3693, 3695, 3697, 3698, 3699, 3702, 3703, 3705, 3706, 3707, 3711, 3712, 3717, 3718, 3721, 3723, 3726, 3727, 3730, 3732, 3737, 3739, 3741, 3746, 3754, 3757, 3761, 3762, 3767, 3772, 3773, 3774, 3779, 3780, 3782, 3783, 3785, 3786, 3788, 3794, 3796, 3798, 3799, 3802, 3803, 3804, 3805, 3808, 3812, 3813, 3815, 3816, 3821, 3822, 3823, 3826, 3829, 3830, 3834, 3835, 3836, 3837, 3839, 3841, 3843, 3845, 3847, 3851, 3857, 3858, 3860, 3867, 3869, 3872, 3874, 3875, 3876, 3877, 3878, 3880, 3881, 3883, 3885, 3886, 3891, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3905, 3907, 3908, 3912, 3913, 3915, 3917, 3919, 3922, 3924, 3926, 3927, 3928, 3929, 3931, 3936, 3941, 3944, 3946, 3947, 3948, 3950, 3952, 3954, 3957, 3958, 3961, 3962, 3963, 3964, 3974, 3976, 3977, 3986, 3990, 3998, 4000, 4001, 4005, 4006, 4009, 4010, 4014, 4015, 4016, 4018, 4019, 4026, 4029, 4030, 4032, 4033, 4037, 4042, 4044, 4051, 4052, 4053, 4054, 4059, 4060, 4061, 4063, 4064, 4066, 4073, 4075, 4082, 4088, 4090, 4096, 4099, 4100, 4101, 4102, 4107, 4108, 4109, 4111, 4112, 4113, 4118, 4121, 4123, 4125, 4127, 4128, 4133, 4136, 4150, 4158, 4159, 4161, 4162, 4165, 4173, 4176, 4177, 4179, 4180, 4182, 4183, 4184, 4188, 4189, 4190, 4191, 4192, 4198, 4199, 4201, 4204, 4206, 4209, 4212, 4214, 4217, 4221, 4224, 4225, 4227, 4230, 4231, 4233, 4234, 4237, 4239, 4241, 4244, 4245, 4246, 4247, 4258, 4259, 4261, 4264, 4265, 4270, 4274, 4275, 4276, 4277, 4278, 4279, 4281, 4286, 4293, 4301, 4302, 4306, 4314, 4317, 4323, 4324, 4326, 4329, 4331, 4333, 4334, 4335, 4337, 4339, 4342, 4344, 4348, 4349, 4351, 4354, 4359, 4364, 4366, 4367, 4368, 4370, 4371, 4372, 4373, 4375, 4377, 4379, 4380, 4389, 4390, 4393, 4397, 4398, 4399, 4400, 4401, 4402, 4407, 4412, 4413, 4416, 4419, 4422, 4426, 4427, 4430, 4432, 4435, 4437, 4438, 4439, 4446, 4447, 4449, 4451, 4452, 4454, 4455, 4458, 4460, 4464, 4469, 4470, 4473, 4477, 4478, 4480, 4481, 4482, 4486, 4487, 4488, 4490, 4493, 4494, 4499, 4501, 4502, 4504, 4506, 4511, 4512, 4516, 4517, 4518, 4520, 4521, 4524, 4525, 4526, 4529, 4531, 4533, 4535, 4536, 4538, 4543, 4545, 4547, 4548, 4553, 4557, 4559, 4563, 4565, 4568, 4570, 4572, 4573, 4574, 4576, 4577, 4582, 4583, 4586, 4587, 4589, 4590, 4591, 4594, 4595, 4596, 4598, 4600, 4604, 4606, 4609, 4610, 4612, 4615, 4617, 4622, 4623, 4624, 4625, 4633, 4636, 4639, 4642, 4643, 4644, 4647, 4650, 4660, 4661, 4662, 4663, 4665, 4666, 4671, 4673, 4677, 4678, 4681, 4684, 4692, 4693, 4695, 4696, 4697, 4698, 4700, 4710, 4711, 4713, 4715, 4721, 4723, 4724, 4725, 4728, 4732, 4736, 4737, 4740, 4741, 4743, 4744, 4746, 4747, 4749, 4752, 4754, 4756, 4757, 4758, 4759, 4762, 4774, 4782, 4783, 4786, 4787, 4788, 4792, 4793, 4796, 4799, 4800, 4806, 4807, 4808, 4810, 4816, 4817, 4819, 4822, 4825, 4826, 4828, 4832, 4834, 4835, 4836, 4841, 4842, 4843, 4847, 4850, 4853, 4855, 4857, 4862, 4865, 4867, 4871, 4874, 4876, 4878, 4879, 4880, 4887, 4893, 4894, 4897, 4898, 4901, 4902, 4906, 4907, 4910, 4911, 4914, 4917, 4918, 4920, 4921, 4922, 4928, 4929, 4937, 4938, 4939, 4941, 4944, 4945, 4947, 4949, 4952, 4956, 4960, 4961, 4962, 4963, 4964, 4965, 4967, 4972, 4974, 4976, 4977, 4982, 4983, 4985, 4986, 4988, 4989, 4993, 4994, 4996, 4998, 5000, 5001, 5007, 5009, 5013, 5016, 5017, 5018, 5020, 5022, 5026, 5028, 5030, 5031, 5032, 5033, 5035, 5036, 5037, 5038, 5039, 5041, 5045, 5046, 5048, 5050, 5052, 5053, 5054, 5056, 5057, 5061, 5063, 5067, 5069, 5071, 5072, 5078, 5079, 5083, 5085, 5086, 5088, 5095, 5097, 5099, 5101, 5106, 5107, 5108, 5109, 5111, 5114, 5116, 5117, 5118, 5122, 5128, 5130, 5133, 5135, 5137, 5138, 5139, 5142, 5144, 5148, 5149, 5150, 5154, 5157, 5158, 5163, 5167, 5169, 5170, 5171, 5172, 5173, 5175, 5181, 5182, 5183, 5184, 5191, 5192, 5193, 5194, 5195, 5196, 5200, 5203, 5204, 5210, 5215, 5217, 5220, 5225, 5226, 5227, 5229, 5230, 5232, 5234, 5235, 5237, 5238, 5246, 5250, 5256, 5257, 5261, 5262, 5270, 5271, 5279, 5281, 5282, 5283, 5284, 5286, 5288, 5290, 5291, 5293, 5296, 5298, 5304, 5307, 5309, 5310, 5311, 5312, 5313, 5314, 5318, 5321, 5322, 5325, 5326, 5327, 5328, 5331, 5335, 5336, 5338, 5339, 5342, 5343, 5352, 5356, 5358, 5361, 5362, 5363, 5364, 5367, 5368, 5370, 5373, 5377, 5378, 5382, 5383, 5387, 5388, 5391, 5392, 5395, 5396, 5398, 5399, 5400, 5401, 5403, 5407, 5408, 5413, 5414, 5418, 5420, 5421, 5422, 5424, 5428, 5433, 5436, 5441, 5442, 5445, 5446, 5447, 5449, 5451, 5452, 5454, 5458, 5459, 5462, 5464, 5465, 5468, 5469, 5471, 5472, 5473, 5474, 5476, 5477, 5479, 5482, 5484, 5486, 5492, 5497, 5500, 5503, 5507, 5509, 5510, 5511, 5512, 5513, 5515, 5517, 5522, 5526, 5527, 5530, 5533, 5535, 5537, 5539, 5540, 5542, 5545, 5546, 5547, 5555, 5556, 5557, 5558, 5561, 5563, 5564, 5565, 5570, 5574, 5576, 5581, 5586, 5589, 5592, 5594, 5596, 5597, 5598, 5600, 5604, 5605, 5607, 5609, 5614, 5615, 5617, 5620, 5622, 5623, 5626, 5627, 5630, 5634, 5638, 5640, 5642, 5644, 5645, 5648, 5650, 5651, 5652, 5653, 5654, 5659, 5660, 5662, 5665, 5669, 5672, 5673, 5675, 5677, 5679, 5680, 5681, 5682, 5685, 5688, 5691, 5692, 5693, 5695, 5696, 5697, 5698, 5699, 5700, 5702, 5703, 5704, 5705, 5707, 5710, 5712, 5716, 5717, 5719, 5722, 5725, 5726, 5732, 5733, 5736, 5738, 5743, 5744, 5746, 5747, 5750, 5753, 5754, 5756, 5757, 5758, 5762, 5764, 5765, 5766, 5768, 5771, 5774, 5778, 5779, 5781, 5783, 5786, 5788, 5789, 5792, 5793, 5794, 5795, 5798, 5801, 5805, 5806, 5808, 5811, 5812, 5814, 5820, 5825, 5828, 5829, 5831, 5832, 5838, 5840, 5841, 5843, 5846, 5849, 5851, 5852, 5854, 5860, 5861, 5862, 5863, 5864, 5871, 5872, 5873, 5874, 5881, 5883, 5885, 5888, 5889, 5892, 5894, 5895, 5896, 5898, 5899, 5901, 5903, 5907, 5908, 5910, 5912, 5920, 5921, 5922, 5924, 5925, 5927, 5928, 5933, 5937, 5938, 5940, 5948, 5950, 5961, 5968, 5969, 5971, 5972, 5975, 5977, 5978, 5982, 5987, 5988, 5989, 5998, 6000, 6009, 6014, 6015, 6018, 6024, 6026, 6035, 6036, 6037, 6046, 6058, 6074, 6077, 6078, 6080, 6084, 6091, 6098, 6103, 6115, 6116, 6121, 6129, 6135, 6137, 6138, 6143, 6152, 6157, 6158, 6160, 6172, 6177, 6197, 6200, 6238, 6253, 6267, 6276, 6280, 6294, 6313, 6321, 6326, 6347, 6349, 6356, 6373, 6385, 6404], [3, 9, 12, 14, 27, 28, 30, 31, 34, 37, 43, 45, 47, 53, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 80, 83, 85, 93, 94, 98, 104, 108, 112, 113, 114, 121, 122, 124, 130, 132, 136, 140, 142, 152, 153, 154, 155, 158, 159, 161, 162, 163, 166, 167, 175, 184, 192, 194, 203, 207, 216, 217, 221, 223, 225, 232, 235, 239, 241, 242, 245, 247, 249, 250, 265, 273, 276, 284, 287, 291, 293, 294, 310, 311, 315, 323, 331, 332, 335, 339, 340, 347, 354, 358, 360, 362, 363, 367, 368, 372, 374, 378, 385, 390, 396, 406, 407, 410, 416, 439, 443, 449, 450, 452, 453, 456, 460, 464, 466, 469, 474, 475, 477, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 506, 510, 513, 520, 521, 526, 527, 528, 529, 531, 533, 535, 538, 547, 549, 550, 552, 553, 554, 567, 568, 569, 570, 575, 577, 580, 586, 587, 588, 593, 595, 599, 602, 611, 616, 621, 622, 625, 628, 630, 632, 637, 642, 643, 650, 656, 657, 658, 660, 661, 662, 667, 668, 669, 673, 680, 682, 687, 688, 694, 695, 697, 701, 703, 705, 707, 711, 713, 714, 718, 722, 727, 728, 736, 739, 740, 752, 755, 765, 766, 768, 771, 772, 779, 780, 781, 782, 788, 790, 791, 796, 804, 805, 806, 813, 814, 815, 818, 821, 822, 831, 833, 842, 845, 853, 854, 861, 864, 869, 870, 872, 876, 877, 879, 881, 884, 888, 889, 891, 894, 896, 899, 902, 903, 905, 910, 916, 918, 925, 926, 927, 931, 939, 940, 941, 943, 955, 964, 966, 969, 979, 980, 981, 984, 986, 988, 992, 993, 995, 999, 1007, 1010, 1012, 1021, 1030, 1038, 1048, 1051, 1056, 1057, 1058, 1060, 1061, 1074, 1077, 1081, 1082, 1084, 1087, 1096, 1098, 1101, 1103, 1104, 1108, 1110, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1137, 1139, 1141, 1145, 1146, 1151, 1152, 1153, 1158, 1159, 1168, 1170, 1173, 1175, 1180, 1187, 1203, 1204, 1210, 1216, 1223, 1224, 1233, 1234, 1235, 1236, 1245, 1252, 1253, 1257, 1262, 1265, 1269, 1270, 1276, 1278, 1281, 1284, 1287, 1294, 1302, 1304, 1310, 1311, 1312, 1315, 1328, 1331, 1332, 1333, 1340, 1345, 1351, 1352, 1357, 1362, 1363, 1365, 1367, 1369, 1370, 1371, 1372, 1377, 1379, 1389, 1397, 1399, 1402, 1404, 1406, 1408, 1409, 1410, 1411, 1415, 1418, 1421, 1425, 1432, 1435, 1437, 1438, 1439, 1440, 1443, 1444, 1446, 1447, 1455, 1456, 1458, 1462, 1468, 1472, 1476, 1477, 1481, 1485, 1488, 1490, 1493, 1494, 1495, 1496, 1497, 1502, 1508, 1511, 1513, 1514, 1515, 1524, 1525, 1527, 1534, 1535, 1543, 1548, 1556, 1559, 1560, 1561, 1568, 1570, 1573, 1575, 1578, 1580, 1582, 1584, 1585, 1586, 1589, 1594, 1596, 1605, 1606, 1617, 1618, 1619, 1621, 1622, 1624, 1626, 1643, 1647, 1648, 1649, 1650, 1653, 1654, 1655, 1656, 1658, 1670, 1673, 1677, 1678, 1683, 1687, 1688, 1696, 1698, 1703, 1705, 1716, 1717, 1721, 1723, 1726, 1727, 1728, 1730, 1737, 1739, 1744, 1747, 1748, 1764, 1771, 1776, 1787, 1788, 1797, 1801, 1806, 1809, 1813, 1815, 1817, 1819, 1821, 1822, 1828, 1834, 1848, 1850, 1853, 1857, 1858, 1863, 1864, 1870, 1883, 1889, 1892, 1893, 1895, 1902, 1904, 1908, 1917, 1918, 1920, 1921, 1922, 1924, 1925, 1929, 1932, 1935, 1954, 1957, 1962, 1964, 1967, 1969, 1977, 1980, 1981, 1987, 1988, 1993, 1996, 2011, 2015, 2021, 2025, 2035, 2036, 2038, 2042, 2045, 2046, 2049, 2053, 2055, 2057, 2062, 2063, 2064, 2065, 2067, 2072, 2075, 2077, 2078, 2082, 2086, 2094, 2096, 2097, 2098, 2103, 2112, 2114, 2116, 2124, 2125, 2128, 2134, 2135, 2145, 2149, 2155, 2156, 2157, 2158, 2160, 2162, 2165, 2173, 2177, 2178, 2179, 2183, 2187, 2188, 2189, 2195, 2202, 2203, 2204, 2210, 2214, 2223, 2224, 2226, 2233, 2236, 2240, 2247, 2251, 2261, 2266, 2271, 2275, 2283, 2285, 2292, 2302, 2304, 2309, 2310, 2321, 2322, 2325, 2329, 2338, 2342, 2344, 2351, 2353, 2354, 2357, 2365, 2366, 2368, 2371, 2373, 2375, 2379, 2382, 2387, 2388, 2390, 2395, 2396, 2400, 2403, 2412, 2415, 2417, 2422, 2429, 2431, 2435, 2436, 2437, 2457, 2460, 2461, 2464, 2465, 2468, 2469, 2470, 2471, 2477, 2479, 2481, 2486, 2488, 2508, 2509, 2515, 2519, 2521, 2524, 2525, 2529, 2533, 2534, 2537, 2538, 2540, 2554, 2557, 2560, 2561, 2562, 2568, 2570, 2572, 2574, 2578, 2585, 2592, 2595, 2598, 2601, 2610, 2612, 2619, 2621, 2625, 2629, 2633, 2641, 2644, 2652, 2654, 2655, 2657, 2660, 2663, 2665, 2666, 2685, 2691, 2692, 2697, 2702, 2707, 2709, 2715, 2720, 2724, 2726, 2728, 2729, 2733, 2740, 2742, 2747, 2749, 2755, 2757, 2760, 2762, 2778, 2779, 2780, 2781, 2783, 2786, 2789, 2794, 2795, 2796, 2801, 2802, 2810, 2819, 2822, 2824, 2837, 2839, 2840, 2849, 2850, 2864, 2877, 2878, 2885, 2886, 2893, 2895, 2906, 2908, 2913, 2915, 2919, 2937, 2943, 2944, 2945, 2951, 2958, 2972, 2978, 2987, 2989, 2991, 2997, 3000, 3002, 3004, 3005, 3014, 3018, 3021, 3025, 3033, 3043, 3044, 3048, 3057, 3072, 3089, 3143, 3208, 3212, 3216, 3265, 3294, 3450, 3453, 3490, 3504, 3525, 3533, 3540, 3544, 3565, 3573, 3577, 3593, 3603, 3623, 3638, 3661, 3670, 3673, 3682, 3686, 3690, 4336, 4981, 5047, 5359, 5393], [573, 1069, 1566, 2386, 2531, 2606, 2761, 2855, 2982, 3266, 3462, 3643, 3776, 3862, 4105, 4181, 4709, 4770, 4849, 5145, 5277, 5385, 5976, 6063], [48, 511, 723, 1264, 1551, 1552, 1662, 1732, 1862, 2056, 2764, 3268, 3452, 3668, 3764, 3934, 4635, 4708, 4730, 4923, 4955, 4971, 5104, 5125, 5417, 5481, 5536, 5666, 5689, 5709, 5835], [119, 1162, 1177, 1258, 2079, 3633, 3710, 3760, 3790, 3850, 4094, 4731, 4742, 4771, 4780, 4784, 4809, 5354, 5498, 5538, 5639, 5655, 5674, 5737, 5813, 5816, 5842, 5869, 5915, 6050], [], [], [], [], [], [], [116, 257, 348, 479, 936, 1866, 2359, 2381, 2714, 3095, 3299, 3560, 3911, 5317], [156, 157, 204, 252, 473, 750, 990, 1142, 1185, 1327, 1479, 1505, 2010, 2032, 2144, 2164, 2170, 2293, 2383, 2389, 2397, 2423, 2462, 2497, 2517, 2634, 2635, 2637, 2767, 3051, 3055, 3064, 3091, 3098, 3099, 3101, 3107, 3108, 3110, 3115, 3128, 3181, 3205, 3217, 3218, 3220, 3223, 3225, 3226, 3235, 3249, 3256, 3257, 3269, 3270, 3271, 3272, 3274, 3278, 3279, 3283, 3284, 3291, 3296, 3302, 3306, 3307, 3311, 3313, 3319, 3321, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3349, 3350, 3353, 3356, 3357, 3363, 3364, 3365, 3368, 3370, 3378, 3384, 3413, 3436, 3439, 3445, 3446, 3454, 3458, 3464, 3483, 3499, 3501, 3508, 3519, 3592, 3609, 3619, 3654, 3676, 4925, 5350, 5506, 5752, 6232, 6233, 6246, 6299], [39, 54, 798, 800, 808, 2196, 2352, 2399, 2442, 2516, 3096, 3131, 3214, 3219, 3230, 3261, 3264, 3267, 3275, 3282, 3286, 3289, 3293, 3297, 3300, 3304, 3316, 3325, 3327, 3347, 3352, 3358, 3367, 3371, 3383, 3411, 3442, 3460, 3500, 3583, 3649, 4845, 5034, 5098, 6020], [297, 327, 924, 2232, 2402, 2816, 3704, 3758, 3791, 4039, 4292, 4307, 4365, 4436, 4578, 4629, 4689, 4707, 4735, 5267, 5275, 5302, 5483, 5499, 5502, 5587, 5629, 5667, 6150, 6244, 6378], [7, 38, 61, 73, 79, 105, 127, 172, 176, 191, 198, 231, 234, 285, 303, 312, 324, 336, 346, 351, 375, 387, 392, 402, 420, 426, 465, 485, 503, 546, 555, 559, 560, 572, 629, 651, 675, 690, 691, 704, 709, 725, 824, 837, 838, 866, 904, 929, 950, 953, 1000, 1017, 1033, 1053, 1055, 1072, 1085, 1089, 1166, 1181, 1193, 1213, 1228, 1239, 1272, 1273, 1277, 1346, 1350, 1407, 1424, 1445, 1459, 1461, 1474, 1501, 1517, 1522, 1539, 1563, 1576, 1610, 1657, 1674, 1686, 1709, 1767, 1770, 1792, 1854, 1884, 1887, 1891, 1944, 1971, 1995, 2028, 2150, 2171, 2175, 2198, 2206, 2220, 2260, 2263, 2291, 2296, 2301, 2317, 2341, 2345, 2358, 2361, 2420, 2501, 2503, 2504, 2510, 2536, 2545, 2550, 2551, 2558, 2563, 2569, 2573, 2583, 2586, 2591, 2603, 2607, 2617, 2659, 2710, 2713, 2725, 2735, 2756, 2773, 2799, 2803, 2806, 2807, 2811, 2814, 2817, 2831, 2846, 2861, 2869, 2870, 2872, 2894, 2918, 2920, 2927, 2938, 2947, 2948, 2953, 2990, 3009, 3060, 3080, 3090, 3134, 3140, 3144, 3165, 3166, 3174, 3177, 3188, 3197, 3202, 3221, 3222, 3237, 3251, 3255, 3258, 3260, 3276, 3281, 3292, 3308, 3324, 3332, 3359, 3362, 3419, 3431, 3433, 3467, 3468, 3485, 3486, 3505, 3515, 3524, 3527, 3545, 3556, 3558, 3575, 3580, 3605, 3613, 3627, 3639, 3653, 3655, 3678, 3687], [2, 133, 214, 726, 1035, 1373, 1681, 1825, 1930, 2219, 2279, 2426, 2643, 2683, 2979, 2980, 2995, 3213, 3215, 3231, 3571, 4621, 4934, 5735, 6252, 6255, 6320], [], [], [], [], [], [], [126, 3935, 3993, 4050, 4156, 4420, 4851, 4932, 5248, 5409, 5628, 5755, 5836, 5955, 6112, 6194, 6290, 6355, 6372, 6393], [6, 11, 15, 17, 18, 19, 20, 22, 23, 24, 25, 29, 35, 36, 41, 42, 50, 59, 71, 76, 77, 81, 84, 86, 95, 101, 102, 110, 118, 120, 123, 125, 135, 137, 139, 145, 147, 148, 160, 164, 165, 173, 174, 177, 188, 189, 190, 193, 195, 196, 197, 199, 200, 201, 206, 209, 219, 220, 222, 226, 228, 233, 238, 240, 243, 246, 248, 258, 260, 261, 262, 274, 282, 286, 288, 290, 295, 300, 301, 302, 304, 305, 306, 307, 308, 309, 313, 314, 316, 317, 318, 320, 321, 322, 325, 326, 329, 330, 333, 334, 338, 341, 342, 343, 344, 345, 349, 350, 353, 355, 359, 361, 364, 365, 366, 369, 370, 373, 376, 377, 379, 380, 381, 382, 383, 384, 386, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 408, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 448, 451, 454, 455, 457, 458, 459, 461, 462, 463, 467, 468, 470, 472, 478, 492, 493, 496, 501, 502, 504, 505, 508, 509, 512, 514, 515, 516, 517, 519, 522, 523, 524, 537, 540, 541, 542, 543, 548, 551, 556, 557, 558, 561, 563, 574, 576, 579, 581, 583, 584, 585, 589, 591, 592, 596, 597, 598, 601, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 617, 618, 619, 620, 624, 627, 631, 634, 635, 638, 639, 641, 644, 646, 648, 649, 652, 653, 655, 659, 663, 665, 670, 671, 676, 677, 683, 685, 686, 689, 692, 696, 698, 700, 702, 706, 708, 712, 715, 716, 719, 720, 721, 729, 731, 732, 733, 735, 742, 743, 746, 747, 748, 749, 753, 754, 756, 758, 759, 761, 762, 763, 764, 767, 773, 775, 776, 784, 789, 792, 794, 795, 797, 803, 807, 809, 810, 811, 812, 816, 817, 820, 823, 825, 826, 827, 828, 829, 830, 835, 836, 839, 840, 843, 844, 848, 849, 850, 852, 855, 856, 857, 858, 860, 862, 863, 865, 867, 868, 871, 873, 874, 875, 880, 882, 886, 887, 890, 895, 897, 898, 901, 907, 908, 912, 915, 919, 920, 923, 930, 934, 935, 938, 942, 946, 947, 948, 957, 959, 961, 962, 967, 972, 973, 975, 977, 983, 985, 989, 991, 994, 996, 997, 1001, 1003, 1005, 1013, 1015, 1016, 1018, 1019, 1029, 1041, 1044, 1046, 1047, 1049, 1062, 1066, 1068, 1076, 1079, 1083, 1086, 1090, 1091, 1093, 1094, 1097, 1105, 1107, 1109, 1112, 1115, 1116, 1117, 1118, 1120, 1122, 1128, 1131, 1132, 1144, 1148, 1160, 1179, 1183, 1190, 1199, 1207, 1208, 1211, 1214, 1215, 1218, 1220, 1221, 1222, 1230, 1237, 1240, 1241, 1243, 1244, 1248, 1249, 1268, 1271, 1275, 1289, 1293, 1297, 1298, 1299, 1300, 1301, 1306, 1307, 1308, 1314, 1316, 1324, 1326, 1329, 1334, 1335, 1336, 1337, 1338, 1339, 1342, 1343, 1349, 1354, 1364, 1376, 1383, 1396, 1398, 1405, 1412, 1413, 1414, 1416, 1426, 1428, 1433, 1434, 1448, 1451, 1453, 1454, 1463, 1465, 1467, 1470, 1478, 1484, 1486, 1487, 1491, 1499, 1500, 1507, 1509, 1510, 1512, 1521, 1523, 1532, 1533, 1537, 1538, 1540, 1541, 1562, 1571, 1572, 1588, 1590, 1592, 1595, 1597, 1600, 1601, 1603, 1615, 1628, 1629, 1630, 1631, 1632, 1633, 1638, 1639, 1645, 1659, 1661, 1665, 1669, 1671, 1675, 1676, 1679, 1680, 1682, 1684, 1695, 1697, 1710, 1711, 1719, 1720, 1725, 1733, 1734, 1742, 1743, 1768, 1775, 1777, 1783, 1786, 1790, 1798, 1799, 1803, 1804, 1805, 1807, 1810, 1812, 1816, 1818, 1823, 1824, 1826, 1830, 1835, 1841, 1842, 1843, 1844, 1845, 1847, 1849, 1851, 1852, 1855, 1856, 1859, 1867, 1876, 1877, 1880, 1881, 1890, 1898, 1905, 1907, 1915, 1916, 1919, 1927, 1933, 1934, 1946, 1949, 1950, 1955, 1956, 1963, 1965, 1968, 1970, 1973, 1979, 1982, 1983, 1984, 1986, 1990, 1991, 1997, 2000, 2002, 2004, 2007, 2012, 2014, 2017, 2018, 2022, 2024, 2026, 2030, 2034, 2044, 2047, 2048, 2050, 2051, 2054, 2059, 2060, 2081, 2085, 2092, 2099, 2102, 2108, 2109, 2113, 2115, 2117, 2119, 2120, 2126, 2127, 2129, 2130, 2131, 2136, 2137, 2139, 2141, 2146, 2148, 2151, 2159, 2163, 2166, 2167, 2174, 2176, 2180, 2182, 2191, 2192, 2193, 2207, 2209, 2211, 2213, 2215, 2216, 2218, 2222, 2227, 2229, 2231, 2234, 2235, 2237, 2238, 2244, 2255, 2265, 2267, 2268, 2269, 2270, 2273, 2274, 2276, 2278, 2280, 2288, 2289, 2295, 2300, 2303, 2306, 2308, 2311, 2312, 2314, 2315, 2320, 2323, 2331, 2335, 2337, 2339, 2346, 2348, 2349, 2350, 2356, 2360, 2362, 2363, 2364, 2367, 2369, 2372, 2376, 2384, 2391, 2398, 2409, 2410, 2413, 2416, 2419, 2424, 2425, 2430, 2433, 2438, 2439, 2441, 2446, 2450, 2452, 2456, 2458, 2463, 2467, 2476, 2482, 2483, 2487, 2493, 2498, 2502, 2506, 2511, 2513, 2514, 2526, 2532, 2541, 2542, 2543, 2546, 2548, 2549, 2552, 2553, 2555, 2565, 2566, 2567, 2571, 2575, 2576, 2579, 2580, 2581, 2582, 2584, 2588, 2589, 2594, 2596, 2597, 2600, 2602, 2604, 2605, 2611, 2614, 2616, 2618, 2622, 2623, 2624, 2627, 2628, 2630, 2632, 2640, 2642, 2647, 2648, 2650, 2653, 2656, 2661, 2670, 2671, 2676, 2678, 2679, 2680, 2684, 2687, 2693, 2695, 2698, 2699, 2704, 2705, 2706, 2712, 2717, 2719, 2721, 2723, 2727, 2730, 2732, 2734, 2736, 2738, 2743, 2744, 2745, 2748, 2750, 2752, 2753, 2754, 2758, 2759, 2763, 2765, 2766, 2769, 2770, 2771, 2772, 2774, 2775, 2776, 2777, 2782, 2784, 2785, 2787, 2788, 2790, 2791, 2792, 2793, 2797, 2798, 2800, 2808, 2809, 2812, 2813, 2820, 2821, 2823, 2825, 2826, 2827, 2830, 2832, 2833, 2834, 2835, 2836, 2838, 2841, 2842, 2844, 2845, 2847, 2848, 2851, 2852, 2853, 2856, 2857, 2858, 2862, 2863, 2865, 2866, 2867, 2868, 2871, 2873, 2874, 2876, 2879, 2881, 2882, 2883, 2884, 2887, 2888, 2889, 2890, 2892, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2905, 2910, 2911, 2912, 2914, 2916, 2917, 2921, 2922, 2923, 2924, 2925, 2926, 2928, 2929, 2930, 2931, 2932, 2933, 2935, 2936, 2939, 2940, 2942, 2946, 2949, 2950, 2952, 2954, 2955, 2956, 2957, 2959, 2960, 2961, 2963, 2964, 2965, 2967, 2968, 2969, 2970, 2971, 2974, 2977, 2981, 2983, 2984, 2985, 2986, 2992, 2993, 2994, 2998, 2999, 3003, 3006, 3007, 3008, 3011, 3012, 3013, 3015, 3016, 3019, 3020, 3022, 3023, 3026, 3028, 3029, 3030, 3032, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3045, 3046, 3047, 3049, 3050, 3052, 3053, 3054, 3056, 3058, 3059, 3061, 3062, 3063, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3073, 3074, 3075, 3076, 3077, 3079, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3092, 3093, 3097, 3100, 3102, 3103, 3105, 3106, 3111, 3112, 3113, 3114, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3125, 3126, 3127, 3129, 3130, 3132, 3133, 3136, 3137, 3138, 3139, 3141, 3142, 3146, 3147, 3148, 3149, 3150, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3162, 3163, 3164, 3167, 3168, 3170, 3171, 3172, 3173, 3175, 3176, 3179, 3180, 3183, 3184, 3185, 3186, 3187, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3198, 3199, 3200, 3201, 3203, 3204, 3206, 3207, 3209, 3210, 3211, 3224, 3227, 3228, 3232, 3233, 3234, 3236, 3238, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3250, 3253, 3254, 3259, 3262, 3285, 3287, 3288, 3290, 3295, 3303, 3305, 3309, 3310, 3312, 3314, 3315, 3318, 3320, 3323, 3328, 3329, 3331, 3334, 3337, 3338, 3346, 3355, 3360, 3366, 3369, 3372, 3373, 3374, 3375, 3376, 3377, 3379, 3380, 3381, 3382, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3409, 3412, 3414, 3415, 3416, 3417, 3418, 3420, 3421, 3422, 3423, 3428, 3430, 3432, 3434, 3435, 3437, 3438, 3440, 3441, 3443, 3444, 3447, 3448, 3449, 3451, 3455, 3456, 3457, 3459, 3461, 3463, 3465, 3466, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3484, 3487, 3488, 3491, 3492, 3494, 3495, 3496, 3498, 3502, 3503, 3506, 3507, 3509, 3510, 3511, 3512, 3513, 3516, 3517, 3518, 3521, 3522, 3523, 3526, 3528, 3530, 3531, 3532, 3534, 3535, 3537, 3538, 3541, 3542, 3546, 3547, 3548, 3549, 3551, 3552, 3553, 3554, 3555, 3557, 3559, 3561, 3562, 3564, 3567, 3568, 3569, 3570, 3572, 3574, 3578, 3579, 3581, 3582, 3584, 3585, 3587, 3588, 3589, 3590, 3591, 3594, 3595, 3596, 3597, 3598, 3600, 3601, 3602, 3604, 3607, 3608, 3610, 3611, 3612, 3614, 3615, 3616, 3617, 3618, 3620, 3621, 3622, 3624, 3625, 3626, 3628, 3629, 3630, 3631, 3632, 3635, 3636, 3640, 3642, 3644, 3645, 3646, 3647, 3648, 3650, 3652, 3656, 3657, 3658, 3659, 3660, 3662, 3663, 3664, 3665, 3666, 3669, 3671, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3692, 3694, 3700, 3701, 3708, 3709, 3713, 3715, 3719, 3720, 3722, 3724, 3725, 3728, 3729, 3733, 3734, 3735, 3736, 3738, 3740, 3742, 3743, 3744, 3745, 3747, 3749, 3750, 3751, 3752, 3753, 3755, 3756, 3759, 3763, 3765, 3766, 3768, 3769, 3771, 3775, 3777, 3781, 3787, 3789, 3793, 3795, 3797, 3801, 3806, 3807, 3809, 3810, 3811, 3814, 3817, 3825, 3827, 3828, 3831, 3832, 3833, 3838, 3840, 3842, 3844, 3848, 3849, 3852, 3854, 3855, 3856, 3859, 3861, 3863, 3864, 3865, 3866, 3868, 3870, 3873, 3879, 3884, 3887, 3888, 3889, 3890, 3892, 3893, 3902, 3903, 3909, 3910, 3914, 3916, 3918, 3920, 3921, 3923, 3925, 3930, 3939, 3940, 3942, 3943, 3949, 3951, 3953, 3955, 3956, 3959, 3960, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3975, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3987, 3988, 3989, 3991, 3992, 3994, 3995, 3996, 3997, 3999, 4002, 4003, 4004, 4007, 4008, 4011, 4012, 4013, 4017, 4021, 4022, 4023, 4024, 4025, 4027, 4028, 4031, 4034, 4035, 4036, 4038, 4040, 4041, 4043, 4046, 4047, 4048, 4049, 4055, 4056, 4057, 4058, 4062, 4065, 4067, 4068, 4069, 4070, 4071, 4072, 4074, 4076, 4077, 4078, 4079, 4080, 4081, 4083, 4084, 4085, 4086, 4087, 4089, 4091, 4092, 4093, 4095, 4097, 4098, 4103, 4104, 4106, 4110, 4114, 4115, 4116, 4117, 4119, 4120, 4122, 4124, 4126, 4129, 4130, 4131, 4132, 4134, 4135, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4151, 4152, 4153, 4154, 4155, 4157, 4160, 4163, 4164, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4174, 4175, 4178, 4185, 4187, 4193, 4194, 4195, 4196, 4197, 4200, 4202, 4203, 4205, 4207, 4208, 4210, 4211, 4213, 4215, 4216, 4218, 4219, 4220, 4222, 4223, 4226, 4228, 4229, 4232, 4235, 4236, 4238, 4240, 4242, 4243, 4248, 4249, 4250, 4251, 4252, 4254, 4255, 4256, 4257, 4260, 4262, 4263, 4266, 4267, 4268, 4269, 4272, 4273, 4280, 4282, 4283, 4284, 4285, 4287, 4288, 4289, 4290, 4291, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4303, 4304, 4305, 4308, 4309, 4310, 4311, 4312, 4313, 4315, 4316, 4318, 4319, 4320, 4321, 4322, 4325, 4327, 4328, 4330, 4332, 4340, 4341, 4343, 4345, 4346, 4347, 4350, 4352, 4353, 4355, 4356, 4358, 4360, 4361, 4362, 4363, 4369, 4374, 4376, 4378, 4381, 4383, 4384, 4385, 4386, 4387, 4388, 4391, 4392, 4394, 4395, 4396, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4414, 4415, 4417, 4418, 4421, 4423, 4424, 4425, 4428, 4429, 4431, 4433, 4434, 4440, 4441, 4442, 4443, 4444, 4445, 4448, 4450, 4453, 4456, 4457, 4459, 4461, 4462, 4463, 4465, 4466, 4467, 4468, 4471, 4472, 4474, 4475, 4476, 4479, 4483, 4485, 4489, 4492, 4496, 4497, 4498, 4500, 4503, 4505, 4507, 4508, 4509, 4510, 4513, 4514, 4515, 4519, 4522, 4523, 4527, 4528, 4534, 4539, 4540, 4541, 4542, 4544, 4546, 4549, 4550, 4551, 4552, 4554, 4555, 4556, 4558, 4561, 4562, 4564, 4567, 4569, 4571, 4575, 4579, 4580, 4584, 4585, 4588, 4592, 4593, 4597, 4599, 4601, 4603, 4605, 4607, 4608, 4611, 4613, 4614, 4616, 4618, 4619, 4620, 4626, 4627, 4628, 4630, 4632, 4634, 4637, 4640, 4641, 4645, 4646, 4651, 4652, 4653, 4654, 4655, 4659, 4664, 4668, 4669, 4670, 4672, 4675, 4680, 4682, 4683, 4685, 4686, 4687, 4688, 4691, 4694, 4699, 4701, 4702, 4703, 4704, 4705, 4706, 4714, 4716, 4717, 4719, 4720, 4722, 4726, 4727, 4729, 4733, 4738, 4739, 4745, 4748, 4750, 4753, 4755, 4760, 4761, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4775, 4779, 4781, 4785, 4789, 4790, 4791, 4794, 4795, 4797, 4801, 4805, 4811, 4812, 4814, 4815, 4818, 4820, 4823, 4824, 4827, 4829, 4830, 4831, 4833, 4837, 4838, 4839, 4840, 4844, 4846, 4848, 4856, 4858, 4859, 4863, 4864, 4866, 4868, 4869, 4870, 4872, 4873, 4875, 4877, 4881, 4882, 4883, 4884, 4885, 4886, 4895, 4899, 4900, 4903, 4904, 4905, 4908, 4909, 4912, 4913, 4915, 4919, 4924, 4926, 4927, 4930, 4931, 4933, 4935, 4936, 4942, 4943, 4946, 4948, 4950, 4954, 4957, 4958, 4959, 4966, 4968, 4969, 4970, 4973, 4975, 4978, 4980, 4984, 4987, 4991, 4992, 4995, 4997, 5002, 5003, 5004, 5011, 5012, 5014, 5019, 5023, 5024, 5025, 5027, 5040, 5042, 5043, 5044, 5049, 5055, 5060, 5062, 5064, 5065, 5066, 5068, 5070, 5073, 5075, 5076, 5077, 5082, 5084, 5087, 5089, 5090, 5091, 5092, 5093, 5094, 5096, 5100, 5105, 5112, 5113, 5115, 5119, 5120, 5121, 5126, 5127, 5129, 5131, 5132, 5136, 5140, 5141, 5143, 5147, 5153, 5155, 5156, 5159, 5160, 5161, 5162, 5164, 5165, 5166, 5168, 5176, 5177, 5178, 5179, 5180, 5185, 5186, 5187, 5188, 5189, 5198, 5201, 5202, 5205, 5206, 5207, 5208, 5209, 5211, 5212, 5213, 5214, 5216, 5218, 5219, 5221, 5223, 5231, 5233, 5239, 5240, 5241, 5242, 5243, 5247, 5249, 5251, 5252, 5253, 5254, 5255, 5258, 5259, 5260, 5263, 5265, 5266, 5268, 5274, 5278, 5280, 5285, 5287, 5289, 5292, 5294, 5295, 5297, 5299, 5300, 5308, 5315, 5316, 5319, 5320, 5329, 5330, 5332, 5333, 5334, 5337, 5340, 5341, 5344, 5345, 5346, 5347, 5348, 5349, 5353, 5355, 5357, 5360, 5365, 5366, 5371, 5372, 5375, 5376, 5380, 5381, 5384, 5386, 5389, 5390, 5397, 5402, 5405, 5406, 5410, 5411, 5412, 5415, 5419, 5423, 5425, 5426, 5427, 5429, 5430, 5434, 5435, 5437, 5438, 5439, 5440, 5443, 5448, 5450, 5453, 5457, 5461, 5463, 5466, 5467, 5470, 5475, 5478, 5480, 5487, 5488, 5489, 5490, 5491, 5493, 5495, 5504, 5505, 5514, 5518, 5519, 5520, 5521, 5523, 5524, 5525, 5528, 5532, 5541, 5543, 5544, 5548, 5549, 5550, 5551, 5553, 5554, 5559, 5560, 5566, 5567, 5568, 5569, 5571, 5572, 5573, 5575, 5577, 5578, 5582, 5583, 5584, 5585, 5590, 5591, 5593, 5595, 5599, 5601, 5602, 5603, 5606, 5608, 5610, 5611, 5613, 5616, 5618, 5621, 5624, 5625, 5631, 5632, 5635, 5637, 5641, 5643, 5646, 5647, 5656, 5657, 5658, 5661, 5663, 5664, 5668, 5670, 5671, 5676, 5678, 5683, 5684, 5686, 5687, 5701, 5706, 5708, 5711, 5713, 5714, 5715, 5718, 5720, 5721, 5724, 5728, 5729, 5730, 5731, 5734, 5739, 5741, 5742, 5745, 5748, 5749, 5751, 5759, 5760, 5763, 5767, 5769, 5770, 5772, 5773, 5775, 5776, 5777, 5780, 5782, 5784, 5785, 5787, 5790, 5791, 5796, 5797, 5799, 5800, 5802, 5803, 5804, 5809, 5810, 5815, 5817, 5818, 5819, 5821, 5822, 5823, 5824, 5826, 5827, 5830, 5833, 5834, 5837, 5839, 5844, 5845, 5847, 5848, 5850, 5853, 5855, 5856, 5857, 5858, 5859, 5865, 5866, 5868, 5870, 5875, 5877, 5878, 5879, 5882, 5886, 5887, 5890, 5891, 5893, 5897, 5900, 5902, 5904, 5906, 5909, 5911, 5913, 5914, 5916, 5917, 5918, 5919, 5923, 5926, 5929, 5930, 5931, 5932, 5934, 5935, 5936, 5939, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5949, 5952, 5954, 5956, 5957, 5958, 5959, 5962, 5963, 5964, 5965, 5966, 5967, 5970, 5973, 5974, 5979, 5980, 5981, 5983, 5984, 5985, 5986, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5999, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6010, 6011, 6012, 6013, 6016, 6017, 6019, 6021, 6022, 6023, 6025, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6047, 6048, 6049, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6075, 6076, 6079, 6081, 6082, 6083, 6085, 6086, 6087, 6088, 6089, 6090, 6092, 6093, 6094, 6095, 6096, 6097, 6099, 6100, 6101, 6102, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6113, 6114, 6117, 6118, 6119, 6120, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6130, 6131, 6132, 6134, 6136, 6139, 6140, 6141, 6142, 6144, 6145, 6146, 6147, 6148, 6151, 6153, 6154, 6156, 6159, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6173, 6175, 6176, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6198, 6199, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6234, 6235, 6236, 6237, 6239, 6240, 6241, 6242, 6243, 6245, 6247, 6248, 6249, 6251, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6277, 6278, 6279, 6281, 6282, 6283, 6285, 6286, 6287, 6288, 6289, 6292, 6295, 6296, 6297, 6298, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6314, 6315, 6316, 6317, 6318, 6322, 6323, 6324, 6325, 6327, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6348, 6350, 6351, 6352, 6353, 6354, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6386, 6387, 6388, 6390, 6391, 6392, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419], [4, 16, 21, 44, 106, 128, 131, 168, 256, 283, 296, 544, 562, 564, 672, 684, 757, 783, 847, 883, 913, 945, 965, 1100, 1106, 1154, 1188, 1267, 1291, 1348, 1429, 1483, 1504, 1625, 1706, 1715, 1736, 1741, 1762, 1780, 1784, 1802, 1985, 1994, 2013, 2040, 2093, 2154, 2168, 2221, 2253, 2256, 2313, 2405, 2427, 2432, 2495, 2500, 2547, 2626, 2646, 2649, 2708, 2731, 2739, 2751, 2828, 2904, 3024, 3027, 3031, 3078, 3124, 3151, 3229, 3277, 3330, 3342, 3497, 3514, 3536, 3550, 3566, 3586], [75, 578, 1189, 1746, 2242, 2378, 2975, 3361, 3427], [32, 115, 171, 202, 281, 328, 1039, 1149, 1182, 1380, 1558, 1640, 1731, 1758, 1840, 2095, 2264, 2334, 2444, 2490, 2505, 2669, 3135, 3280, 3637, 3667, 3978, 4186, 4999, 5394, 5619, 5636, 6291, 6319, 6361], [3161, 3714, 5531, 5727, 5880, 6164, 6257, 6293, 6389], []], [[0.0, 0.0, 0.0], [103.10941180192563, 8.3648752678618958, 0.0], [176.21450628042055, 11.840273881876096, 0.0], [236.06567303731981, 14.514303081558177, 0.0], [288.03896258192111, 16.774744264095403, 0.0], [334.65212472788477, 18.771666189212812, 0.0], [17.320665881035382, 20.581969211500514, 0.0], [56.93303390011404, 22.251299640054558, 0.0], [94.089796407092493, 23.809376225696244, 0.0], [129.21924576643349, 25.27682691656447, 0.0], [162.63945091780187, 26.668660597354688, 0.0], [194.5942533593051, 27.996200493836653, 0.0], [225.27544022149684, 29.268238325258856, 0.0], [254.83707261705493, 30.491761757790488, 0.0], [283.40511428823197, 31.672433426416607, 0.0], [311.08411657570718, 32.814917946018149, 0.0], [337.96198959682874, 33.923112003259213, 0.0], [4.1134892483376575, 35.000310475444778, 0.0], [29.60281804202976, 36.049329053620667, 0.0], [54.485601484913772, 37.072596525218906, 0.0], [78.810412451731764, 38.072225413642641, 0.0], [102.61996477563827, 39.050066871297375, 0.0], [125.95205935497097, 40.007753913485175, 0.0], [148.84034277218166, 40.946735883139567, 0.0], [171.31492190766434, 41.868306226292802, 0.0], [193.40286659732473, 42.773625099278647, 0.0], [215.12862428281286, 43.663737936199425, 0.0], [236.51436477689751, 44.539590825107041, 0.0], [257.5802690164162, 45.402043338524194, 0.0], [278.34477253506691, 46.251879315068301, 0.0], [298.8247720406049, 47.089815978324047, 0.0], [319.03580170651145, 47.916511695972396, 0.0], [338.99218443330994, 48.732572619036205, 0.0], [358.7071622904154, 49.538558392666999, 0.0], [18.19300963741847, 50.334987092406848, 0.0], [37.461131087151983, 51.122339510591601, 0.0], [56.522148070016584, 51.901062894532814, 0.0], [75.38597385890661, 52.671574219858329, 0.0], [94.061880093523726, 53.434263067816588, 0.0], [112.55855548442202, 54.189494163637207, 0.0], [130.88415786750079, 54.937609623569593, 0.0], [149.04636050865906, 55.678930950517618, 0.0], [167.05239341807666, 56.413760811888345, 0.0], [184.90908031797213, 57.142384628092266, 0.0], [202.62287181191573, 57.865071995851814, 0.0], [220.19987522407473, 58.582077966921432, 0.0], [237.64588151014897, 59.293644199858242, 0.0], [254.96638958583773, 60.000000000000007, 0.0], [272.16662837155565, 60.70136326071934, 0.0], [289.25157681225221, 61.39794131726056, 0.0], [306.22598209734565, 62.089931722971258, 0.0], [323.09437627694581, 62.777522956471202, 0.0], [339.8610914458917, 63.460895067215752, 0.0], [356.53027364599154, 64.140220265984055, 0.0], [13.105895718668648, 64.815663466024077, 0.0], [29.591768624530079, 65.487382779900017, 0.0], [45.99155283280313, 66.155529976495018, 0.0], [62.30876787180928, 66.820250902106835, 0.0], [78.54680162140626, 67.481685869128711, 0.0], [94.708918819398605, 68.13997001541874, 0.0], [110.79826894611286, 68.795233637120731, 0.0], [126.81789354449648, 69.44760249740412, 0.0], [142.77073302709655, 70.097198113328304, 0.0], [158.65963301599265, 70.744138022809352, 0.0], [174.48735025710221, 71.388536033464305, 0.0], [190.25655814616263, 72.030502454931167, 0.0], [205.9698519000554, 72.67014431610464, 0.0], [221.62975340390906, 73.307565568589141, 0.0], [237.23871576155324, 73.942867277546171, 0.0], [252.79912757434613, 74.576147801003884, 0.0], [268.31331697112819, 75.207502958598496, 0.0], [283.78355541002907, 75.837026190630382, 0.0], [299.21206127104648, 76.464808708239275, 0.0], [314.60100325669839, 77.09093963543441, 0.0], [329.95250361660271, 77.715506143652135, 0.0], [345.26864121054132, 78.338593579458959, 0.0], [0.55145452340394741, 78.960285585967029, 0.0], [15.802944044363288, 79.580664218485097, 0.0], [31.025075521698739, 80.19981005488745, 0.0], [46.219782103845169, 80.817802301147381, 0.0], [61.388966876490883, 81.43471889244924, 0.0], [76.534505204872943, 82.050636590264745, 0.0], [91.658246989813023, 82.665631075752216, 0.0], [106.76201884549539, 83.279777039814959, 0.0], [121.84762620650507, 83.893148270134077, 0.0], [136.91685537121364, 84.505817735472007, 0.0], [151.97147548821775, 85.117857667526891, 0.0], [167.01324049219787, 85.729339640603513, 0.0], [182.04389099526841, 86.340334649353068, 0.0], [197.06515613963234, 86.950913184823222, 0.0], [212.07875541713094, 87.561145309050133, 0.0], [227.08640046109076, 88.171100728415553, 0.0], [242.0897968157137, 88.78084886598522, 0.0], [257.09064568812886, 89.390458933039241, 0.0], [272.09064568812886, 90.0, 0.0]])))

    def test_with_sym_oct_method_S(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'oct1', 'S')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'oct1', 'S')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[24, 116, 123, 126, 157, 350, 395, 397, 432, 473, 479, 525, 591, 666, 773, 852, 908, 936, 973, 1094, 1220, 1335, 1428, 1479, 1505, 1807, 1866, 1950, 2115, 2174, 2623, 2632, 2634, 2640, 2694, 2714, 2750, 2771, 2848, 2889, 2916, 2922, 3022, 3056, 3065, 3094, 3095, 3103, 3106, 3119, 3125, 3189, 3196, 3205, 3218, 3226, 3233, 3236, 3241, 3250, 3287, 3299, 3307, 3310, 3314, 3315, 3317, 3318, 3366, 3373, 3381, 3382, 3394, 3399, 3404, 3413, 3435, 3437, 3438, 3441, 3470, 3474, 3518, 3528, 3560, 3561, 3578, 3581, 3598, 3610, 3619, 3672, 3692, 3700, 3703, 3706, 3708, 3709, 3713, 3717, 3719, 3722, 3725, 3727, 3728, 3736, 3738, 3740, 3742, 3744, 3747, 3753, 3755, 3759, 3765, 3769, 3771, 3777, 3787, 3789, 3795, 3798, 3801, 3802, 3805, 3806, 3811, 3815, 3821, 3826, 3827, 3828, 3831, 3833, 3838, 3840, 3844, 3848, 3852, 3854, 3856, 3861, 3867, 3868, 3870, 3875, 3876, 3877, 3881, 3883, 3887, 3889, 3890, 3891, 3892, 3893, 3902, 3909, 3910, 3911, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3923, 3927, 3929, 3931, 3935, 3939, 3942, 3943, 3948, 3949, 3953, 3955, 3959, 3960, 3962, 3963, 3964, 3965, 3966, 3967, 3971, 3977, 3979, 3980, 3981, 3986, 3989, 3992, 3993, 3995, 3996, 3997, 3999, 4003, 4007, 4012, 4022, 4023, 4024, 4027, 4029, 4030, 4031, 4032, 4034, 4035, 4037, 4038, 4040, 4043, 4044, 4049, 4050, 4056, 4062, 4066, 4067, 4068, 4069, 4070, 4071, 4074, 4076, 4077, 4081, 4083, 4084, 4085, 4086, 4087, 4089, 4090, 4092, 4093, 4097, 4098, 4100, 4101, 4102, 4104, 4106, 4110, 4112, 4114, 4115, 4117, 4119, 4122, 4125, 4128, 4129, 4130, 4132, 4133, 4135, 4136, 4137, 4138, 4139, 4141, 4142, 4144, 4146, 4147, 4148, 4149, 4150, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4160, 4163, 4164, 4166, 4167, 4168, 4169, 4170, 4171, 4174, 4175, 4176, 4183, 4187, 4189, 4190, 4191, 4194, 4196, 4197, 4199, 4200, 4201, 4203, 4205, 4207, 4208, 4211, 4212, 4213, 4215, 4216, 4218, 4219, 4220, 4222, 4223, 4226, 4228, 4231, 4235, 4237, 4238, 4244, 4251, 4255, 4260, 4264, 4269, 4272, 4273, 4280, 4282, 4283, 4286, 4288, 4289, 4291, 4294, 4296, 4297, 4299, 4301, 4302, 4304, 4309, 4312, 4318, 4319, 4322, 4326, 4330, 4342, 4345, 4346, 4347, 4353, 4354, 4356, 4359, 4360, 4361, 4362, 4364, 4370, 4373, 4374, 4376, 4379, 4380, 4384, 4385, 4387, 4392, 4394, 4398, 4399, 4400, 4403, 4404, 4405, 4408, 4409, 4410, 4411, 4412, 4413, 4415, 4417, 4419, 4420, 4421, 4423, 4424, 4428, 4431, 4439, 4442, 4443, 4445, 4448, 4453, 4455, 4456, 4457, 4461, 4462, 4463, 4465, 4467, 4468, 4470, 4472, 4475, 4479, 4481, 4485, 4486, 4487, 4489, 4490, 4495, 4496, 4497, 4498, 4499, 4502, 4505, 4506, 4507, 4508, 4509, 4510, 4513, 4515, 4518, 4521, 4527, 4528, 4529, 4535, 4538, 4541, 4543, 4544, 4545, 4546, 4549, 4552, 4553, 4555, 4570, 4571, 4573, 4574, 4575, 4579, 4584, 4585, 4586, 4591, 4592, 4594, 4597, 4601, 4603, 4604, 4606, 4611, 4612, 4616, 4619, 4622, 4624, 4625, 4626, 4628, 4630, 4632, 4641, 4642, 4644, 4645, 4646, 4647, 4650, 4652, 4664, 4668, 4669, 4671, 4675, 4682, 4685, 4687, 4691, 4694, 4699, 4701, 4703, 4704, 4710, 4711, 4713, 4714, 4720, 4738, 4745, 4746, 4748, 4750, 4754, 4761, 4763, 4766, 4767, 4768, 4773, 4775, 4789, 4790, 4795, 4797, 4803, 4805, 4807, 4808, 4815, 4818, 4823, 4825, 4827, 4829, 4831, 4833, 4835, 4837, 4838, 4839, 4840, 4844, 4846, 4848, 4850, 4851, 4857, 4864, 4866, 4870, 4871, 4874, 4875, 4882, 4883, 4885, 4886, 4887, 4889, 4895, 4899, 4903, 4904, 4905, 4908, 4909, 4912, 4914, 4924, 4925, 4927, 4931, 4932, 4933, 4935, 4936, 4938, 4943, 4946, 4947, 4948, 4949, 4950, 4951, 4958, 4960, 4962, 4969, 4972, 4973, 4980, 4982, 4984, 4985, 4986, 4988, 4989, 4991, 4995, 4997, 5002, 5003, 5014, 5016, 5018, 5022, 5023, 5024, 5025, 5027, 5038, 5042, 5043, 5044, 5049, 5053, 5055, 5057, 5060, 5062, 5068, 5070, 5075, 5077, 5084, 5085, 5086, 5090, 5093, 5094, 5096, 5097, 5105, 5120, 5127, 5131, 5132, 5133, 5139, 5141, 5147, 5148, 5153, 5155, 5156, 5158, 5162, 5165, 5166, 5176, 5178, 5188, 5189, 5191, 5193, 5195, 5196, 5198, 5201, 5202, 5206, 5207, 5209, 5214, 5215, 5219, 5227, 5231, 5232, 5233, 5239, 5242, 5243, 5248, 5251, 5252, 5253, 5255, 5258, 5259, 5260, 5263, 5265, 5268, 5271, 5293, 5294, 5295, 5296, 5297, 5304, 5317, 5322, 5329, 5330, 5332, 5333, 5335, 5338, 5340, 5341, 5342, 5343, 5346, 5347, 5348, 5353, 5355, 5356, 5360, 5366, 5367, 5371, 5373, 5375, 5376, 5377, 5384, 5390, 5395, 5406, 5409, 5411, 5422, 5424, 5426, 5428, 5429, 5437, 5439, 5441, 5450, 5453, 5454, 5457, 5461, 5465, 5466, 5468, 5470, 5475, 5477, 5480, 5484, 5486, 5487, 5490, 5491, 5492, 5493, 5497, 5504, 5505, 5506, 5519, 5521, 5522, 5523, 5524, 5525, 5528, 5532, 5533, 5537, 5541, 5544, 5545, 5549, 5550, 5555, 5557, 5560, 5566, 5571, 5577, 5581, 5584, 5585, 5589, 5598, 5601, 5603, 5604, 5605, 5607, 5608, 5611, 5613, 5618, 5622, 5625, 5627, 5628, 5630, 5631, 5632, 5637, 5641, 5643, 5647, 5651, 5658, 5660, 5664, 5670, 5671, 5676, 5678, 5684, 5687, 5688, 5691, 5698, 5699, 5703, 5707, 5708, 5711, 5712, 5713, 5714, 5716, 5718, 5720, 5724, 5725, 5729, 5730, 5731, 5734, 5736, 5738, 5739, 5742, 5744, 5745, 5748, 5749, 5750, 5751, 5752, 5755, 5760, 5766, 5767, 5768, 5772, 5773, 5775, 5776, 5777, 5778, 5780, 5787, 5790, 5791, 5795, 5796, 5797, 5798, 5799, 5800, 5803, 5804, 5809, 5810, 5812, 5815, 5819, 5822, 5823, 5825, 5826, 5828, 5830, 5833, 5836, 5838, 5839, 5844, 5845, 5847, 5856, 5859, 5860, 5862, 5865, 5866, 5868, 5870, 5873, 5874, 5875, 5878, 5881, 5882, 5885, 5887, 5889, 5890, 5895, 5896, 5897, 5902, 5904, 5909, 5910, 5911, 5913, 5921, 5923, 5926, 5930, 5931, 5934, 5935, 5937, 5938, 5943, 5945, 5946, 5949, 5952, 5955, 5956, 5957, 5958, 5961, 5963, 5967, 5968, 5969, 5970, 5971, 5975, 5977, 5979, 5981, 5983, 5986, 5990, 5991, 5992, 5996, 5997, 6000, 6001, 6002, 6003, 6004, 6005, 6007, 6010, 6011, 6012, 6015, 6017, 6025, 6026, 6027, 6029, 6032, 6033, 6035, 6036, 6038, 6040, 6043, 6045, 6046, 6048, 6049, 6051, 6052, 6054, 6056, 6057, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6073, 6075, 6076, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6089, 6090, 6092, 6097, 6099, 6100, 6101, 6102, 6103, 6107, 6108, 6109, 6111, 6112, 6113, 6115, 6117, 6118, 6119, 6122, 6123, 6125, 6126, 6130, 6134, 6136, 6139, 6140, 6141, 6142, 6145, 6147, 6148, 6151, 6152, 6153, 6154, 6158, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6170, 6171, 6172, 6173, 6175, 6176, 6177, 6181, 6182, 6183, 6184, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6198, 6199, 6201, 6202, 6203, 6204, 6206, 6207, 6208, 6210, 6211, 6214, 6216, 6217, 6218, 6219, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6231, 6232, 6233, 6234, 6235, 6236, 6240, 6241, 6242, 6245, 6247, 6248, 6249, 6254, 6256, 6258, 6259, 6260, 6262, 6263, 6265, 6266, 6267, 6269, 6270, 6271, 6273, 6275, 6276, 6277, 6279, 6281, 6282, 6283, 6285, 6287, 6288, 6290, 6295, 6296, 6297, 6298, 6299, 6300, 6302, 6303, 6305, 6306, 6308, 6309, 6310, 6311, 6312, 6314, 6316, 6318, 6321, 6322, 6323, 6324, 6326, 6327, 6329, 6331, 6333, 6336, 6337, 6338, 6340, 6341, 6344, 6348, 6350, 6351, 6352, 6353, 6355, 6356, 6357, 6358, 6359, 6360, 6362, 6364, 6365, 6366, 6369, 6371, 6372, 6373, 6374, 6375, 6379, 6380, 6381, 6382, 6383, 6384, 6386, 6388, 6390, 6391, 6392, 6393, 6394, 6395, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6411, 6412, 6413, 6414, 6415], [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 571, 572, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 739, 740, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 930, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 962, 963, 965, 966, 967, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1068, 1070, 1072, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1203, 1205, 1207, 1208, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1228, 1230, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1257, 1259, 1260, 1261, 1263, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1311, 1312, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1403, 1404, 1405, 1407, 1408, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1433, 1434, 1436, 1437, 1440, 1441, 1442, 1443, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1459, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1478, 1481, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1493, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1504, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1528, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1562, 1563, 1565, 1567, 1568, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1600, 1601, 1602, 1603, 1604, 1606, 1607, 1608, 1610, 1612, 1613, 1614, 1615, 1616, 1618, 1619, 1620, 1621, 1623, 1624, 1625, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1635, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1648, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1674, 1675, 1676, 1677, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1701, 1702, 1703, 1704, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1718, 1719, 1720, 1721, 1722, 1724, 1725, 1726, 1728, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1746, 1748, 1750, 1751, 1752, 1753, 1754, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1766, 1767, 1768, 1769, 1770, 1772, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1783, 1784, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1802, 1803, 1804, 1805, 1808, 1809, 1810, 1811, 1812, 1813, 1816, 1817, 1818, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1858, 1859, 1860, 1861, 1863, 1864, 1865, 1867, 1869, 1870, 1871, 1872, 1876, 1877, 1878, 1880, 1881, 1883, 1884, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1896, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1921, 1924, 1925, 1926, 1927, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1951, 1953, 1955, 1956, 1958, 1959, 1961, 1962, 1963, 1965, 1968, 1969, 1970, 1971, 1972, 1973, 1975, 1976, 1977, 1978, 1979, 1980, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2044, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2077, 2078, 2081, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2136, 2137, 2138, 2139, 2140, 2141, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2153, 2154, 2156, 2157, 2158, 2159, 2160, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2170, 2171, 2173, 2175, 2176, 2177, 2180, 2182, 2183, 2187, 2188, 2189, 2191, 2192, 2193, 2195, 2196, 2198, 2200, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2241, 2242, 2244, 2245, 2247, 2248, 2249, 2250, 2252, 2253, 2254, 2255, 2256, 2257, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2267, 2268, 2269, 2270, 2271, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2299, 2300, 2301, 2302, 2303, 2305, 2306, 2307, 2308, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2320, 2322, 2323, 2325, 2326, 2327, 2328, 2330, 2331, 2332, 2334, 2335, 2336, 2337, 2338, 2339, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2356, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2381, 2382, 2383, 2384, 2385, 2387, 2388, 2390, 2391, 2392, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2405, 2406, 2407, 2409, 2410, 2413, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2427, 2429, 2430, 2432, 2433, 2434, 2435, 2436, 2438, 2439, 2441, 2442, 2444, 2446, 2450, 2452, 2454, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2467, 2469, 2472, 2474, 2475, 2476, 2479, 2481, 2482, 2483, 2484, 2486, 2487, 2488, 2490, 2491, 2493, 2494, 2495, 2496, 2497, 2498, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2521, 2522, 2523, 2524, 2525, 2526, 2529, 2530, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2555, 2556, 2558, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2573, 2574, 2575, 2576, 2579, 2580, 2581, 2582, 2583, 2584, 2586, 2587, 2588, 2589, 2590, 2591, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2635, 2636, 2637, 2638, 2639, 2641, 2642, 2643, 2645, 2646, 2647, 2648, 2649, 2650, 2652, 2653, 2654, 2655, 2656, 2657, 2659, 2660, 2661, 2663, 2664, 2665, 2666, 2669, 2670, 2671, 2672, 2675, 2676, 2678, 2679, 2680, 2683, 2684, 2685, 2687, 2690, 2691, 2692, 2693, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2704, 2705, 2706, 2708, 2709, 2710, 2712, 2713, 2715, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2769, 2770, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2784, 2785, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2850, 2851, 2852, 2853, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2917, 2918, 2919, 2920, 2921, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2974, 2975, 2976, 2977, 2978, 2979, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3104, 3105, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3120, 3121, 3122, 3123, 3124, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3190, 3191, 3192, 3193, 3194, 3195, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3227, 3228, 3229, 3230, 3231, 3232, 3234, 3235, 3237, 3238, 3240, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3267, 3268, 3270, 3271, 3272, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3288, 3289, 3290, 3291, 3292, 3293, 3295, 3296, 3297, 3298, 3300, 3302, 3303, 3304, 3305, 3306, 3308, 3309, 3311, 3312, 3313, 3316, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3352, 3353, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3367, 3368, 3369, 3370, 3371, 3372, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3395, 3396, 3397, 3398, 3400, 3401, 3402, 3403, 3405, 3406, 3407, 3408, 3409, 3411, 3412, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3436, 3439, 3440, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3471, 3472, 3473, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3530, 3531, 3532, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3579, 3580, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3600, 3601, 3602, 3604, 3605, 3607, 3608, 3609, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3635, 3636, 3637, 3638, 3639, 3640, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3673, 3674, 3675, 3676, 3677, 3678, 3680, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3693, 3694, 3695, 3696, 3698, 3699, 3701, 3702, 3704, 3705, 3707, 3711, 3712, 3714, 3715, 3718, 3720, 3721, 3723, 3724, 3726, 3729, 3730, 3732, 3733, 3734, 3735, 3737, 3739, 3741, 3743, 3745, 3746, 3749, 3750, 3751, 3752, 3754, 3756, 3757, 3758, 3760, 3761, 3762, 3763, 3766, 3767, 3768, 3770, 3772, 3773, 3774, 3775, 3778, 3779, 3780, 3781, 3782, 3783, 3785, 3786, 3788, 3791, 3793, 3794, 3796, 3797, 3799, 3800, 3803, 3804, 3807, 3808, 3809, 3810, 3812, 3813, 3814, 3816, 3817, 3818, 3820, 3822, 3823, 3825, 3829, 3830, 3832, 3834, 3835, 3836, 3837, 3839, 3841, 3842, 3843, 3845, 3847, 3849, 3850, 3851, 3855, 3857, 3858, 3859, 3860, 3863, 3864, 3865, 3866, 3869, 3871, 3873, 3874, 3878, 3879, 3880, 3882, 3884, 3885, 3886, 3888, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3903, 3904, 3905, 3906, 3907, 3908, 3912, 3913, 3921, 3922, 3924, 3925, 3926, 3928, 3930, 3932, 3936, 3938, 3940, 3941, 3944, 3945, 3946, 3947, 3950, 3951, 3952, 3954, 3956, 3957, 3958, 3961, 3968, 3969, 3970, 3972, 3973, 3974, 3975, 3976, 3978, 3982, 3983, 3984, 3985, 3987, 3988, 3990, 3991, 3994, 3998, 4000, 4001, 4002, 4004, 4005, 4006, 4008, 4009, 4010, 4011, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4021, 4025, 4026, 4028, 4033, 4036, 4039, 4041, 4042, 4045, 4046, 4047, 4048, 4051, 4052, 4053, 4054, 4055, 4057, 4058, 4059, 4060, 4061, 4063, 4064, 4065, 4072, 4073, 4075, 4078, 4079, 4080, 4082, 4088, 4091, 4095, 4096, 4099, 4103, 4105, 4107, 4108, 4109, 4111, 4113, 4116, 4118, 4120, 4121, 4123, 4124, 4126, 4127, 4131, 4134, 4140, 4143, 4145, 4151, 4159, 4161, 4162, 4165, 4172, 4173, 4177, 4178, 4179, 4180, 4181, 4182, 4184, 4185, 4186, 4188, 4192, 4193, 4195, 4198, 4202, 4204, 4206, 4209, 4210, 4214, 4217, 4221, 4224, 4225, 4227, 4229, 4230, 4232, 4233, 4234, 4236, 4239, 4240, 4241, 4242, 4243, 4245, 4246, 4247, 4248, 4249, 4250, 4252, 4254, 4256, 4257, 4258, 4259, 4261, 4262, 4263, 4265, 4266, 4267, 4268, 4270, 4274, 4275, 4276, 4277, 4278, 4279, 4284, 4285, 4287, 4290, 4292, 4293, 4295, 4298, 4300, 4303, 4305, 4306, 4307, 4308, 4310, 4311, 4313, 4314, 4315, 4316, 4317, 4320, 4321, 4323, 4324, 4325, 4327, 4328, 4329, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4339, 4340, 4341, 4343, 4344, 4348, 4349, 4350, 4351, 4352, 4355, 4357, 4358, 4363, 4365, 4366, 4368, 4369, 4371, 4372, 4375, 4377, 4378, 4381, 4383, 4386, 4388, 4389, 4390, 4391, 4393, 4395, 4396, 4397, 4401, 4402, 4406, 4407, 4414, 4416, 4418, 4422, 4425, 4426, 4427, 4429, 4430, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4440, 4441, 4444, 4446, 4447, 4449, 4450, 4451, 4452, 4454, 4458, 4459, 4460, 4464, 4466, 4469, 4471, 4473, 4474, 4476, 4477, 4478, 4480, 4482, 4483, 4484, 4488, 4491, 4492, 4493, 4494, 4500, 4501, 4503, 4504, 4511, 4512, 4514, 4516, 4517, 4519, 4520, 4522, 4523, 4524, 4525, 4526, 4530, 4531, 4532, 4533, 4534, 4536, 4539, 4540, 4542, 4547, 4548, 4550, 4551, 4554, 4556, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4567, 4568, 4569, 4572, 4576, 4577, 4578, 4580, 4582, 4583, 4587, 4588, 4589, 4590, 4593, 4595, 4596, 4598, 4599, 4600, 4605, 4607, 4608, 4609, 4610, 4613, 4614, 4615, 4617, 4618, 4620, 4621, 4623, 4627, 4629, 4631, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4643, 4648, 4649, 4651, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4665, 4666, 4670, 4672, 4673, 4674, 4677, 4678, 4680, 4681, 4683, 4684, 4686, 4688, 4689, 4690, 4692, 4693, 4695, 4696, 4697, 4698, 4700, 4702, 4705, 4706, 4707, 4708, 4709, 4712, 4715, 4716, 4717, 4718, 4719, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4732, 4733, 4735, 4736, 4737, 4739, 4740, 4741, 4742, 4744, 4747, 4749, 4751, 4752, 4753, 4755, 4756, 4757, 4758, 4759, 4760, 4764, 4765, 4769, 4770, 4771, 4772, 4774, 4776, 4777, 4778, 4779, 4781, 4782, 4783, 4785, 4786, 4787, 4788, 4791, 4792, 4793, 4794, 4796, 4799, 4800, 4801, 4802, 4804, 4806, 4809, 4811, 4812, 4813, 4814, 4816, 4817, 4819, 4820, 4822, 4824, 4826, 4828, 4830, 4832, 4834, 4836, 4841, 4843, 4845, 4847, 4849, 4852, 4853, 4854, 4855, 4856, 4858, 4859, 4860, 4861, 4862, 4863, 4865, 4867, 4868, 4869, 4872, 4873, 4876, 4877, 4878, 4879, 4880, 4881, 4884, 4888, 4890, 4892, 4893, 4894, 4897, 4898, 4900, 4901, 4902, 4906, 4907, 4910, 4911, 4913, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4926, 4928, 4929, 4930, 4934, 4937, 4939, 4941, 4942, 4944, 4945, 4952, 4953, 4954, 4955, 4956, 4957, 4959, 4961, 4963, 4964, 4965, 4966, 4967, 4968, 4970, 4971, 4974, 4975, 4976, 4977, 4978, 4983, 4987, 4990, 4992, 4993, 4994, 4996, 4998, 4999, 5000, 5001, 5004, 5005, 5006, 5007, 5009, 5010, 5011, 5012, 5013, 5017, 5019, 5020, 5026, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5039, 5040, 5041, 5045, 5046, 5048, 5050, 5051, 5052, 5054, 5056, 5059, 5061, 5063, 5064, 5065, 5066, 5067, 5071, 5072, 5073, 5074, 5076, 5078, 5079, 5080, 5082, 5083, 5087, 5088, 5089, 5091, 5092, 5095, 5098, 5100, 5101, 5102, 5104, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5121, 5122, 5123, 5124, 5126, 5128, 5129, 5130, 5135, 5136, 5138, 5140, 5142, 5143, 5144, 5145, 5149, 5150, 5152, 5154, 5157, 5159, 5160, 5161, 5163, 5164, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5177, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5192, 5194, 5199, 5200, 5203, 5204, 5205, 5208, 5210, 5211, 5212, 5213, 5216, 5217, 5218, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5228, 5229, 5230, 5234, 5235, 5237, 5238, 5240, 5241, 5244, 5245, 5246, 5247, 5249, 5250, 5254, 5256, 5257, 5261, 5262, 5266, 5267, 5270, 5273, 5274, 5275, 5276, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5298, 5299, 5300, 5302, 5303, 5305, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5318, 5319, 5320, 5321, 5323, 5325, 5326, 5327, 5328, 5331, 5334, 5336, 5337, 5339, 5344, 5345, 5349, 5350, 5351, 5352, 5357, 5358, 5359, 5361, 5362, 5363, 5364, 5365, 5368, 5369, 5370, 5372, 5374, 5378, 5380, 5381, 5382, 5383, 5385, 5386, 5387, 5388, 5389, 5391, 5392, 5393, 5394, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5407, 5408, 5410, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5423, 5425, 5427, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5438, 5440, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5451, 5452, 5458, 5459, 5460, 5462, 5463, 5464, 5467, 5469, 5471, 5472, 5473, 5474, 5476, 5478, 5479, 5481, 5482, 5483, 5485, 5488, 5489, 5495, 5496, 5498, 5499, 5500, 5502, 5503, 5507, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5517, 5518, 5520, 5526, 5527, 5529, 5530, 5531, 5534, 5535, 5538, 5539, 5540, 5542, 5543, 5546, 5547, 5548, 5551, 5552, 5553, 5554, 5556, 5558, 5559, 5561, 5562, 5563, 5564, 5565, 5567, 5568, 5569, 5570, 5572, 5573, 5574, 5575, 5576, 5578, 5580, 5582, 5583, 5586, 5587, 5588, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5599, 5600, 5602, 5606, 5609, 5610, 5612, 5614, 5615, 5616, 5617, 5619, 5620, 5621, 5623, 5624, 5626, 5629, 5633, 5634, 5635, 5636, 5638, 5640, 5642, 5644, 5645, 5646, 5648, 5650, 5652, 5653, 5654, 5655, 5656, 5657, 5659, 5661, 5662, 5663, 5665, 5666, 5667, 5668, 5669, 5672, 5673, 5674, 5675, 5677, 5679, 5680, 5681, 5682, 5683, 5685, 5686, 5689, 5690, 5692, 5693, 5694, 5695, 5696, 5697, 5700, 5701, 5702, 5704, 5705, 5706, 5709, 5710, 5715, 5717, 5719, 5721, 5722, 5723, 5726, 5727, 5728, 5732, 5733, 5735, 5737, 5741, 5743, 5746, 5747, 5753, 5754, 5756, 5757, 5758, 5759, 5761, 5762, 5763, 5764, 5765, 5769, 5770, 5771, 5774, 5779, 5781, 5782, 5783, 5784, 5785, 5788, 5789, 5792, 5793, 5794, 5801, 5802, 5806, 5808, 5811, 5813, 5814, 5816, 5817, 5818, 5820, 5821, 5824, 5827, 5829, 5831, 5832, 5834, 5835, 5837, 5840, 5841, 5842, 5843, 5846, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5857, 5858, 5861, 5863, 5864, 5867, 5869, 5871, 5872, 5877, 5879, 5880, 5884, 5886, 5888, 5891, 5892, 5893, 5894, 5898, 5899, 5900, 5901, 5903, 5905, 5906, 5907, 5908, 5912, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5922, 5924, 5925, 5927, 5928, 5929, 5932, 5933, 5936, 5939, 5940, 5941, 5942, 5944, 5947, 5948, 5950, 5951, 5953, 5954, 5959, 5962, 5964, 5965, 5966, 5972, 5973, 5974, 5978, 5980, 5982, 5984, 5985, 5987, 5988, 5989, 5993, 5994, 5995, 5998, 5999, 6006, 6008, 6009, 6013, 6014, 6016, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6028, 6030, 6031, 6034, 6037, 6039, 6041, 6042, 6044, 6047, 6050, 6053, 6055, 6058, 6063, 6072, 6074, 6077, 6078, 6088, 6091, 6093, 6094, 6095, 6096, 6098, 6104, 6105, 6106, 6110, 6114, 6116, 6120, 6121, 6124, 6127, 6128, 6129, 6131, 6132, 6133, 6135, 6137, 6138, 6143, 6144, 6146, 6149, 6150, 6156, 6157, 6159, 6160, 6164, 6169, 6174, 6178, 6179, 6180, 6185, 6197, 6200, 6205, 6209, 6212, 6213, 6215, 6220, 6230, 6237, 6238, 6239, 6243, 6244, 6246, 6251, 6252, 6253, 6255, 6257, 6261, 6264, 6268, 6272, 6274, 6278, 6280, 6286, 6289, 6291, 6292, 6293, 6294, 6301, 6307, 6313, 6315, 6317, 6319, 6320, 6325, 6328, 6330, 6332, 6334, 6335, 6339, 6342, 6343, 6345, 6346, 6347, 6349, 6354, 6361, 6363, 6367, 6368, 6370, 6376, 6377, 6378, 6385, 6387, 6389, 6396, 6397, 6409, 6410, 6416, 6417, 6418, 6419], [0, 8, 26, 30, 40, 56, 58, 78, 80, 82, 83, 87, 100, 107, 109, 112, 121, 134, 138, 141, 143, 151, 158, 169, 175, 183, 185, 186, 187, 194, 203, 205, 207, 225, 232, 235, 249, 252, 292, 319, 331, 352, 371, 405, 409, 418, 456, 460, 480, 482, 483, 490, 498, 500, 507, 518, 520, 521, 530, 536, 545, 549, 565, 566, 567, 570, 573, 577, 582, 586, 590, 611, 623, 632, 678, 679, 681, 682, 699, 705, 707, 711, 734, 738, 741, 744, 760, 770, 778, 782, 793, 799, 801, 802, 818, 819, 831, 833, 841, 846, 878, 905, 906, 909, 921, 922, 931, 932, 933, 937, 958, 960, 964, 968, 969, 971, 993, 1010, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1034, 1052, 1054, 1060, 1061, 1064, 1065, 1067, 1069, 1071, 1073, 1074, 1081, 1126, 1127, 1134, 1143, 1145, 1156, 1157, 1162, 1191, 1198, 1201, 1202, 1204, 1206, 1209, 1212, 1217, 1227, 1229, 1231, 1235, 1242, 1252, 1256, 1258, 1262, 1264, 1266, 1278, 1279, 1285, 1295, 1305, 1309, 1310, 1313, 1317, 1322, 1323, 1355, 1372, 1375, 1389, 1401, 1402, 1406, 1409, 1421, 1435, 1438, 1439, 1444, 1458, 1460, 1477, 1480, 1482, 1492, 1494, 1502, 1503, 1513, 1527, 1529, 1530, 1531, 1542, 1543, 1561, 1564, 1566, 1569, 1579, 1580, 1594, 1598, 1599, 1605, 1609, 1611, 1617, 1622, 1626, 1634, 1636, 1646, 1647, 1649, 1650, 1662, 1672, 1673, 1678, 1700, 1705, 1716, 1717, 1723, 1727, 1729, 1745, 1747, 1749, 1755, 1763, 1764, 1765, 1771, 1773, 1781, 1782, 1785, 1801, 1806, 1814, 1815, 1819, 1820, 1821, 1822, 1846, 1857, 1862, 1868, 1873, 1874, 1875, 1879, 1882, 1885, 1895, 1897, 1920, 1922, 1923, 1928, 1940, 1952, 1954, 1957, 1960, 1964, 1966, 1967, 1974, 1981, 1998, 2009, 2020, 2021, 2029, 2042, 2043, 2045, 2046, 2055, 2056, 2057, 2058, 2076, 2079, 2080, 2082, 2091, 2101, 2135, 2142, 2152, 2155, 2161, 2169, 2172, 2178, 2179, 2181, 2184, 2185, 2186, 2190, 2194, 2197, 2199, 2201, 2202, 2219, 2240, 2243, 2246, 2251, 2258, 2266, 2272, 2283, 2284, 2297, 2298, 2304, 2309, 2310, 2319, 2321, 2324, 2329, 2333, 2340, 2355, 2357, 2374, 2379, 2386, 2389, 2393, 2403, 2404, 2408, 2411, 2412, 2414, 2415, 2426, 2428, 2431, 2437, 2440, 2443, 2445, 2447, 2448, 2449, 2451, 2453, 2455, 2466, 2468, 2470, 2471, 2473, 2477, 2478, 2480, 2485, 2489, 2492, 2499, 2509, 2518, 2519, 2520, 2527, 2528, 2531, 2540, 2554, 2557, 2559, 2572, 2577, 2578, 2585, 2592, 2593, 2608, 2633, 2644, 2651, 2658, 2662, 2667, 2668, 2673, 2674, 2677, 2681, 2682, 2686, 2688, 2689, 2703, 2707, 2711, 2716, 2768, 2783, 2786, 2795, 2804, 2815, 2824, 2849, 2854, 2875, 2907, 2934, 2973, 2980, 2988, 3010, 3044, 3145, 3239, 3266, 3269, 3273, 3294, 3301, 3326, 3351, 3354, 3393, 3410, 3425, 3493, 3529, 3533, 3599, 3603, 3606, 3633, 3634, 3641, 3679, 3681, 3697, 3710, 3716, 3731, 3748, 3764, 3776, 3784, 3790, 3792, 3819, 3824, 3846, 3853, 3862, 3872, 3933, 3934, 3937, 4020, 4094, 4253, 4271, 4281, 4338, 4367, 4382, 4537, 4557, 4566, 4581, 4602, 4667, 4676, 4679, 4731, 4734, 4743, 4762, 4780, 4784, 4798, 4810, 4821, 4842, 4891, 4896, 4940, 4979, 4981, 5008, 5015, 5021, 5047, 5058, 5069, 5081, 5099, 5103, 5125, 5134, 5137, 5146, 5151, 5190, 5197, 5236, 5264, 5269, 5272, 5277, 5301, 5306, 5324, 5354, 5379, 5449, 5455, 5456, 5494, 5501, 5508, 5516, 5536, 5579, 5639, 5649, 5740, 5786, 5805, 5807, 5876, 5883, 5960, 5976, 6155, 6250, 6284, 6304]], [[0.0, 0.0, 0.0], [18.060151356949547, 32.700469931476135, 0.0], [42.457926460773422, 37.938127427185499, 0.0]])))

    def test_with_sym_invalid_method_S_returns_AttributeError_symclass_hasnot_attribute_symangles_error_msg(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.angular_occupancy(self.params, self.angstep, 'invalid', 'S')
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.angular_occupancy(self.params, self.angstep, 'invalid', 'S')
        self.assertEqual(cm_new.exception.message, "'symclass' object has no attribute 'symangles'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'c5', 'P')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'c5', 'P')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[11, 18, 19, 23, 24, 29, 36, 50, 59, 71, 86, 119, 123, 125, 135, 157, 160, 177, 188, 193, 197, 199, 200, 220, 226, 240, 246, 248, 258, 260, 261, 274, 290, 306, 308, 313, 314, 316, 318, 320, 329, 330, 341, 343, 344, 350, 355, 359, 364, 365, 366, 369, 376, 379, 380, 381, 383, 386, 388, 394, 395, 397, 400, 401, 408, 411, 412, 413, 414, 415, 417, 419, 421, 422, 428, 434, 437, 438, 440, 441, 455, 457, 458, 459, 462, 468, 470, 472, 478, 496, 501, 505, 512, 514, 517, 522, 525, 537, 540, 541, 542, 543, 551, 556, 557, 561, 576, 584, 591, 592, 605, 606, 613, 615, 618, 620, 624, 627, 635, 639, 644, 646, 665, 677, 686, 692, 696, 698, 700, 702, 706, 712, 715, 720, 723, 732, 742, 747, 749, 753, 754, 762, 764, 773, 794, 797, 803, 809, 816, 820, 823, 826, 830, 843, 844, 852, 856, 857, 860, 863, 865, 868, 871, 874, 875, 880, 890, 901, 908, 930, 934, 938, 942, 947, 962, 973, 975, 977, 983, 994, 996, 1001, 1005, 1015, 1016, 1066, 1076, 1083, 1093, 1094, 1107, 1115, 1116, 1118, 1120, 1132, 1142, 1162, 1177, 1183, 1185, 1190, 1207, 1218, 1220, 1221, 1244, 1248, 1249, 1258, 1268, 1298, 1314, 1335, 1336, 1338, 1339, 1349, 1354, 1376, 1396, 1405, 1413, 1414, 1416, 1428, 1448, 1451, 1454, 1463, 1491, 1499, 1500, 1510, 1532, 1533, 1537, 1588, 1595, 1600, 1601, 1603, 1629, 1631, 1632, 1633, 1639, 1665, 1669, 1671, 1676, 1680, 1684, 1719, 1720, 1732, 1742, 1790, 1798, 1803, 1807, 1812, 1823, 1824, 1843, 1844, 1847, 1851, 1852, 1855, 1856, 1876, 1877, 1881, 1907, 1927, 1934, 1950, 1982, 1990, 2002, 2022, 2026, 2034, 2044, 2047, 2054, 2056, 2059, 2060, 2079, 2081, 2085, 2115, 2117, 2119, 2129, 2139, 2148, 2159, 2174, 2176, 2193, 2207, 2209, 2211, 2218, 2222, 2229, 2231, 2234, 2235, 2237, 2265, 2276, 2278, 2289, 2300, 2308, 2311, 2312, 2314, 2323, 2334, 2346, 2348, 2349, 2360, 2372, 2391, 2409, 2413, 2438, 2439, 2441, 2452, 2476, 2487, 2496, 2498, 2502, 2514, 2541, 2548, 2549, 2552, 2565, 2566, 2567, 2571, 2576, 2579, 2582, 2588, 2594, 2596, 2605, 2616, 2622, 2623, 2624, 2632, 2640, 2648, 2680, 2687, 2698, 2699, 2706, 2712, 2719, 2727, 2732, 2736, 2738, 2745, 2750, 2752, 2754, 2758, 2759, 2763, 2764, 2770, 2771, 2774, 2777, 2782, 2785, 2788, 2792, 2793, 2800, 2821, 2823, 2825, 2833, 2834, 2835, 2836, 2844, 2847, 2848, 2852, 2857, 2863, 2865, 2871, 2882, 2887, 2888, 2889, 2899, 2900, 2910, 2916, 2921, 2922, 2923, 2924, 2925, 2926, 2928, 2929, 2931, 2932, 2935, 2936, 2939, 2940, 2946, 2952, 2954, 2955, 2959, 2960, 2961, 2965, 2967, 2968, 2971, 2981, 2992, 2993, 2998, 3006, 3008, 3011, 3013, 3016, 3019, 3020, 3022, 3032, 3034, 3035, 3037, 3045, 3049, 3051, 3052, 3054, 3056, 3058, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3075, 3076, 3077, 3079, 3081, 3082, 3083, 3087, 3088, 3091, 3094, 3097, 3099, 3100, 3102, 3103, 3105, 3106, 3111, 3112, 3113, 3114, 3116, 3118, 3119, 3120, 3122, 3125, 3126, 3127, 3130, 3132, 3133, 3136, 3137, 3138, 3139, 3141, 3142, 3147, 3150, 3152, 3154, 3158, 3159, 3160, 3162, 3163, 3164, 3168, 3170, 3172, 3173, 3175, 3176, 3179, 3180, 3181, 3183, 3184, 3185, 3186, 3187, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3199, 3200, 3201, 3203, 3204, 3205, 3206, 3207, 3210, 3217, 3223, 3224, 3225, 3226, 3227, 3228, 3232, 3233, 3234, 3236, 3238, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3253, 3254, 3259, 3262, 3268, 3272, 3274, 3283, 3287, 3288, 3290, 3303, 3305, 3307, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3318, 3319, 3320, 3323, 3328, 3331, 3337, 3338, 3346, 3349, 3350, 3353, 3357, 3364, 3365, 3366, 3369, 3370, 3372, 3373, 3374, 3375, 3376, 3377, 3379, 3380, 3381, 3382, 3385, 3386, 3387, 3388, 3391, 3394, 3396, 3397, 3399, 3401, 3402, 3403, 3404, 3405, 3409, 3412, 3413, 3414, 3416, 3417, 3418, 3421, 3422, 3423, 3430, 3434, 3435, 3437, 3438, 3439, 3440, 3441, 3443, 3444, 3445, 3447, 3448, 3449, 3451, 3454, 3457, 3458, 3459, 3461, 3465, 3466, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3479, 3480, 3484, 3488, 3491, 3492, 3494, 3495, 3496, 3498, 3501, 3502, 3506, 3507, 3508, 3510, 3511, 3512, 3518, 3519, 3521, 3523, 3528, 3530, 3531, 3532, 3534, 3535, 3537, 3538, 3542, 3546, 3547, 3551, 3552, 3554, 3555, 3557, 3559, 3561, 3564, 3569, 3572, 3578, 3579, 3581, 3582, 3584, 3587, 3588, 3589, 3590, 3591, 3594, 3595, 3597, 3598, 3601, 3602, 3604, 3607, 3608, 3609, 3610, 3611, 3617, 3618, 3619, 3624, 3625, 3626, 3629, 3631, 3632, 3633, 3635, 3636, 3640, 3644, 3645, 3646, 3648, 3650, 3654, 3658, 3659, 3660, 3666, 3669, 3671, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3700, 3701, 3708, 3710, 3713, 3728, 3729, 3735, 3736, 3738, 3740, 3742, 3745, 3747, 3749, 3760, 3765, 3769, 3771, 3781, 3787, 3790, 3795, 3806, 3849, 3850, 3854, 3861, 3865, 3868, 3887, 3902, 3909, 3910, 3914, 3920, 3939, 3953, 3959, 3967, 3968, 3971, 3973, 3975, 3979, 3980, 3982, 3989, 3992, 3995, 4002, 4003, 4007, 4008, 4012, 4017, 4023, 4024, 4027, 4035, 4038, 4049, 4050, 4055, 4069, 4070, 4071, 4074, 4081, 4084, 4089, 4094, 4097, 4098, 4104, 4114, 4119, 4130, 4132, 4135, 4137, 4138, 4139, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4151, 4152, 4153, 4154, 4160, 4168, 4169, 4170, 4172, 4174, 4194, 4196, 4200, 4207, 4208, 4210, 4213, 4218, 4219, 4226, 4228, 4232, 4236, 4238, 4248, 4256, 4260, 4267, 4273, 4282, 4284, 4285, 4287, 4289, 4290, 4294, 4295, 4297, 4299, 4304, 4309, 4313, 4330, 4340, 4345, 4346, 4347, 4355, 4356, 4358, 4360, 4361, 4362, 4363, 4374, 4384, 4386, 4394, 4395, 4405, 4408, 4409, 4411, 4414, 4415, 4417, 4423, 4424, 4425, 4428, 4441, 4442, 4443, 4445, 4450, 4453, 4456, 4461, 4462, 4465, 4476, 4479, 4485, 4489, 4492, 4496, 4497, 4507, 4508, 4510, 4513, 4515, 4519, 4541, 4549, 4550, 4555, 4556, 4567, 4579, 4580, 4585, 4592, 4593, 4601, 4605, 4614, 4616, 4619, 4620, 4634, 4635, 4640, 4641, 4645, 4652, 4672, 4682, 4687, 4691, 4704, 4705, 4706, 4720, 4722, 4726, 4727, 4731, 4738, 4742, 4761, 4763, 4765, 4767, 4768, 4769, 4771, 4775, 4779, 4780, 4784, 4789, 4790, 4809, 4818, 4820, 4827, 4831, 4844, 4846, 4856, 4860, 4863, 4864, 4866, 4870, 4872, 4899, 4903, 4924, 4927, 4930, 4966, 4970, 4978, 4980, 4984, 4991, 4995, 5003, 5014, 5023, 5024, 5027, 5042, 5049, 5055, 5068, 5070, 5073, 5075, 5089, 5090, 5091, 5093, 5094, 5096, 5104, 5105, 5125, 5126, 5127, 5129, 5140, 5141, 5147, 5155, 5162, 5164, 5165, 5177, 5178, 5188, 5219, 5242, 5252, 5253, 5254, 5258, 5260, 5263, 5266, 5274, 5289, 5292, 5294, 5299, 5300, 5329, 5330, 5340, 5341, 5346, 5347, 5348, 5349, 5354, 5355, 5357, 5366, 5371, 5375, 5384, 5402, 5406, 5411, 5415, 5425, 5429, 5437, 5439, 5440, 5450, 5466, 5470, 5490, 5498, 5504, 5505, 5519, 5520, 5523, 5524, 5525, 5528, 5532, 5538, 5541, 5544, 5551, 5566, 5568, 5571, 5577, 5584, 5585, 5618, 5621, 5625, 5632, 5639, 5641, 5643, 5655, 5658, 5668, 5671, 5674, 5678, 5686, 5687, 5689, 5701, 5708, 5709, 5711, 5713, 5721, 5734, 5737, 5748, 5751, 5752, 5770, 5772, 5773, 5775, 5776, 5780, 5784, 5790, 5791, 5796, 5799, 5800, 5804, 5809, 5810, 5813, 5816, 5818, 5822, 5830, 5839, 5844, 5853, 5856, 5865, 5869, 5870, 5878, 5886, 5891, 5897, 5906, 5911, 5915, 5926, 5929, 5930, 5935, 5946, 5955, 5957, 5958, 5963, 5970, 5974, 5985, 5986, 5990, 5992, 5993, 5996, 5997, 6002, 6006, 6007, 6027, 6029, 6030, 6032, 6038, 6039, 6040, 6048, 6049, 6050, 6051, 6052, 6055, 6056, 6057, 6060, 6061, 6062, 6067, 6068, 6069, 6070, 6071, 6072, 6075, 6076, 6079, 6082, 6083, 6086, 6089, 6092, 6094, 6095, 6097, 6101, 6102, 6104, 6105, 6106, 6107, 6108, 6109, 6111, 6112, 6117, 6118, 6119, 6120, 6122, 6123, 6125, 6134, 6136, 6142, 6148, 6151, 6156, 6162, 6163, 6165, 6166, 6168, 6170, 6173, 6175, 6176, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6188, 6190, 6191, 6192, 6195, 6196, 6198, 6199, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6211, 6215, 6216, 6217, 6218, 6219, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6239, 6240, 6245, 6247, 6248, 6249, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6268, 6269, 6270, 6271, 6273, 6278, 6281, 6282, 6283, 6285, 6287, 6288, 6289, 6292, 6295, 6296, 6297, 6298, 6299, 6300, 6303, 6305, 6306, 6309, 6310, 6311, 6312, 6314, 6316, 6318, 6322, 6324, 6327, 6329, 6330, 6331, 6333, 6334, 6336, 6338, 6344, 6345, 6353, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6371, 6374, 6375, 6376, 6377, 6379, 6380, 6382, 6384, 6386, 6387, 6388, 6390, 6391, 6392, 6393, 6395, 6398, 6399, 6400, 6402, 6403, 6406, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415], [4, 5, 8, 16, 25, 26, 44, 57, 72, 74, 76, 95, 100, 102, 110, 113, 118, 126, 129, 130, 136, 138, 139, 163, 168, 183, 186, 205, 206, 224, 228, 236, 244, 251, 254, 282, 284, 286, 289, 292, 296, 305, 361, 384, 389, 398, 404, 405, 423, 424, 425, 427, 433, 435, 436, 444, 447, 454, 461, 471, 493, 499, 507, 509, 516, 528, 532, 534, 545, 562, 564, 565, 571, 574, 579, 581, 598, 604, 608, 625, 634, 641, 655, 658, 666, 674, 676, 678, 684, 697, 705, 717, 724, 729, 733, 734, 737, 746, 751, 758, 759, 761, 783, 795, 798, 812, 817, 828, 832, 835, 847, 859, 882, 883, 893, 895, 897, 906, 911, 912, 913, 914, 916, 917, 933, 946, 951, 965, 978, 987, 991, 993, 997, 1011, 1014, 1019, 1020, 1025, 1027, 1028, 1042, 1044, 1045, 1047, 1048, 1052, 1054, 1068, 1073, 1077, 1080, 1088, 1102, 1112, 1117, 1122, 1131, 1143, 1160, 1167, 1168, 1198, 1199, 1201, 1212, 1215, 1223, 1227, 1230, 1231, 1235, 1240, 1243, 1259, 1267, 1271, 1275, 1284, 1291, 1299, 1300, 1306, 1307, 1315, 1321, 1323, 1324, 1326, 1337, 1341, 1343, 1348, 1353, 1368, 1382, 1395, 1397, 1398, 1403, 1429, 1434, 1436, 1439, 1467, 1478, 1480, 1482, 1483, 1484, 1487, 1489, 1504, 1507, 1512, 1523, 1540, 1557, 1562, 1604, 1607, 1622, 1635, 1636, 1641, 1642, 1649, 1661, 1683, 1693, 1701, 1711, 1734, 1736, 1768, 1777, 1778, 1780, 1783, 1784, 1785, 1786, 1799, 1802, 1804, 1808, 1820, 1835, 1837, 1845, 1859, 1867, 1890, 1914, 1919, 1948, 1949, 1955, 1956, 1966, 1984, 1985, 1986, 1992, 1994, 2013, 2016, 2019, 2020, 2024, 2031, 2040, 2051, 2052, 2053, 2071, 2073, 2084, 2087, 2092, 2093, 2123, 2127, 2146, 2147, 2154, 2162, 2163, 2167, 2168, 2183, 2215, 2217, 2221, 2228, 2238, 2239, 2241, 2253, 2256, 2258, 2259, 2267, 2269, 2270, 2280, 2284, 2286, 2288, 2294, 2298, 2313, 2319, 2320, 2328, 2333, 2335, 2352, 2355, 2367, 2376, 2399, 2405, 2410, 2411, 2416, 2440, 2449, 2456, 2461, 2474, 2482, 2489, 2494, 2495, 2500, 2523, 2547, 2555, 2556, 2562, 2568, 2587, 2589, 2597, 2599, 2604, 2608, 2609, 2612, 2618, 2626, 2642, 2644, 2646, 2649, 2650, 2660, 2661, 2679, 2684, 2695, 2696, 2700, 2708, 2709, 2716, 2721, 2722, 2731, 2739, 2751, 2762, 2775, 2791, 2805, 2813, 2828, 2829, 2832, 2841, 2853, 2862, 2874, 2875, 2884, 2892, 2904, 2911, 2912, 2930, 2941, 2977, 2983, 2996, 3017, 3024, 3027, 3028, 3031, 3046, 3048, 3050, 3053, 3059, 3078, 3084, 3085, 3108, 3121, 3124, 3146, 3148, 3151, 3155, 3156, 3167, 3209, 3211, 3229, 3267, 3277, 3279, 3282, 3285, 3286, 3295, 3297, 3300, 3325, 3330, 3342, 3355, 3360, 3367, 3371, 3390, 3406, 3460, 3478, 3481, 3483, 3497, 3513, 3514, 3520, 3540, 3550, 3562, 3586, 3622, 3630, 3642, 3656, 3657, 3665, 3676, 3691, 3692, 3693, 3694, 3695, 3697, 3698, 3699, 3702, 3703, 3705, 3706, 3707, 3709, 3711, 3712, 3715, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3730, 3732, 3733, 3734, 3737, 3739, 3741, 3743, 3744, 3746, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3759, 3761, 3762, 3763, 3766, 3767, 3768, 3772, 3773, 3774, 3775, 3777, 3779, 3780, 3782, 3783, 3785, 3786, 3788, 3789, 3793, 3794, 3796, 3797, 3798, 3799, 3801, 3802, 3803, 3804, 3805, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3821, 3822, 3823, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3847, 3848, 3851, 3852, 3855, 3856, 3857, 3858, 3859, 3860, 3863, 3864, 3866, 3867, 3869, 3870, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3883, 3884, 3885, 3886, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3903, 3905, 3907, 3908, 3912, 3913, 3915, 3916, 3917, 3918, 3919, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3936, 3940, 3941, 3942, 3943, 3944, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3954, 3955, 3956, 3957, 3958, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3969, 3970, 3972, 3974, 3976, 3977, 3981, 3983, 3984, 3985, 3986, 3987, 3988, 3990, 3991, 3993, 3994, 3996, 3997, 3998, 3999, 4000, 4001, 4004, 4005, 4006, 4009, 4010, 4011, 4013, 4014, 4015, 4016, 4018, 4019, 4021, 4022, 4025, 4026, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4036, 4037, 4040, 4041, 4042, 4043, 4044, 4046, 4047, 4048, 4051, 4052, 4053, 4054, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4072, 4073, 4075, 4076, 4077, 4078, 4079, 4080, 4082, 4083, 4085, 4086, 4087, 4088, 4090, 4091, 4092, 4093, 4095, 4096, 4099, 4100, 4101, 4102, 4103, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4115, 4116, 4117, 4118, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4131, 4133, 4134, 4136, 4140, 4141, 4142, 4150, 4155, 4156, 4157, 4158, 4159, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4171, 4173, 4175, 4176, 4177, 4178, 4179, 4180, 4182, 4183, 4184, 4185, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4195, 4197, 4198, 4199, 4201, 4202, 4203, 4204, 4205, 4206, 4209, 4211, 4212, 4214, 4215, 4216, 4217, 4220, 4221, 4222, 4223, 4224, 4225, 4227, 4229, 4230, 4231, 4233, 4234, 4235, 4237, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4249, 4250, 4251, 4252, 4254, 4255, 4257, 4258, 4259, 4261, 4262, 4263, 4264, 4265, 4266, 4268, 4269, 4270, 4272, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4283, 4286, 4288, 4291, 4293, 4296, 4298, 4300, 4301, 4302, 4303, 4305, 4306, 4308, 4310, 4311, 4312, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4331, 4332, 4333, 4334, 4335, 4337, 4339, 4341, 4342, 4343, 4344, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4359, 4364, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4383, 4385, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4406, 4407, 4410, 4412, 4413, 4416, 4418, 4419, 4420, 4421, 4422, 4426, 4427, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4437, 4438, 4439, 4440, 4444, 4446, 4447, 4448, 4449, 4451, 4452, 4454, 4455, 4457, 4458, 4459, 4460, 4463, 4464, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4477, 4478, 4480, 4481, 4482, 4483, 4486, 4487, 4488, 4490, 4493, 4494, 4495, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4509, 4511, 4512, 4514, 4516, 4517, 4518, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4531, 4533, 4534, 4535, 4536, 4538, 4539, 4540, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4551, 4552, 4553, 4554, 4557, 4558, 4559, 4561, 4562, 4563, 4564, 4565, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4582, 4583, 4584, 4586, 4587, 4588, 4589, 4590, 4591, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4603, 4604, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4615, 4617, 4618, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4630, 4632, 4633, 4636, 4637, 4639, 4642, 4643, 4644, 4646, 4647, 4650, 4651, 4653, 4654, 4655, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4668, 4669, 4670, 4671, 4673, 4675, 4677, 4678, 4680, 4681, 4683, 4684, 4685, 4686, 4688, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4710, 4711, 4713, 4714, 4715, 4716, 4717, 4719, 4721, 4723, 4724, 4725, 4728, 4729, 4732, 4733, 4736, 4737, 4739, 4740, 4741, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4762, 4764, 4766, 4772, 4773, 4774, 4781, 4782, 4783, 4785, 4786, 4787, 4788, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4799, 4800, 4801, 4805, 4806, 4807, 4808, 4810, 4811, 4812, 4814, 4815, 4816, 4817, 4819, 4822, 4823, 4824, 4825, 4826, 4828, 4829, 4830, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4847, 4848, 4850, 4851, 4853, 4855, 4857, 4858, 4859, 4862, 4865, 4867, 4868, 4869, 4871, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4893, 4894, 4895, 4897, 4898, 4900, 4901, 4902, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4917, 4918, 4919, 4920, 4921, 4922, 4926, 4928, 4929, 4931, 4932, 4933, 4935, 4936, 4937, 4938, 4939, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4952, 4954, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4967, 4968, 4969, 4972, 4973, 4974, 4975, 4976, 4977, 4981, 4982, 4983, 4985, 4986, 4987, 4988, 4989, 4992, 4993, 4994, 4996, 4997, 4998, 5000, 5001, 5002, 5004, 5007, 5009, 5011, 5012, 5013, 5016, 5017, 5018, 5019, 5020, 5022, 5025, 5026, 5028, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5043, 5044, 5045, 5046, 5047, 5048, 5050, 5052, 5053, 5054, 5056, 5057, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5069, 5071, 5072, 5076, 5077, 5078, 5079, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5092, 5095, 5097, 5099, 5100, 5101, 5106, 5107, 5108, 5109, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5128, 5130, 5131, 5132, 5133, 5135, 5136, 5137, 5138, 5139, 5142, 5143, 5144, 5148, 5149, 5150, 5153, 5154, 5156, 5157, 5158, 5159, 5160, 5161, 5163, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5175, 5176, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5189, 5191, 5192, 5193, 5194, 5195, 5196, 5198, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5220, 5221, 5223, 5225, 5226, 5227, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5237, 5238, 5239, 5240, 5241, 5243, 5246, 5247, 5248, 5249, 5250, 5251, 5255, 5256, 5257, 5259, 5261, 5262, 5265, 5268, 5270, 5271, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5290, 5291, 5293, 5295, 5296, 5297, 5298, 5304, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5318, 5319, 5320, 5321, 5322, 5325, 5326, 5327, 5328, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5342, 5343, 5344, 5345, 5352, 5353, 5356, 5358, 5360, 5361, 5362, 5363, 5364, 5365, 5367, 5368, 5370, 5372, 5373, 5376, 5377, 5378, 5380, 5381, 5382, 5383, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5403, 5405, 5407, 5408, 5409, 5410, 5412, 5413, 5414, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5426, 5427, 5428, 5430, 5433, 5434, 5435, 5436, 5438, 5441, 5442, 5443, 5445, 5446, 5447, 5448, 5449, 5451, 5452, 5453, 5454, 5457, 5458, 5459, 5461, 5462, 5463, 5464, 5465, 5467, 5468, 5469, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5482, 5484, 5486, 5487, 5488, 5489, 5491, 5492, 5493, 5495, 5497, 5500, 5503, 5507, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5517, 5518, 5521, 5522, 5526, 5527, 5530, 5533, 5535, 5537, 5539, 5540, 5542, 5543, 5545, 5546, 5547, 5548, 5549, 5550, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5563, 5564, 5565, 5567, 5569, 5570, 5572, 5573, 5574, 5575, 5576, 5578, 5581, 5582, 5583, 5586, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5613, 5614, 5615, 5616, 5617, 5620, 5622, 5623, 5624, 5626, 5627, 5630, 5631, 5634, 5635, 5637, 5638, 5640, 5642, 5644, 5645, 5646, 5647, 5648, 5650, 5651, 5652, 5653, 5654, 5656, 5657, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5669, 5670, 5672, 5673, 5675, 5676, 5677, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5688, 5691, 5692, 5693, 5695, 5696, 5697, 5698, 5699, 5700, 5702, 5703, 5704, 5705, 5706, 5707, 5710, 5712, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5722, 5724, 5725, 5726, 5728, 5729, 5730, 5731, 5732, 5733, 5736, 5738, 5739, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5749, 5750, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5771, 5774, 5777, 5778, 5779, 5781, 5782, 5783, 5785, 5786, 5787, 5788, 5789, 5792, 5793, 5794, 5795, 5797, 5798, 5801, 5802, 5803, 5805, 5806, 5808, 5811, 5812, 5814, 5815, 5817, 5819, 5820, 5821, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5831, 5832, 5833, 5834, 5837, 5838, 5840, 5841, 5843, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5854, 5855, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5866, 5868, 5871, 5872, 5873, 5874, 5875, 5877, 5879, 5881, 5882, 5883, 5885, 5887, 5888, 5889, 5890, 5892, 5893, 5894, 5895, 5896, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5907, 5908, 5909, 5910, 5912, 5913, 5914, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5927, 5928, 5931, 5932, 5933, 5934, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5947, 5948, 5949, 5950, 5952, 5954, 5956, 5959, 5961, 5962, 5964, 5965, 5966, 5967, 5968, 5969, 5971, 5972, 5973, 5975, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5987, 5988, 5989, 5991, 5994, 5995, 5998, 5999, 6000, 6001, 6003, 6004, 6005, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6021, 6022, 6023, 6024, 6025, 6026, 6031, 6033, 6034, 6035, 6036, 6037, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6053, 6054, 6058, 6059, 6064, 6065, 6066, 6073, 6074, 6077, 6078, 6080, 6081, 6084, 6085, 6087, 6088, 6090, 6091, 6093, 6096, 6098, 6099, 6100, 6103, 6110, 6113, 6114, 6115, 6116, 6121, 6124, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6135, 6137, 6138, 6139, 6140, 6141, 6143, 6144, 6145, 6146, 6147, 6152, 6153, 6154, 6157, 6158, 6159, 6160, 6161, 6167, 6169, 6171, 6172, 6177, 6178, 6187, 6189, 6193, 6197, 6200, 6201, 6210, 6212, 6213, 6214, 6220, 6221, 6230, 6238, 6241, 6242, 6243, 6251, 6253, 6267, 6272, 6274, 6275, 6276, 6277, 6279, 6280, 6286, 6294, 6301, 6302, 6307, 6308, 6313, 6315, 6317, 6321, 6323, 6325, 6326, 6332, 6335, 6337, 6339, 6340, 6341, 6342, 6343, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6354, 6355, 6356, 6369, 6370, 6373, 6381, 6383, 6385, 6394, 6396, 6397, 6401, 6404, 6405, 6407, 6416, 6417, 6418, 6419], [277, 544, 1473, 1746, 1878, 2242, 2590, 3361, 3643, 4532, 4629, 5499, 5502, 6244, 6328], [3, 6, 9, 12, 14, 15, 17, 20, 22, 27, 28, 30, 31, 34, 35, 37, 41, 42, 43, 45, 47, 53, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 77, 80, 81, 83, 84, 85, 93, 94, 98, 101, 104, 106, 108, 112, 114, 120, 121, 122, 124, 128, 131, 132, 137, 140, 142, 145, 147, 148, 152, 153, 154, 155, 158, 159, 161, 162, 164, 165, 166, 167, 173, 174, 184, 189, 190, 192, 194, 195, 196, 201, 203, 207, 209, 216, 217, 219, 221, 222, 223, 225, 232, 233, 235, 238, 239, 241, 242, 243, 245, 247, 249, 250, 256, 262, 265, 273, 276, 283, 287, 288, 291, 293, 294, 295, 300, 301, 302, 304, 307, 309, 310, 311, 315, 317, 321, 322, 323, 325, 326, 331, 332, 333, 334, 335, 338, 339, 340, 342, 345, 347, 349, 353, 354, 358, 360, 362, 363, 367, 368, 370, 372, 373, 374, 377, 378, 382, 385, 390, 391, 393, 396, 399, 406, 407, 410, 416, 429, 430, 431, 439, 442, 443, 445, 448, 449, 450, 451, 452, 453, 456, 460, 463, 464, 466, 467, 469, 474, 475, 477, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 502, 504, 506, 508, 510, 513, 515, 519, 520, 521, 523, 524, 526, 527, 529, 531, 533, 535, 538, 547, 548, 549, 550, 552, 553, 554, 558, 563, 567, 568, 569, 570, 575, 577, 580, 583, 585, 586, 587, 588, 589, 593, 595, 596, 597, 599, 601, 602, 603, 607, 610, 612, 614, 616, 617, 619, 621, 622, 628, 630, 631, 632, 637, 638, 642, 643, 648, 649, 650, 652, 653, 656, 657, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 680, 683, 685, 687, 688, 689, 694, 695, 701, 703, 707, 708, 711, 713, 714, 716, 718, 719, 721, 722, 727, 728, 731, 735, 736, 739, 740, 743, 748, 752, 755, 756, 757, 763, 765, 766, 767, 768, 771, 772, 775, 776, 779, 780, 781, 782, 784, 788, 789, 790, 791, 792, 796, 804, 805, 806, 807, 810, 811, 813, 814, 815, 818, 821, 822, 825, 827, 829, 831, 833, 836, 839, 840, 842, 845, 848, 849, 850, 853, 854, 855, 858, 861, 862, 864, 867, 869, 870, 872, 873, 876, 877, 879, 881, 884, 886, 887, 888, 889, 891, 894, 896, 898, 899, 902, 903, 907, 910, 915, 918, 919, 920, 923, 925, 926, 927, 931, 935, 939, 940, 941, 943, 948, 955, 957, 959, 961, 964, 966, 967, 969, 972, 979, 980, 981, 984, 985, 986, 988, 989, 992, 995, 999, 1003, 1007, 1010, 1012, 1013, 1018, 1021, 1029, 1030, 1038, 1041, 1046, 1049, 1051, 1056, 1057, 1058, 1060, 1062, 1074, 1079, 1081, 1082, 1084, 1086, 1087, 1090, 1091, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1128, 1137, 1139, 1141, 1144, 1145, 1146, 1148, 1151, 1152, 1153, 1154, 1158, 1159, 1170, 1173, 1175, 1179, 1180, 1187, 1188, 1203, 1204, 1208, 1210, 1211, 1214, 1216, 1222, 1224, 1233, 1234, 1236, 1237, 1241, 1245, 1252, 1253, 1257, 1262, 1265, 1269, 1270, 1276, 1278, 1281, 1287, 1289, 1293, 1294, 1297, 1301, 1302, 1304, 1308, 1310, 1311, 1312, 1316, 1328, 1329, 1331, 1332, 1333, 1334, 1340, 1342, 1345, 1351, 1352, 1357, 1362, 1363, 1364, 1365, 1367, 1369, 1370, 1372, 1377, 1379, 1383, 1389, 1399, 1402, 1404, 1406, 1408, 1409, 1410, 1411, 1412, 1415, 1418, 1421, 1425, 1426, 1432, 1433, 1435, 1437, 1438, 1440, 1443, 1444, 1446, 1447, 1453, 1455, 1456, 1458, 1462, 1465, 1468, 1470, 1472, 1476, 1477, 1481, 1485, 1486, 1488, 1490, 1493, 1494, 1495, 1496, 1497, 1502, 1508, 1509, 1511, 1513, 1514, 1515, 1521, 1524, 1525, 1527, 1534, 1535, 1538, 1541, 1543, 1548, 1556, 1559, 1560, 1568, 1570, 1571, 1572, 1573, 1575, 1578, 1582, 1584, 1585, 1586, 1589, 1590, 1592, 1594, 1596, 1597, 1605, 1606, 1615, 1617, 1618, 1619, 1621, 1624, 1626, 1628, 1630, 1638, 1643, 1645, 1647, 1648, 1650, 1653, 1654, 1655, 1656, 1658, 1659, 1670, 1673, 1675, 1677, 1678, 1679, 1682, 1687, 1688, 1695, 1696, 1697, 1698, 1703, 1706, 1710, 1715, 1721, 1723, 1725, 1726, 1727, 1728, 1730, 1733, 1737, 1739, 1741, 1743, 1744, 1747, 1748, 1762, 1764, 1771, 1775, 1776, 1787, 1788, 1797, 1801, 1805, 1806, 1809, 1810, 1813, 1815, 1816, 1817, 1818, 1819, 1821, 1822, 1826, 1828, 1830, 1834, 1841, 1842, 1848, 1849, 1850, 1853, 1857, 1858, 1863, 1864, 1870, 1880, 1883, 1889, 1892, 1893, 1895, 1898, 1902, 1904, 1905, 1908, 1915, 1916, 1917, 1918, 1920, 1921, 1922, 1924, 1925, 1929, 1932, 1933, 1935, 1946, 1954, 1957, 1962, 1963, 1965, 1967, 1968, 1969, 1970, 1973, 1977, 1979, 1980, 1983, 1987, 1988, 1991, 1993, 1996, 1997, 2000, 2004, 2007, 2011, 2012, 2014, 2015, 2017, 2018, 2021, 2025, 2030, 2035, 2036, 2038, 2042, 2045, 2046, 2048, 2049, 2050, 2055, 2057, 2062, 2063, 2064, 2065, 2067, 2072, 2075, 2077, 2078, 2082, 2086, 2094, 2096, 2097, 2098, 2099, 2102, 2103, 2108, 2109, 2112, 2113, 2114, 2116, 2120, 2124, 2125, 2126, 2128, 2130, 2131, 2134, 2135, 2136, 2137, 2141, 2145, 2149, 2151, 2155, 2156, 2157, 2158, 2160, 2165, 2166, 2173, 2177, 2178, 2180, 2182, 2187, 2188, 2189, 2191, 2192, 2195, 2202, 2203, 2204, 2210, 2213, 2214, 2216, 2223, 2224, 2226, 2227, 2233, 2236, 2240, 2244, 2247, 2251, 2255, 2261, 2266, 2268, 2271, 2273, 2274, 2275, 2283, 2292, 2295, 2302, 2303, 2304, 2306, 2309, 2310, 2315, 2321, 2322, 2325, 2329, 2331, 2337, 2338, 2339, 2342, 2344, 2350, 2351, 2353, 2354, 2356, 2357, 2362, 2363, 2364, 2365, 2366, 2368, 2369, 2371, 2373, 2375, 2379, 2382, 2384, 2387, 2388, 2390, 2395, 2396, 2398, 2400, 2403, 2412, 2415, 2417, 2419, 2422, 2424, 2425, 2427, 2429, 2430, 2431, 2432, 2433, 2435, 2436, 2446, 2450, 2457, 2458, 2460, 2463, 2464, 2465, 2467, 2468, 2469, 2470, 2471, 2477, 2479, 2481, 2483, 2486, 2488, 2493, 2506, 2508, 2509, 2511, 2513, 2515, 2519, 2521, 2524, 2525, 2526, 2529, 2532, 2533, 2534, 2537, 2538, 2540, 2542, 2543, 2546, 2553, 2554, 2557, 2560, 2561, 2570, 2572, 2574, 2575, 2578, 2580, 2581, 2584, 2585, 2595, 2598, 2600, 2601, 2602, 2610, 2611, 2614, 2619, 2621, 2625, 2627, 2628, 2629, 2630, 2633, 2641, 2647, 2652, 2653, 2654, 2655, 2656, 2657, 2663, 2665, 2666, 2670, 2671, 2676, 2678, 2685, 2691, 2692, 2693, 2697, 2702, 2704, 2705, 2707, 2715, 2717, 2720, 2723, 2724, 2726, 2728, 2729, 2730, 2733, 2734, 2740, 2742, 2743, 2744, 2747, 2748, 2749, 2753, 2755, 2757, 2760, 2765, 2766, 2769, 2772, 2776, 2778, 2779, 2780, 2781, 2784, 2786, 2787, 2789, 2790, 2794, 2795, 2796, 2797, 2798, 2801, 2802, 2808, 2809, 2810, 2812, 2819, 2820, 2822, 2824, 2826, 2827, 2830, 2837, 2838, 2839, 2840, 2842, 2845, 2849, 2850, 2851, 2856, 2858, 2864, 2866, 2867, 2868, 2873, 2876, 2877, 2878, 2879, 2881, 2883, 2885, 2886, 2890, 2893, 2895, 2896, 2897, 2898, 2901, 2902, 2903, 2905, 2906, 2908, 2913, 2914, 2915, 2917, 2919, 2933, 2937, 2942, 2943, 2944, 2945, 2949, 2950, 2951, 2956, 2957, 2958, 2963, 2964, 2969, 2970, 2972, 2974, 2978, 2984, 2985, 2986, 2987, 2989, 2991, 2994, 2997, 2999, 3000, 3002, 3003, 3004, 3005, 3007, 3012, 3014, 3015, 3018, 3021, 3023, 3025, 3026, 3029, 3030, 3033, 3036, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3047, 3057, 3072, 3073, 3074, 3086, 3089, 3092, 3093, 3117, 3123, 3129, 3143, 3149, 3153, 3157, 3171, 3198, 3208, 3212, 3216, 3294, 3329, 3334, 3389, 3392, 3395, 3398, 3400, 3407, 3415, 3420, 3428, 3432, 3450, 3453, 3455, 3456, 3463, 3476, 3477, 3482, 3487, 3490, 3503, 3504, 3509, 3516, 3517, 3522, 3525, 3526, 3533, 3536, 3541, 3544, 3548, 3549, 3553, 3565, 3566, 3567, 3568, 3570, 3573, 3574, 3577, 3585, 3593, 3596, 3600, 3603, 3612, 3614, 3615, 3616, 3620, 3621, 3623, 3628, 3638, 3647, 3652, 3661, 3662, 3663, 3664, 3670, 3673, 3682, 3686, 3690, 4336, 5359, 5393], [32, 115, 171, 185, 202, 281, 328, 572, 578, 777, 785, 1000, 1017, 1039, 1053, 1149, 1182, 1213, 1350, 1380, 1442, 1452, 1558, 1563, 1640, 1731, 1770, 1840, 1888, 2171, 2206, 2263, 2264, 2317, 2378, 2444, 2490, 2505, 2539, 2573, 2669, 2975, 3109, 3135, 3140, 3359, 3427, 3653, 3667, 3731, 3819, 3978, 5444, 5587, 6028], [357, 432, 1034, 1169, 1360, 1536, 1936, 2152, 2161, 2169, 2694, 3169, 3317, 3674, 3906, 4674, 4778, 4888, 4889, 4951, 5059, 5222, 5245], [96, 213, 1358, 1664, 1666, 1691, 2138, 2153, 2248, 2250, 2672, 2859, 3322, 3489, 4045, 4657, 4776, 4803, 4916, 5051, 5174, 5199, 5273, 5867, 6174], [693, 834, 1178, 1400, 2404, 2675, 2843, 3800, 5588], [103, 117, 371, 409, 476, 801, 819, 1064, 1134, 1196, 1238, 1256, 1285, 1292, 1503, 1518, 1579, 1634, 1651, 1660, 1712, 1713, 1897, 1939, 1940, 1978, 1998, 2681, 3599, 3606, 3748, 3784, 3818, 3846, 3933, 3937, 4338, 4602, 4648, 4667, 4734, 4890, 4891, 5008, 5081, 5146, 5151, 5301, 5324, 5369, 5501, 5534], [10, 89, 90, 91, 149, 150, 180, 182, 210, 211, 229, 268, 271, 272, 278, 403, 483, 590, 600, 730, 769, 786, 885, 892, 900, 928, 963, 974, 976, 1040, 1059, 1063, 1129, 1130, 1135, 1138, 1163, 1176, 1197, 1226, 1260, 1261, 1288, 1303, 1317, 1319, 1374, 1385, 1386, 1387, 1391, 1392, 1393, 1419, 1420, 1427, 1441, 1449, 1457, 1469, 1516, 1519, 1544, 1545, 1550, 1554, 1567, 1612, 1623, 1644, 1672, 1685, 1690, 1751, 1754, 1760, 1774, 1789, 1827, 1832, 1833, 1860, 1871, 1885, 1896, 1900, 1906, 1911, 1913, 1926, 1937, 1941, 1942, 1943, 1947, 1958, 1959, 1975, 1976, 2005, 2006, 2039, 2070, 2074, 2076, 2104, 2111, 2122, 2132, 2194, 2252, 2287, 2326, 2327, 2370, 2377, 2418, 2613, 2615, 2620, 2631, 2664, 2682, 2688, 2718, 2737, 3239, 3263, 3335, 3426, 3529, 3543, 3679, 3770, 3792, 3820, 3932, 3938, 4020, 4271, 4537, 4656, 4777, 4854, 5080, 5123, 5124, 5152, 5305, 5374, 5404, 5432, 5485, 5529, 6155, 6304], [1, 13, 51, 52, 88, 92, 97, 99, 179, 181, 208, 212, 215, 218, 227, 230, 253, 259, 266, 267, 270, 279, 594, 636, 640, 647, 654, 710, 745, 774, 787, 851, 954, 982, 1004, 1008, 1009, 1023, 1032, 1036, 1037, 1050, 1095, 1099, 1125, 1161, 1165, 1171, 1194, 1219, 1225, 1246, 1251, 1254, 1263, 1282, 1290, 1296, 1318, 1320, 1330, 1347, 1356, 1359, 1384, 1388, 1390, 1394, 1422, 1423, 1431, 1520, 1528, 1547, 1549, 1587, 1591, 1608, 1616, 1637, 1652, 1667, 1689, 1699, 1714, 1722, 1724, 1729, 1750, 1752, 1753, 1756, 1757, 1759, 1761, 1793, 1794, 1795, 1796, 1800, 1811, 1829, 1831, 1836, 1838, 1865, 1872, 1886, 1899, 1901, 1903, 1909, 1938, 1989, 2008, 2041, 2061, 2066, 2068, 2069, 2083, 2105, 2106, 2110, 2140, 2143, 2205, 2208, 2225, 2245, 2257, 2262, 2281, 2282, 2332, 2347, 2407, 2421, 2434, 2455, 2459, 2475, 2491, 2544, 2564, 2636, 2818, 2909, 3178, 3576, 3651, 3871, 3882, 3904, 3945, 4357, 4484, 4530, 4560, 4631, 4658, 4712, 4802, 4804, 4813, 4852, 4861, 4892, 4953, 4990, 5005, 5006, 5010, 5102, 5224, 5228, 5244, 5276, 5303, 5323, 5431, 5460, 5633, 5690, 5951], [480, 481, 482, 1140, 1157, 2080, 2243, 2305, 2374, 2406, 2689, 3429, 3716, 5264], [582, 1274, 2199, 2299, 5021], [143, 846, 1156, 1266, 1309, 1492, 1564, 1846, 2029, 2172, 2186, 2472, 2520, 3326, 3493, 3853, 5029, 5058, 5579], [49, 111, 144, 178, 263, 269, 280, 484, 633, 664, 841, 944, 949, 956, 1006, 1022, 1043, 1111, 1133, 1164, 1195, 1255, 1279, 1283, 1344, 1361, 1378, 1381, 1464, 1471, 1475, 1506, 1555, 1577, 1583, 1602, 1611, 1613, 1627, 1668, 1702, 1708, 1738, 1766, 1839, 1894, 1953, 1961, 1972, 2001, 2003, 2023, 2027, 2033, 2037, 2089, 2107, 2200, 2249, 2254, 2272, 2380, 2478, 2484, 2528, 2677, 2880, 3340, 3408, 3425, 4638, 4649, 4690, 4718, 4751, 5074, 5269, 5351, 5416, 5456, 5496, 5552, 5562, 5612, 5723, 5876, 5884, 6149], [0, 78, 146, 151, 337, 352, 530, 909, 1065, 1067, 1070, 1071, 1200, 1205, 1250, 1430, 1460, 1526, 1553, 1598, 1614, 1763, 1910, 1931, 1951, 2009, 2100, 2181, 2197, 2401, 3252, 3301, 3424, 3539, 3563, 5740], [107, 770, 960, 1355, 1498, 1745, 1773, 1782, 1873, 1875, 1882, 1952, 2246, 2297, 2447, 2480, 2499, 2522, 2527, 2651, 5960], [116, 257, 348, 479, 936, 1581, 1866, 2359, 2381, 2714, 3560, 3911, 5317], [2, 46, 58, 105, 109, 127, 133, 134, 214, 231, 237, 303, 324, 375, 402, 418, 426, 446, 536, 546, 555, 559, 626, 699, 726, 744, 878, 904, 922, 929, 932, 971, 1024, 1035, 1055, 1072, 1085, 1166, 1206, 1232, 1280, 1286, 1305, 1373, 1501, 1517, 1522, 1530, 1531, 1542, 1569, 1609, 1681, 1781, 1792, 1814, 1825, 1854, 1862, 1879, 1930, 1944, 1960, 2101, 2184, 2219, 2260, 2279, 2324, 2361, 2393, 2420, 2426, 2428, 2451, 2473, 2512, 2577, 2583, 2586, 2603, 2639, 2643, 2658, 2662, 2667, 2668, 2683, 2686, 2701, 2741, 2746, 2768, 2811, 2814, 2815, 2891, 2918, 2947, 2948, 2953, 2962, 2973, 2979, 2980, 2995, 3010, 3080, 3104, 3134, 3144, 3166, 3177, 3188, 3197, 3213, 3231, 3260, 3292, 3324, 3410, 3419, 3431, 3467, 3468, 3485, 3486, 3527, 3571, 3580, 3681, 3824, 4253, 5134, 5197, 5455, 6250], [156, 169, 204, 252, 356, 473, 750, 990, 1229, 1327, 1450, 1479, 1505, 2010, 2032, 2043, 2144, 2164, 2170, 2293, 2383, 2389, 2397, 2423, 2462, 2497, 2517, 2593, 2634, 2635, 2637, 2703, 2767, 3055, 3095, 3098, 3101, 3107, 3110, 3115, 3128, 3218, 3220, 3235, 3256, 3257, 3269, 3270, 3271, 3273, 3278, 3284, 3291, 3296, 3298, 3302, 3306, 3321, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3356, 3363, 3368, 3378, 3384, 3436, 3446, 3464, 3592, 3696, 3778, 4382, 4491, 4566, 4581, 4679, 4821, 4896, 4925, 4940, 4979, 5015, 5103, 5110, 5190, 5236, 5272, 5306, 5350, 5379, 5494, 5506, 5516, 5649, 5761, 5953, 6246], [33, 39, 54, 87, 170, 255, 264, 298, 299, 500, 539, 682, 760, 778, 793, 800, 808, 905, 921, 952, 970, 998, 1002, 1061, 1075, 1092, 1136, 1155, 1172, 1174, 1184, 1192, 1202, 1209, 1242, 1247, 1313, 1375, 1417, 1546, 1561, 1565, 1574, 1593, 1620, 1646, 1692, 1694, 1704, 1705, 1707, 1716, 1717, 1718, 1735, 1740, 1749, 1769, 1772, 1779, 1791, 1861, 1869, 1874, 1912, 1923, 1945, 1964, 1981, 1999, 2088, 2090, 2091, 2118, 2121, 2133, 2179, 2190, 2196, 2201, 2212, 2230, 2290, 2307, 2316, 2318, 2330, 2340, 2343, 2385, 2392, 2394, 2437, 2442, 2453, 2516, 2530, 2535, 2592, 2638, 2645, 2674, 2711, 2783, 2860, 3001, 3096, 3131, 3214, 3219, 3230, 3261, 3264, 3275, 3289, 3293, 3304, 3316, 3327, 3347, 3351, 3352, 3358, 3383, 3411, 3442, 3499, 3500, 3583, 3649, 4676, 4798, 4845, 5098, 5580, 5807, 6020, 6284], [141, 297, 312, 327, 611, 924, 958, 1580, 1599, 1928, 2142, 2232, 2402, 2448, 2816, 2988, 3704, 3758, 3791, 4039, 4292, 4307, 4365, 4436, 4578, 4689, 4707, 4735, 5267, 5275, 5302, 5483, 5508, 5629, 5667, 5694, 5905, 6150, 6378], [7, 38, 40, 61, 73, 79, 82, 172, 176, 187, 191, 198, 234, 275, 285, 319, 336, 346, 351, 387, 392, 420, 465, 485, 503, 518, 560, 566, 609, 623, 629, 645, 651, 675, 679, 681, 690, 691, 709, 725, 738, 741, 799, 802, 824, 837, 838, 866, 937, 950, 953, 968, 1026, 1031, 1033, 1078, 1089, 1147, 1150, 1181, 1186, 1191, 1193, 1217, 1228, 1239, 1272, 1273, 1277, 1295, 1322, 1325, 1346, 1366, 1401, 1407, 1424, 1445, 1459, 1461, 1466, 1474, 1529, 1539, 1610, 1657, 1663, 1674, 1686, 1700, 1709, 1755, 1765, 1767, 1868, 1887, 1891, 1971, 1974, 1995, 2028, 2058, 2150, 2175, 2185, 2198, 2277, 2291, 2296, 2301, 2336, 2341, 2345, 2358, 2408, 2414, 2443, 2445, 2454, 2466, 2485, 2492, 2501, 2503, 2504, 2507, 2518, 2536, 2545, 2550, 2551, 2558, 2559, 2563, 2569, 2591, 2607, 2617, 2659, 2673, 2690, 2710, 2713, 2725, 2735, 2756, 2773, 2799, 2803, 2804, 2806, 2807, 2817, 2831, 2846, 2854, 2861, 2869, 2870, 2872, 2894, 2907, 2920, 2927, 2934, 2938, 2966, 2976, 2990, 3009, 3060, 3090, 3145, 3165, 3174, 3182, 3202, 3221, 3222, 3237, 3251, 3255, 3258, 3276, 3281, 3308, 3332, 3354, 3362, 3393, 3433, 3505, 3515, 3524, 3545, 3558, 3575, 3613, 3627, 3634, 3639, 3641, 3655, 3678, 3680, 3687], [21, 175, 945, 1069, 1189, 1371, 1566, 1625, 2285, 2531, 2606, 2761, 3265, 3462, 4709, 5385, 5976, 6063], [48, 75, 511, 573, 704, 1264, 1551, 1552, 1576, 1662, 1758, 1884, 2095, 2220, 2386, 2510, 2855, 2982, 3161, 3215, 3266, 3280, 3299, 3452, 3556, 3605, 3637, 3668, 3714, 3764, 3776, 3862, 3934, 3935, 4105, 4181, 4186, 4621, 4708, 4730, 4770, 4849, 4923, 4934, 4955, 4971, 4999, 5145, 5277, 5394, 5417, 5481, 5531, 5536, 5619, 5628, 5636, 5666, 5727, 5735, 5835, 5836, 5842, 5880, 6164, 6194, 6252, 6255, 6257, 6290, 6291, 6293, 6319, 6320, 6361, 6372, 6389]], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [57.955549577344101, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [60.000000000000007, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0], [63.63961030678928, 45.0, 0.0], [0.0, 60.0, 0.0], [17.320508075688775, 60.0, 0.0], [34.641016151377549, 60.0, 0.0], [51.96152422706632, 60.0, 0.0], [69.282032302755098, 60.0, 0.0], [0.0, 75.0, 0.0], [15.529142706151246, 75.0, 0.0], [31.058285412302492, 75.0, 0.0], [46.587428118453737, 75.0, 0.0], [62.116570824604985, 75.0, 0.0], [0.0, 90.0, 0.0], [15.0, 90.0, 0.0], [30.0, 90.0, 0.0], [45.0, 90.0, 0.0], [60.0, 90.0, 0.0]])))

    def test_with_sym_c1_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'c1', 'P')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'c1', 'P')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[3317], [525, 2496, 3094, 4860], [666, 2805], [], [213, 1664, 1666, 2859, 4803, 5174, 5273, 5867], [272, 357, 432, 600, 1034, 1169, 1360, 1536, 1936, 2694, 3322, 3906, 4657, 4777, 4888, 4889, 4916, 4951, 5059, 5222, 5245, 5301], [], [], [277, 1473, 1878, 2590, 4532, 6328], [185, 777, 785, 1442, 1452, 1888, 2539, 3109, 3731, 3819, 5444, 6028], [2152, 2161, 2169, 3169, 3674], [], [], [], [1, 13, 51, 52, 88, 92, 99, 179, 181, 208, 212, 215, 218, 227, 230, 253, 259, 267, 269, 270, 279, 594, 636, 640, 647, 654, 710, 745, 787, 954, 982, 1004, 1008, 1032, 1036, 1037, 1043, 1050, 1095, 1099, 1125, 1161, 1164, 1165, 1194, 1219, 1225, 1246, 1254, 1282, 1290, 1320, 1330, 1347, 1361, 1384, 1388, 1390, 1394, 1422, 1423, 1464, 1471, 1520, 1547, 1587, 1591, 1608, 1637, 1652, 1667, 1689, 1699, 1722, 1752, 1756, 1759, 1794, 1795, 1796, 1800, 1829, 1831, 1865, 1872, 1886, 1899, 1938, 1989, 2041, 2066, 2068, 2069, 2083, 2105, 2110, 2140, 2143, 2153, 2225, 2245, 2257, 2262, 2282, 2332, 2407, 2421, 2475, 2484, 2544, 2564, 2909, 3178, 3576, 3904, 4357, 4484, 4530, 4560, 4631, 4802, 4804, 4813, 4852, 4953, 4990, 5005, 5102, 5228, 5276, 5431, 5633, 5951], [97, 103, 117, 371, 476, 774, 801, 819, 851, 1064, 1134, 1171, 1196, 1238, 1251, 1256, 1263, 1292, 1296, 1318, 1356, 1359, 1431, 1503, 1518, 1528, 1549, 1579, 1616, 1634, 1651, 1660, 1691, 1712, 1714, 1724, 1750, 1753, 1761, 1793, 1811, 1836, 1838, 1901, 1903, 1909, 1939, 1940, 1978, 1998, 2008, 2106, 2208, 2347, 2459, 2491, 2636, 2681, 2818, 3599, 3606, 3651, 3784, 3818, 3846, 3871, 3882, 3937, 3945, 4602, 4648, 4658, 4674, 4712, 4776, 4778, 4861, 4890, 4891, 4892, 5006, 5010, 5051, 5146, 5151, 5224, 5244, 5303, 5323, 5324, 5369, 5460, 5501, 5534, 5690], [10, 89, 90, 91, 149, 150, 180, 182, 210, 211, 229, 268, 271, 278, 403, 409, 483, 730, 769, 786, 885, 892, 900, 928, 963, 974, 976, 1040, 1059, 1063, 1129, 1130, 1135, 1138, 1163, 1176, 1197, 1226, 1260, 1261, 1285, 1288, 1303, 1319, 1374, 1385, 1386, 1387, 1391, 1392, 1393, 1419, 1420, 1427, 1441, 1449, 1457, 1469, 1516, 1519, 1544, 1545, 1550, 1554, 1567, 1612, 1623, 1644, 1685, 1690, 1713, 1751, 1754, 1760, 1774, 1789, 1827, 1832, 1833, 1860, 1871, 1896, 1897, 1900, 1906, 1911, 1913, 1926, 1937, 1941, 1942, 1943, 1947, 1958, 1959, 1975, 1976, 2005, 2006, 2039, 2070, 2074, 2076, 2104, 2111, 2122, 2132, 2186, 2252, 2287, 2326, 2370, 2377, 2418, 2613, 2615, 2620, 2631, 2664, 2718, 2737, 3263, 3335, 3426, 3543, 3748, 3770, 3820, 3932, 3933, 3938, 4338, 4537, 4656, 4667, 4734, 4854, 5080, 5081, 5123, 5124, 5152, 5305, 5374, 5404, 5432, 5485, 5529], [], [], [], [96, 1358, 2138, 2248, 2250, 2672, 6174], [693, 834, 1178, 1400, 2404, 2675, 2843, 3800, 5588], [590, 1317, 1672, 1885, 2194, 2682, 2688, 3239, 3529, 3679, 3792, 4020, 4271, 6155, 6304], [266, 1729, 2281, 2455, 3489, 4045, 5199], [], [], [], [], [5416, 5612], [49, 111, 144, 178, 255, 263, 264, 280, 337, 484, 633, 664, 944, 949, 956, 1006, 1009, 1022, 1023, 1070, 1111, 1133, 1184, 1195, 1200, 1205, 1247, 1250, 1255, 1283, 1344, 1378, 1381, 1430, 1475, 1506, 1553, 1555, 1565, 1577, 1583, 1602, 1613, 1614, 1627, 1668, 1702, 1708, 1735, 1738, 1757, 1766, 1839, 1861, 1894, 1931, 1953, 1961, 1972, 2001, 2003, 2023, 2027, 2033, 2037, 2061, 2089, 2107, 2118, 2200, 2205, 2249, 2254, 2380, 2401, 2434, 2880, 3252, 3408, 3424, 3563, 4638, 5884], [78, 146, 352, 480, 482, 909, 1763, 1910, 1951, 2080, 2100, 2181, 2197, 2243, 3301, 3539, 3716, 5008], [134, 143, 846, 1156, 1157, 1266, 1309, 1492, 1564, 1846, 2172, 2374, 2520, 3326, 3493, 3853, 5058, 5264], [2029, 2327, 2472, 3340, 4649, 4690, 4718, 4751, 5029, 5074, 5110, 5351, 5496, 5552, 5562, 5579, 5723], [], [], [], [], [481, 1140, 2305, 2406], [582, 1274, 2199, 2299, 5021], [841, 1279, 1611, 2272, 2478, 2528, 2677, 3425, 5269, 5456, 5876], [0, 151, 530, 1065, 1067, 1071, 1460, 1598, 2009, 5740], [107, 1498, 1745, 1782, 1882, 1952, 2246, 2297, 2499, 2522, 2527, 2651, 3429, 5960], [], [], [], [], [], [3001], [33, 170, 298, 299, 760, 952, 970, 987, 1002, 1075, 1136, 1155, 1172, 1174, 1192, 1313, 1395, 1417, 1546, 1574, 1593, 1620, 1692, 1694, 1704, 1718, 1740, 1772, 1779, 1791, 1869, 1912, 1945, 1999, 2088, 2090, 2091, 2121, 2133, 2212, 2230, 2307, 2316, 2318, 2330, 2343, 2385, 2392, 2394, 2638, 2645, 2860, 5580, 6149], [87, 141, 500, 611, 778, 921, 958, 960, 998, 1202, 1209, 1242, 1355, 1526, 1580, 1599, 1605, 1646, 1707, 1773, 1819, 1874, 1923, 1928, 2055, 2142, 2179, 2190, 2201, 2290, 2340, 2437, 2447, 2448, 2453, 2711, 5508], [58, 770, 1569, 1609, 1873, 1875, 2101, 2480, 2668, 2689, 2768, 3266, 5197, 5455], [169, 1305, 1450, 1862, 1879, 2043, 2428, 2593, 2703, 3410, 3696, 3824, 4253, 4382, 4491, 4566, 4581, 4679, 4821, 4940, 4979, 5015, 5103, 5134, 5190, 5236, 5306, 5379, 5494, 5516, 5649, 5761, 6250], [3778], [], [], [], [], [], [116, 257, 348, 479, 936, 1581, 1866, 2359, 2381, 2714, 3560, 3911, 5317], [156, 204, 252, 356, 473, 750, 990, 1229, 1327, 1479, 1505, 2010, 2032, 2144, 2164, 2170, 2293, 2383, 2389, 2397, 2423, 2462, 2497, 2517, 2634, 2635, 2637, 2767, 3055, 3095, 3098, 3101, 3107, 3110, 3115, 3128, 3218, 3220, 3235, 3256, 3257, 3269, 3270, 3271, 3273, 3278, 3284, 3291, 3296, 3298, 3302, 3306, 3321, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3356, 3363, 3368, 3378, 3384, 3436, 3446, 3464, 3592, 4925, 5272, 5350, 5506, 5953, 6246], [39, 54, 800, 808, 2196, 2442, 2516, 2674, 3096, 3131, 3214, 3219, 3230, 3261, 3264, 3275, 3289, 3293, 3304, 3316, 3327, 3347, 3351, 3352, 3358, 3383, 3411, 3442, 3499, 3500, 3583, 3649, 4676, 4798, 4845, 5098, 5807, 6020, 6284], [297, 312, 327, 924, 2232, 2402, 2816, 2988, 3704, 3758, 3791, 4039, 4292, 4307, 4365, 4436, 4578, 4689, 4707, 4735, 5267, 5275, 5302, 5483, 5629, 5667, 5694, 5905, 6150, 6378], [7, 38, 40, 46, 61, 73, 79, 82, 105, 109, 127, 172, 176, 187, 191, 198, 231, 234, 237, 275, 285, 303, 319, 324, 336, 346, 351, 375, 387, 392, 402, 418, 420, 426, 446, 465, 485, 503, 518, 536, 546, 555, 559, 560, 566, 609, 623, 626, 629, 645, 651, 675, 679, 681, 690, 691, 704, 709, 725, 738, 741, 744, 799, 802, 824, 837, 838, 866, 878, 904, 929, 937, 950, 953, 968, 971, 1026, 1031, 1033, 1035, 1055, 1072, 1078, 1085, 1089, 1147, 1150, 1166, 1181, 1186, 1191, 1193, 1217, 1228, 1232, 1239, 1272, 1273, 1277, 1280, 1286, 1295, 1322, 1325, 1346, 1366, 1373, 1401, 1407, 1424, 1445, 1459, 1461, 1466, 1474, 1501, 1517, 1522, 1529, 1530, 1531, 1539, 1542, 1610, 1657, 1663, 1674, 1681, 1686, 1700, 1709, 1755, 1765, 1767, 1781, 1792, 1825, 1854, 1868, 1887, 1891, 1944, 1960, 1971, 1974, 1995, 2028, 2058, 2150, 2175, 2184, 2185, 2198, 2260, 2277, 2291, 2296, 2301, 2336, 2341, 2345, 2358, 2361, 2393, 2408, 2414, 2420, 2443, 2445, 2451, 2454, 2466, 2473, 2485, 2492, 2501, 2503, 2504, 2507, 2512, 2518, 2536, 2545, 2550, 2551, 2558, 2559, 2563, 2569, 2577, 2583, 2586, 2591, 2603, 2607, 2617, 2639, 2658, 2659, 2667, 2673, 2690, 2701, 2710, 2713, 2725, 2735, 2741, 2746, 2756, 2773, 2799, 2803, 2804, 2806, 2807, 2811, 2814, 2815, 2817, 2831, 2846, 2854, 2861, 2869, 2870, 2872, 2891, 2894, 2907, 2918, 2920, 2927, 2934, 2938, 2947, 2948, 2953, 2962, 2966, 2973, 2976, 2990, 3009, 3010, 3060, 3080, 3090, 3104, 3134, 3144, 3145, 3165, 3166, 3174, 3177, 3182, 3188, 3197, 3202, 3221, 3222, 3237, 3251, 3255, 3258, 3260, 3276, 3281, 3292, 3308, 3324, 3332, 3354, 3362, 3393, 3419, 3431, 3433, 3467, 3468, 3485, 3486, 3505, 3515, 3524, 3527, 3545, 3556, 3558, 3575, 3580, 3613, 3627, 3634, 3639, 3641, 3655, 3678, 3680, 3687], [2, 133, 214, 699, 726, 922, 932, 1024, 1206, 1814, 1930, 2219, 2279, 2324, 2426, 2643, 2662, 2683, 2686, 2979, 2980, 2995, 3213, 3231, 3571, 3681], [], [], [], [], [], [], [126, 534, 1641, 1778, 2016, 2084, 3698, 3699, 3702, 3703, 3705, 3706, 3707, 3709, 3712, 3717, 3722, 3723, 3727, 3741, 3744, 3755, 3757, 3759, 3777, 3779, 3789, 3794, 3798, 3801, 3802, 3803, 3804, 3805, 3808, 3813, 3815, 3821, 3826, 3827, 3828, 3830, 3831, 3833, 3834, 3838, 3844, 3848, 3851, 3852, 3855, 3858, 3860, 3864, 3866, 3867, 3870, 3874, 3875, 3876, 3877, 3881, 3883, 3891, 3892, 3893, 3894, 3897, 3900, 3903, 3908, 3915, 3916, 3917, 3918, 3919, 3923, 3926, 3927, 3929, 3931, 3941, 3944, 3946, 3947, 3948, 3949, 3950, 3957, 3962, 3963, 3964, 3966, 3976, 3977, 3986, 3990, 3993, 3996, 3997, 3999, 4005, 4009, 4010, 4014, 4018, 4022, 4029, 4030, 4032, 4034, 4037, 4040, 4041, 4044, 4053, 4056, 4060, 4061, 4063, 4064, 4065, 4066, 4067, 4076, 4083, 4085, 4090, 4099, 4100, 4101, 4102, 4106, 4109, 4112, 4113, 4117, 4122, 4123, 4125, 4128, 4129, 4133, 4134, 4136, 4141, 4142, 4150, 4156, 4157, 4158, 4159, 4162, 4163, 4166, 4167, 4176, 4182, 4183, 4184, 4187, 4189, 4190, 4191, 4192, 4197, 4198, 4199, 4201, 4203, 4209, 4211, 4212, 4214, 4216, 4220, 4221, 4222, 4227, 4230, 4231, 4233, 4237, 4241, 4244, 4247, 4251, 4255, 4264, 4265, 4270, 4272, 4275, 4277, 4278, 4286, 4288, 4301, 4302, 4305, 4314, 4318, 4322, 4323, 4324, 4326, 4339, 4341, 4342, 4349, 4351, 4354, 4359, 4364, 4370, 4371, 4372, 4373, 4379, 4380, 4387, 4392, 4397, 4398, 4399, 4400, 4402, 4410, 4412, 4413, 4416, 4419, 4420, 4421, 4426, 4435, 4437, 4438, 4439, 4455, 4460, 4463, 4464, 4467, 4468, 4470, 4472, 4473, 4478, 4481, 4486, 4487, 4490, 4493, 4495, 4499, 4501, 4502, 4504, 4505, 4506, 4511, 4516, 4517, 4518, 4521, 4525, 4526, 4527, 4528, 4529, 4531, 4535, 4538, 4543, 4544, 4545, 4546, 4548, 4552, 4553, 4570, 4572, 4573, 4574, 4575, 4577, 4582, 4583, 4584, 4586, 4590, 4591, 4594, 4597, 4600, 4603, 4604, 4606, 4610, 4611, 4612, 4617, 4622, 4624, 4625, 4626, 4628, 4630, 4632, 4633, 4636, 4642, 4643, 4644, 4647, 4650, 4660, 4661, 4662, 4663, 4665, 4666, 4668, 4669, 4671, 4675, 4678, 4681, 4693, 4694, 4698, 4699, 4700, 4703, 4710, 4711, 4713, 4721, 4724, 4736, 4740, 4746, 4749, 4754, 4757, 4758, 4759, 4774, 4783, 4793, 4795, 4796, 4797, 4807, 4808, 4815, 4817, 4824, 4825, 4828, 4829, 4832, 4833, 4835, 4836, 4839, 4841, 4843, 4848, 4850, 4851, 4857, 4859, 4865, 4871, 4874, 4880, 4882, 4883, 4886, 4887, 4904, 4905, 4906, 4909, 4910, 4911, 4914, 4932, 4935, 4936, 4937, 4938, 4941, 4944, 4946, 4947, 4948, 4949, 4950, 4952, 4960, 4962, 4963, 4967, 4972, 4973, 4974, 4976, 4977, 4982, 4985, 4986, 4988, 4989, 4993, 4996, 4997, 5000, 5002, 5016, 5018, 5020, 5022, 5025, 5028, 5031, 5032, 5035, 5038, 5039, 5052, 5053, 5057, 5061, 5062, 5083, 5085, 5086, 5095, 5097, 5101, 5108, 5109, 5111, 5117, 5119, 5120, 5128, 5131, 5132, 5133, 5139, 5148, 5149, 5154, 5156, 5158, 5163, 5166, 5173, 5176, 5189, 5191, 5193, 5195, 5196, 5201, 5206, 5207, 5210, 5211, 5215, 5225, 5227, 5229, 5230, 5231, 5232, 5238, 5239, 5243, 5248, 5259, 5265, 5270, 5271, 5282, 5288, 5293, 5296, 5304, 5307, 5309, 5311, 5312, 5313, 5322, 5327, 5333, 5335, 5336, 5338, 5339, 5342, 5343, 5356, 5358, 5360, 5362, 5367, 5370, 5373, 5376, 5377, 5382, 5388, 5390, 5395, 5403, 5408, 5409, 5413, 5414, 5420, 5421, 5422, 5424, 5426, 5428, 5435, 5436, 5441, 5445, 5447, 5454, 5458, 5459, 5461, 5464, 5465, 5468, 5472, 5474, 5475, 5477, 5479, 5482, 5484, 5486, 5491, 5492, 5497, 5509, 5511, 5521, 5522, 5530, 5533, 5535, 5537, 5545, 5546, 5547, 5555, 5556, 5557, 5558, 5560, 5564, 5570, 5576, 5581, 5589, 5598, 5600, 5604, 5605, 5607, 5615, 5620, 5622, 5626, 5627, 5628, 5630, 5631, 5637, 5647, 5651, 5653, 5654, 5660, 5670, 5675, 5676, 5680, 5681, 5682, 5688, 5691, 5698, 5699, 5703, 5704, 5705, 5707, 5710, 5712, 5714, 5716, 5717, 5718, 5724, 5725, 5726, 5729, 5736, 5738, 5739, 5743, 5744, 5747, 5750, 5755, 5758, 5760, 5766, 5767, 5768, 5769, 5771, 5774, 5778, 5781, 5782, 5787, 5788, 5792, 5793, 5795, 5798, 5801, 5806, 5808, 5811, 5812, 5814, 5819, 5823, 5825, 5826, 5827, 5828, 5829, 5838, 5841, 5845, 5846, 5852, 5860, 5862, 5866, 5873, 5874, 5881, 5885, 5887, 5889, 5890, 5894, 5895, 5896, 5902, 5903, 5908, 5909, 5910, 5913, 5920, 5921, 5924, 5925, 5928, 5937, 5938, 5943, 5948, 5961, 5964, 5968, 5969, 5971, 5972, 5975, 5977, 5979, 5987, 5989, 6000, 6001, 6010, 6011, 6012, 6014, 6015, 6017, 6026, 6033, 6035, 6036, 6046, 6054, 6066, 6080, 6081, 6084, 6100, 6103, 6115, 6116, 6126, 6130, 6133, 6137, 6143, 6147, 6152, 6153, 6158, 6160, 6167, 6169, 6171, 6172, 6177, 6200, 6201, 6238, 6241, 6242, 6267, 6276, 6277, 6279, 6294, 6321, 6326, 6337, 6340, 6348, 6349, 6350, 6351, 6355, 6356, 6369, 6373, 6404, 6407], [3, 5, 6, 8, 9, 12, 14, 15, 17, 19, 20, 22, 26, 27, 28, 29, 30, 31, 34, 35, 37, 41, 42, 43, 45, 47, 53, 55, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 76, 77, 80, 81, 83, 84, 85, 93, 94, 95, 98, 100, 101, 102, 104, 106, 108, 110, 112, 113, 114, 118, 120, 121, 122, 124, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 142, 145, 147, 148, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 173, 174, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 201, 203, 205, 206, 207, 209, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 262, 265, 273, 276, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 304, 305, 307, 309, 310, 311, 313, 315, 316, 317, 320, 321, 322, 323, 325, 326, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 344, 345, 347, 349, 353, 354, 358, 359, 360, 361, 362, 363, 366, 367, 368, 370, 372, 373, 374, 377, 378, 382, 383, 385, 386, 389, 390, 391, 393, 396, 398, 399, 404, 405, 406, 407, 410, 416, 419, 421, 423, 424, 425, 427, 428, 429, 430, 431, 433, 436, 438, 439, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 474, 475, 477, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 504, 506, 507, 508, 509, 510, 513, 515, 516, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 535, 538, 539, 542, 543, 545, 547, 548, 549, 550, 552, 553, 554, 558, 563, 565, 567, 568, 569, 570, 571, 575, 577, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 610, 612, 614, 616, 617, 619, 620, 621, 622, 625, 628, 630, 631, 632, 634, 635, 637, 638, 639, 641, 642, 643, 644, 648, 649, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 682, 683, 685, 687, 688, 689, 694, 695, 696, 697, 701, 703, 705, 706, 707, 708, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 724, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 739, 740, 742, 743, 746, 748, 751, 752, 754, 755, 756, 757, 758, 759, 761, 763, 765, 766, 767, 768, 771, 772, 775, 776, 779, 780, 781, 782, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 817, 818, 821, 822, 825, 827, 828, 829, 831, 832, 833, 835, 836, 839, 840, 842, 844, 845, 848, 849, 850, 853, 854, 855, 857, 858, 859, 861, 862, 864, 867, 869, 870, 872, 873, 874, 876, 877, 879, 881, 882, 884, 886, 887, 888, 889, 891, 893, 894, 896, 897, 898, 899, 902, 903, 905, 906, 907, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 923, 925, 926, 927, 930, 931, 933, 934, 935, 938, 939, 940, 941, 943, 946, 948, 951, 955, 957, 959, 961, 964, 966, 967, 969, 972, 978, 979, 980, 981, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1003, 1007, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1068, 1073, 1074, 1077, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1112, 1113, 1114, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1131, 1132, 1137, 1139, 1141, 1143, 1144, 1145, 1146, 1148, 1151, 1152, 1153, 1154, 1158, 1159, 1160, 1167, 1168, 1170, 1173, 1175, 1179, 1180, 1187, 1198, 1199, 1201, 1203, 1204, 1208, 1210, 1211, 1212, 1214, 1216, 1222, 1223, 1224, 1227, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1243, 1244, 1245, 1249, 1252, 1253, 1257, 1259, 1262, 1265, 1269, 1270, 1271, 1275, 1276, 1278, 1281, 1284, 1287, 1289, 1293, 1294, 1297, 1299, 1300, 1301, 1302, 1304, 1306, 1307, 1308, 1310, 1311, 1312, 1315, 1316, 1321, 1323, 1324, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1337, 1340, 1341, 1342, 1343, 1345, 1351, 1352, 1353, 1357, 1362, 1363, 1364, 1365, 1367, 1368, 1369, 1370, 1372, 1375, 1376, 1377, 1379, 1382, 1383, 1389, 1396, 1397, 1398, 1399, 1402, 1403, 1404, 1406, 1408, 1409, 1410, 1412, 1413, 1415, 1416, 1418, 1421, 1425, 1426, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1443, 1444, 1446, 1447, 1453, 1454, 1455, 1456, 1458, 1462, 1463, 1465, 1467, 1468, 1470, 1472, 1476, 1477, 1478, 1480, 1481, 1482, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1493, 1494, 1495, 1496, 1497, 1502, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1521, 1523, 1524, 1525, 1527, 1532, 1534, 1535, 1538, 1540, 1541, 1543, 1548, 1556, 1557, 1559, 1560, 1561, 1562, 1568, 1570, 1571, 1572, 1573, 1575, 1578, 1582, 1584, 1585, 1586, 1588, 1589, 1590, 1592, 1594, 1595, 1596, 1597, 1603, 1604, 1606, 1607, 1615, 1617, 1618, 1619, 1621, 1622, 1624, 1626, 1628, 1630, 1632, 1633, 1635, 1636, 1638, 1642, 1643, 1645, 1647, 1648, 1649, 1650, 1653, 1654, 1655, 1656, 1658, 1659, 1661, 1670, 1671, 1673, 1675, 1677, 1678, 1679, 1680, 1682, 1683, 1687, 1688, 1693, 1695, 1696, 1697, 1698, 1701, 1703, 1705, 1710, 1711, 1715, 1716, 1717, 1721, 1723, 1725, 1726, 1727, 1728, 1730, 1733, 1734, 1737, 1739, 1741, 1742, 1743, 1744, 1747, 1748, 1749, 1764, 1768, 1769, 1771, 1775, 1776, 1777, 1785, 1786, 1787, 1788, 1797, 1798, 1799, 1801, 1803, 1804, 1805, 1806, 1808, 1809, 1810, 1812, 1813, 1815, 1816, 1817, 1818, 1820, 1821, 1822, 1826, 1828, 1830, 1834, 1835, 1837, 1841, 1842, 1845, 1847, 1848, 1849, 1850, 1853, 1857, 1858, 1859, 1863, 1864, 1870, 1877, 1880, 1881, 1883, 1889, 1890, 1892, 1893, 1895, 1898, 1902, 1904, 1905, 1907, 1908, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1924, 1925, 1927, 1929, 1932, 1933, 1935, 1946, 1948, 1954, 1955, 1956, 1957, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1973, 1977, 1979, 1980, 1981, 1982, 1983, 1984, 1986, 1987, 1988, 1991, 1992, 1993, 1996, 1997, 2000, 2004, 2007, 2011, 2012, 2014, 2015, 2017, 2018, 2019, 2020, 2021, 2022, 2024, 2025, 2030, 2031, 2035, 2036, 2038, 2042, 2044, 2045, 2046, 2048, 2049, 2050, 2051, 2052, 2053, 2057, 2060, 2062, 2063, 2064, 2065, 2067, 2071, 2072, 2073, 2075, 2077, 2078, 2081, 2082, 2086, 2087, 2092, 2094, 2096, 2097, 2098, 2099, 2102, 2103, 2108, 2109, 2112, 2113, 2114, 2116, 2120, 2123, 2124, 2125, 2126, 2127, 2128, 2130, 2131, 2134, 2135, 2136, 2137, 2141, 2145, 2147, 2148, 2149, 2151, 2155, 2156, 2157, 2158, 2159, 2160, 2162, 2163, 2165, 2166, 2167, 2173, 2177, 2178, 2180, 2182, 2183, 2187, 2188, 2189, 2191, 2192, 2195, 2202, 2203, 2204, 2207, 2209, 2210, 2211, 2213, 2214, 2216, 2217, 2223, 2224, 2226, 2227, 2228, 2229, 2233, 2236, 2237, 2238, 2239, 2240, 2241, 2244, 2247, 2251, 2255, 2258, 2259, 2261, 2266, 2267, 2268, 2269, 2270, 2271, 2273, 2274, 2275, 2278, 2280, 2283, 2284, 2286, 2288, 2289, 2292, 2294, 2295, 2298, 2302, 2303, 2304, 2306, 2308, 2309, 2310, 2314, 2315, 2319, 2320, 2321, 2322, 2323, 2325, 2328, 2329, 2331, 2333, 2335, 2337, 2338, 2339, 2342, 2344, 2346, 2350, 2351, 2353, 2354, 2355, 2356, 2357, 2360, 2362, 2363, 2364, 2365, 2366, 2368, 2369, 2371, 2373, 2375, 2376, 2379, 2382, 2384, 2387, 2388, 2390, 2391, 2395, 2396, 2398, 2400, 2403, 2410, 2411, 2412, 2415, 2416, 2417, 2419, 2422, 2424, 2425, 2429, 2430, 2431, 2433, 2435, 2436, 2439, 2440, 2446, 2449, 2450, 2456, 2457, 2458, 2461, 2463, 2464, 2465, 2467, 2468, 2469, 2470, 2471, 2474, 2477, 2479, 2481, 2482, 2483, 2486, 2488, 2489, 2493, 2494, 2506, 2508, 2509, 2511, 2513, 2514, 2515, 2519, 2521, 2523, 2524, 2525, 2526, 2529, 2530, 2532, 2533, 2534, 2535, 2537, 2538, 2540, 2542, 2543, 2546, 2548, 2549, 2553, 2554, 2556, 2557, 2560, 2561, 2562, 2565, 2566, 2567, 2568, 2570, 2572, 2574, 2575, 2578, 2580, 2581, 2582, 2584, 2585, 2587, 2589, 2592, 2595, 2597, 2598, 2599, 2600, 2601, 2602, 2604, 2608, 2609, 2610, 2611, 2612, 2614, 2618, 2619, 2621, 2625, 2627, 2628, 2629, 2630, 2633, 2641, 2642, 2644, 2647, 2648, 2650, 2652, 2653, 2654, 2655, 2656, 2657, 2660, 2661, 2663, 2665, 2666, 2670, 2671, 2676, 2678, 2679, 2685, 2687, 2691, 2692, 2693, 2695, 2696, 2697, 2699, 2700, 2702, 2704, 2705, 2706, 2707, 2709, 2715, 2716, 2717, 2719, 2720, 2721, 2722, 2723, 2724, 2726, 2728, 2729, 2730, 2733, 2734, 2740, 2742, 2743, 2744, 2747, 2748, 2749, 2752, 2753, 2755, 2757, 2759, 2760, 2762, 2765, 2766, 2769, 2772, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2786, 2787, 2789, 2790, 2791, 2792, 2794, 2795, 2796, 2797, 2798, 2801, 2802, 2808, 2809, 2810, 2812, 2813, 2819, 2820, 2821, 2822, 2824, 2825, 2826, 2827, 2829, 2830, 2832, 2834, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2844, 2845, 2849, 2850, 2851, 2853, 2856, 2858, 2862, 2863, 2864, 2866, 2867, 2868, 2871, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2881, 2883, 2884, 2885, 2886, 2890, 2892, 2893, 2895, 2896, 2897, 2898, 2901, 2902, 2903, 2905, 2906, 2908, 2910, 2911, 2912, 2913, 2914, 2915, 2917, 2919, 2926, 2933, 2937, 2941, 2942, 2943, 2944, 2945, 2949, 2950, 2951, 2956, 2957, 2958, 2959, 2963, 2964, 2965, 2967, 2969, 2970, 2972, 2974, 2978, 2983, 2984, 2985, 2986, 2987, 2989, 2991, 2994, 2996, 2997, 2999, 3000, 3003, 3004, 3005, 3007, 3008, 3012, 3014, 3015, 3016, 3017, 3018, 3019, 3021, 3023, 3025, 3026, 3028, 3029, 3030, 3032, 3033, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3046, 3047, 3048, 3057, 3062, 3067, 3072, 3073, 3074, 3086, 3088, 3089, 3092, 3093, 3097, 3117, 3121, 3123, 3126, 3129, 3138, 3143, 3146, 3147, 3149, 3153, 3156, 3157, 3160, 3164, 3171, 3172, 3173, 3175, 3198, 3204, 3206, 3208, 3210, 3211, 3212, 3216, 3294, 3329, 3334, 3374, 3388, 3389, 3390, 3392, 3395, 3396, 3398, 3400, 3401, 3406, 3407, 3415, 3418, 3420, 3428, 3432, 3450, 3453, 3455, 3456, 3457, 3463, 3472, 3476, 3477, 3478, 3481, 3482, 3487, 3490, 3494, 3503, 3504, 3509, 3513, 3516, 3517, 3520, 3522, 3525, 3526, 3531, 3533, 3540, 3541, 3544, 3548, 3549, 3551, 3553, 3562, 3565, 3566, 3567, 3568, 3570, 3573, 3574, 3577, 3585, 3591, 3593, 3596, 3600, 3603, 3612, 3614, 3615, 3616, 3620, 3621, 3622, 3623, 3628, 3630, 3632, 3638, 3647, 3652, 3656, 3657, 3660, 3661, 3662, 3663, 3664, 3665, 3670, 3673, 3682, 3685, 3686, 3688, 3689, 3690, 3691, 3693, 3694, 3695, 3697, 3711, 3718, 3720, 3721, 3724, 3726, 3730, 3732, 3733, 3737, 3739, 3743, 3746, 3750, 3752, 3754, 3756, 3761, 3762, 3763, 3767, 3772, 3773, 3774, 3775, 3780, 3782, 3783, 3785, 3786, 3788, 3793, 3796, 3797, 3799, 3807, 3809, 3810, 3812, 3814, 3816, 3817, 3822, 3823, 3829, 3832, 3835, 3836, 3837, 3839, 3841, 3842, 3843, 3845, 3847, 3857, 3859, 3863, 3869, 3872, 3873, 3878, 3879, 3880, 3884, 3885, 3886, 3888, 3895, 3896, 3898, 3899, 3901, 3905, 3907, 3912, 3913, 3921, 3922, 3924, 3925, 3928, 3930, 3936, 3952, 3954, 3958, 3961, 3969, 3970, 3972, 3974, 3983, 3984, 3985, 3987, 3988, 3991, 3994, 3998, 4000, 4001, 4006, 4011, 4013, 4015, 4016, 4019, 4021, 4025, 4026, 4028, 4033, 4036, 4042, 4047, 4048, 4051, 4052, 4054, 4057, 4058, 4059, 4072, 4073, 4075, 4078, 4079, 4080, 4082, 4088, 4095, 4096, 4103, 4107, 4108, 4111, 4116, 4118, 4120, 4121, 4124, 4126, 4127, 4131, 4140, 4161, 4165, 4173, 4177, 4179, 4180, 4185, 4188, 4193, 4195, 4202, 4204, 4206, 4217, 4224, 4225, 4229, 4234, 4239, 4240, 4242, 4245, 4246, 4249, 4250, 4252, 4257, 4258, 4259, 4261, 4262, 4263, 4266, 4268, 4274, 4276, 4279, 4281, 4293, 4298, 4300, 4303, 4306, 4310, 4311, 4315, 4316, 4317, 4320, 4321, 4325, 4327, 4328, 4329, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4343, 4344, 4348, 4350, 4352, 4366, 4367, 4368, 4369, 4375, 4377, 4378, 4381, 4388, 4389, 4390, 4391, 4393, 4401, 4406, 4407, 4422, 4427, 4429, 4430, 4432, 4433, 4434, 4440, 4444, 4446, 4447, 4449, 4451, 4452, 4454, 4458, 4459, 4466, 4469, 4471, 4474, 4477, 4480, 4482, 4483, 4488, 4494, 4500, 4503, 4512, 4514, 4519, 4520, 4522, 4523, 4524, 4533, 4534, 4536, 4539, 4540, 4542, 4547, 4551, 4557, 4558, 4559, 4562, 4563, 4565, 4568, 4569, 4576, 4587, 4588, 4589, 4595, 4596, 4598, 4599, 4607, 4609, 4613, 4615, 4618, 4623, 4627, 4637, 4639, 4651, 4654, 4655, 4659, 4670, 4673, 4677, 4680, 4683, 4684, 4688, 4692, 4695, 4696, 4697, 4715, 4717, 4719, 4722, 4723, 4725, 4728, 4729, 4732, 4733, 4737, 4739, 4741, 4743, 4744, 4747, 4752, 4753, 4755, 4756, 4760, 4762, 4764, 4781, 4782, 4785, 4786, 4787, 4788, 4791, 4792, 4799, 4800, 4801, 4806, 4810, 4811, 4812, 4814, 4816, 4819, 4822, 4826, 4830, 4834, 4842, 4847, 4853, 4855, 4858, 4862, 4867, 4868, 4869, 4876, 4877, 4878, 4879, 4881, 4884, 4893, 4894, 4897, 4898, 4900, 4901, 4902, 4907, 4913, 4915, 4917, 4918, 4919, 4920, 4921, 4922, 4926, 4928, 4929, 4939, 4945, 4956, 4957, 4959, 4961, 4964, 4965, 4968, 4970, 4975, 4981, 4983, 4987, 4992, 4994, 4998, 5001, 5004, 5007, 5009, 5011, 5012, 5013, 5017, 5019, 5026, 5030, 5033, 5036, 5037, 5040, 5041, 5045, 5046, 5047, 5048, 5050, 5054, 5056, 5063, 5064, 5065, 5066, 5067, 5069, 5071, 5072, 5076, 5078, 5079, 5082, 5087, 5088, 5092, 5099, 5100, 5106, 5107, 5112, 5114, 5115, 5116, 5118, 5121, 5122, 5130, 5135, 5136, 5137, 5138, 5142, 5144, 5150, 5157, 5159, 5160, 5161, 5167, 5168, 5169, 5170, 5171, 5172, 5175, 5179, 5180, 5181, 5182, 5183, 5184, 5186, 5187, 5192, 5194, 5200, 5203, 5204, 5205, 5208, 5212, 5213, 5216, 5217, 5218, 5220, 5221, 5223, 5226, 5234, 5235, 5237, 5240, 5241, 5246, 5247, 5249, 5250, 5256, 5257, 5261, 5262, 5278, 5279, 5280, 5281, 5283, 5284, 5285, 5286, 5287, 5290, 5291, 5298, 5308, 5310, 5314, 5315, 5318, 5319, 5320, 5321, 5325, 5326, 5328, 5331, 5334, 5337, 5344, 5345, 5352, 5359, 5361, 5363, 5364, 5365, 5368, 5372, 5378, 5380, 5381, 5383, 5386, 5387, 5391, 5392, 5393, 5396, 5397, 5398, 5399, 5400, 5401, 5407, 5410, 5418, 5419, 5423, 5427, 5430, 5433, 5438, 5440, 5442, 5443, 5446, 5448, 5449, 5451, 5452, 5462, 5463, 5469, 5471, 5473, 5476, 5488, 5495, 5500, 5503, 5507, 5510, 5512, 5513, 5514, 5515, 5517, 5526, 5527, 5539, 5540, 5542, 5548, 5553, 5554, 5559, 5561, 5563, 5565, 5567, 5569, 5572, 5573, 5574, 5578, 5582, 5583, 5586, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5599, 5602, 5606, 5609, 5610, 5614, 5616, 5617, 5623, 5634, 5635, 5638, 5640, 5642, 5644, 5645, 5646, 5648, 5650, 5652, 5656, 5657, 5659, 5661, 5662, 5663, 5665, 5669, 5672, 5673, 5677, 5679, 5683, 5685, 5692, 5693, 5695, 5696, 5697, 5700, 5702, 5706, 5715, 5719, 5722, 5728, 5732, 5733, 5741, 5746, 5753, 5754, 5756, 5757, 5759, 5762, 5764, 5765, 5779, 5783, 5785, 5786, 5789, 5794, 5802, 5805, 5817, 5820, 5821, 5824, 5831, 5832, 5834, 5837, 5840, 5843, 5848, 5849, 5850, 5851, 5854, 5857, 5858, 5861, 5863, 5864, 5871, 5872, 5877, 5883, 5888, 5892, 5893, 5898, 5899, 5900, 5901, 5907, 5912, 5916, 5917, 5919, 5922, 5927, 5932, 5933, 5936, 5939, 5940, 5941, 5942, 5944, 5947, 5950, 5954, 5959, 5962, 5965, 5966, 5978, 5982, 5984, 5988, 5994, 5998, 5999, 6008, 6009, 6013, 6016, 6018, 6019, 6021, 6022, 6023, 6024, 6031, 6034, 6037, 6041, 6042, 6044, 6047, 6053, 6058, 6074, 6077, 6078, 6088, 6091, 6093, 6098, 6105, 6114, 6121, 6124, 6127, 6128, 6129, 6131, 6132, 6135, 6138, 6144, 6146, 6157, 6159, 6178, 6197, 6212, 6213, 6220, 6230, 6243, 6251, 6253, 6274, 6280, 6286, 6301, 6307, 6313, 6315, 6317, 6332, 6339, 6342, 6343, 6346, 6347, 6354, 6370, 6385, 6396, 6416, 6417, 6418, 6419], [21, 175, 283, 945, 1069, 1189, 1371, 1411, 1566, 1625, 2285, 2460, 2531, 2606, 2761, 3002, 3265, 3462, 3643, 4709, 5277, 5385, 5976, 6063], [48, 511, 573, 1264, 1551, 1552, 1662, 2386, 2855, 2982, 3452, 3668, 3764, 3776, 3862, 3934, 4105, 4181, 4708, 4730, 4770, 4849, 4923, 4955, 4971, 5125, 5145, 5417, 5481, 5536, 5666, 5835], [119, 723, 1162, 1177, 1258, 1732, 1758, 2056, 2079, 2334, 2764, 3268, 3633, 3710, 3760, 3790, 3850, 4094, 4635, 4731, 4742, 4771, 4780, 4784, 4809, 4896, 5104, 5354, 5498, 5538, 5636, 5639, 5655, 5674, 5689, 5709, 5737, 5813, 5816, 5842, 5869, 5915, 6050, 6361], [], [], [], [], [], [], [], [3299, 3935, 5836, 6194, 6290, 6372], [11, 18, 23, 24, 36, 50, 59, 71, 86, 123, 125, 157, 177, 188, 197, 199, 200, 226, 248, 258, 260, 261, 274, 306, 308, 314, 318, 341, 343, 350, 355, 364, 365, 369, 376, 379, 380, 381, 388, 394, 395, 397, 400, 401, 408, 411, 412, 413, 414, 415, 417, 422, 434, 437, 440, 441, 455, 458, 459, 468, 472, 478, 505, 512, 514, 517, 537, 540, 541, 551, 556, 557, 561, 576, 591, 605, 606, 613, 615, 618, 624, 627, 646, 665, 686, 692, 698, 700, 702, 712, 720, 747, 749, 753, 762, 764, 773, 797, 803, 809, 816, 820, 823, 826, 830, 843, 852, 856, 860, 863, 865, 868, 871, 875, 880, 890, 901, 908, 942, 947, 962, 973, 975, 977, 983, 1001, 1005, 1015, 1016, 1066, 1076, 1083, 1093, 1094, 1107, 1115, 1116, 1118, 1142, 1183, 1185, 1190, 1207, 1218, 1220, 1221, 1248, 1268, 1298, 1314, 1335, 1336, 1338, 1339, 1349, 1354, 1405, 1414, 1428, 1448, 1451, 1491, 1499, 1500, 1533, 1537, 1600, 1601, 1629, 1631, 1639, 1665, 1669, 1676, 1684, 1719, 1720, 1790, 1807, 1823, 1824, 1843, 1844, 1851, 1852, 1855, 1856, 1876, 1934, 1950, 1990, 2002, 2026, 2034, 2047, 2054, 2059, 2085, 2115, 2117, 2119, 2129, 2139, 2174, 2176, 2193, 2218, 2222, 2231, 2234, 2235, 2265, 2276, 2300, 2311, 2312, 2348, 2349, 2372, 2409, 2413, 2438, 2441, 2452, 2476, 2487, 2498, 2502, 2541, 2552, 2571, 2576, 2579, 2588, 2594, 2596, 2605, 2616, 2622, 2623, 2624, 2632, 2640, 2680, 2698, 2712, 2727, 2732, 2736, 2738, 2745, 2750, 2754, 2758, 2763, 2770, 2771, 2774, 2785, 2788, 2793, 2800, 2823, 2833, 2835, 2847, 2848, 2852, 2857, 2865, 2882, 2887, 2888, 2889, 2899, 2900, 2916, 2921, 2922, 2923, 2924, 2925, 2928, 2929, 2931, 2932, 2935, 2936, 2939, 2940, 2946, 2952, 2954, 2955, 2960, 2961, 2968, 2971, 2981, 2992, 2993, 2998, 3006, 3011, 3013, 3020, 3022, 3034, 3045, 3049, 3051, 3052, 3054, 3056, 3058, 3061, 3063, 3064, 3065, 3066, 3068, 3069, 3070, 3071, 3075, 3076, 3077, 3079, 3081, 3082, 3083, 3087, 3091, 3099, 3100, 3102, 3103, 3105, 3106, 3111, 3112, 3113, 3114, 3116, 3118, 3119, 3120, 3122, 3125, 3127, 3130, 3132, 3133, 3136, 3137, 3139, 3141, 3142, 3150, 3152, 3154, 3158, 3159, 3162, 3163, 3168, 3170, 3176, 3179, 3180, 3181, 3183, 3184, 3185, 3186, 3187, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3199, 3200, 3201, 3203, 3205, 3207, 3217, 3223, 3224, 3225, 3226, 3227, 3228, 3232, 3233, 3234, 3236, 3238, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3253, 3254, 3259, 3262, 3272, 3274, 3283, 3287, 3288, 3290, 3303, 3305, 3307, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3318, 3319, 3320, 3323, 3328, 3331, 3337, 3338, 3346, 3349, 3350, 3353, 3357, 3364, 3365, 3366, 3369, 3370, 3372, 3373, 3375, 3376, 3377, 3379, 3380, 3381, 3382, 3385, 3386, 3387, 3391, 3394, 3397, 3399, 3402, 3403, 3404, 3405, 3409, 3412, 3413, 3414, 3416, 3417, 3421, 3422, 3423, 3430, 3434, 3435, 3437, 3438, 3439, 3440, 3441, 3443, 3444, 3445, 3447, 3448, 3449, 3451, 3454, 3458, 3459, 3461, 3465, 3466, 3469, 3470, 3471, 3473, 3474, 3475, 3479, 3480, 3484, 3488, 3491, 3492, 3495, 3496, 3498, 3501, 3502, 3506, 3507, 3508, 3510, 3511, 3512, 3518, 3519, 3521, 3523, 3528, 3530, 3532, 3534, 3535, 3537, 3538, 3542, 3546, 3547, 3552, 3554, 3555, 3557, 3559, 3561, 3564, 3569, 3572, 3578, 3579, 3581, 3582, 3584, 3587, 3588, 3589, 3590, 3594, 3595, 3597, 3598, 3601, 3602, 3604, 3607, 3608, 3609, 3610, 3611, 3617, 3618, 3619, 3624, 3625, 3626, 3629, 3631, 3635, 3636, 3640, 3644, 3645, 3646, 3648, 3650, 3654, 3658, 3659, 3666, 3669, 3671, 3672, 3675, 3677, 3683, 3684, 3692, 3700, 3701, 3708, 3713, 3715, 3719, 3725, 3728, 3729, 3734, 3735, 3736, 3738, 3740, 3742, 3745, 3747, 3749, 3751, 3753, 3765, 3766, 3768, 3769, 3771, 3781, 3787, 3795, 3806, 3811, 3825, 3840, 3849, 3854, 3856, 3861, 3865, 3868, 3887, 3889, 3890, 3902, 3909, 3910, 3914, 3920, 3939, 3940, 3942, 3943, 3951, 3953, 3955, 3956, 3959, 3960, 3965, 3967, 3968, 3971, 3973, 3975, 3979, 3980, 3981, 3982, 3989, 3992, 3995, 4002, 4003, 4004, 4007, 4008, 4012, 4017, 4023, 4024, 4027, 4031, 4035, 4038, 4043, 4046, 4049, 4050, 4055, 4062, 4068, 4069, 4070, 4071, 4074, 4077, 4081, 4084, 4086, 4087, 4089, 4091, 4092, 4093, 4097, 4098, 4104, 4110, 4114, 4115, 4119, 4130, 4132, 4135, 4137, 4138, 4139, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4151, 4152, 4153, 4154, 4155, 4160, 4164, 4168, 4169, 4170, 4171, 4172, 4174, 4175, 4178, 4194, 4196, 4200, 4205, 4207, 4208, 4210, 4213, 4215, 4218, 4219, 4223, 4226, 4228, 4232, 4235, 4236, 4238, 4243, 4248, 4254, 4256, 4260, 4267, 4269, 4273, 4280, 4282, 4283, 4284, 4285, 4287, 4289, 4290, 4291, 4294, 4295, 4296, 4297, 4299, 4304, 4308, 4309, 4312, 4313, 4319, 4330, 4340, 4345, 4346, 4347, 4353, 4355, 4356, 4358, 4360, 4361, 4362, 4363, 4374, 4376, 4383, 4384, 4385, 4386, 4394, 4395, 4396, 4403, 4404, 4405, 4408, 4409, 4411, 4414, 4415, 4417, 4418, 4423, 4424, 4425, 4428, 4431, 4441, 4442, 4443, 4445, 4448, 4450, 4453, 4456, 4457, 4461, 4462, 4465, 4475, 4476, 4479, 4485, 4489, 4492, 4496, 4497, 4498, 4507, 4508, 4509, 4510, 4513, 4515, 4541, 4549, 4550, 4554, 4555, 4556, 4561, 4564, 4567, 4571, 4579, 4580, 4585, 4592, 4593, 4601, 4605, 4608, 4614, 4616, 4619, 4620, 4634, 4640, 4641, 4645, 4646, 4652, 4653, 4664, 4672, 4682, 4685, 4686, 4687, 4691, 4701, 4702, 4704, 4705, 4706, 4714, 4716, 4720, 4726, 4727, 4738, 4745, 4748, 4750, 4761, 4763, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4775, 4779, 4789, 4790, 4794, 4805, 4818, 4820, 4823, 4827, 4831, 4837, 4838, 4840, 4844, 4846, 4856, 4863, 4864, 4866, 4870, 4872, 4873, 4875, 4885, 4895, 4899, 4903, 4908, 4912, 4924, 4927, 4930, 4931, 4933, 4942, 4943, 4954, 4958, 4966, 4969, 4978, 4980, 4984, 4991, 4995, 5003, 5014, 5023, 5024, 5027, 5042, 5043, 5044, 5049, 5055, 5060, 5068, 5070, 5073, 5075, 5077, 5084, 5089, 5090, 5091, 5093, 5094, 5096, 5105, 5113, 5126, 5127, 5129, 5140, 5141, 5143, 5147, 5153, 5155, 5162, 5164, 5165, 5177, 5178, 5185, 5188, 5198, 5202, 5209, 5214, 5219, 5233, 5242, 5251, 5252, 5253, 5254, 5255, 5258, 5260, 5263, 5266, 5268, 5274, 5289, 5292, 5294, 5295, 5297, 5299, 5300, 5316, 5329, 5330, 5332, 5340, 5341, 5346, 5347, 5348, 5349, 5353, 5355, 5357, 5366, 5371, 5375, 5384, 5389, 5402, 5405, 5406, 5411, 5412, 5415, 5425, 5429, 5434, 5437, 5439, 5450, 5453, 5457, 5466, 5467, 5470, 5478, 5480, 5487, 5489, 5490, 5493, 5504, 5505, 5518, 5519, 5520, 5523, 5524, 5525, 5528, 5532, 5541, 5543, 5544, 5549, 5550, 5551, 5566, 5568, 5571, 5575, 5577, 5584, 5585, 5601, 5603, 5608, 5611, 5613, 5618, 5621, 5624, 5625, 5632, 5641, 5643, 5658, 5664, 5668, 5671, 5678, 5684, 5686, 5687, 5701, 5708, 5711, 5713, 5720, 5721, 5730, 5731, 5734, 5742, 5745, 5748, 5749, 5751, 5752, 5763, 5770, 5772, 5773, 5775, 5776, 5777, 5780, 5784, 5790, 5791, 5796, 5797, 5799, 5800, 5803, 5804, 5809, 5810, 5815, 5818, 5822, 5830, 5833, 5839, 5844, 5847, 5853, 5855, 5856, 5859, 5865, 5868, 5870, 5875, 5878, 5879, 5882, 5886, 5891, 5897, 5904, 5906, 5911, 5914, 5918, 5923, 5926, 5929, 5930, 5931, 5934, 5935, 5945, 5946, 5949, 5952, 5955, 5956, 5957, 5958, 5963, 5967, 5970, 5973, 5974, 5980, 5981, 5983, 5985, 5986, 5990, 5991, 5992, 5993, 5995, 5996, 5997, 6002, 6003, 6004, 6005, 6006, 6007, 6025, 6027, 6029, 6030, 6032, 6038, 6039, 6040, 6043, 6045, 6048, 6049, 6051, 6052, 6055, 6056, 6057, 6059, 6060, 6061, 6062, 6064, 6065, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6075, 6076, 6079, 6082, 6083, 6085, 6086, 6087, 6089, 6090, 6092, 6094, 6095, 6096, 6097, 6099, 6101, 6102, 6104, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6117, 6118, 6119, 6120, 6122, 6123, 6125, 6134, 6136, 6139, 6140, 6141, 6142, 6145, 6148, 6151, 6154, 6156, 6161, 6162, 6163, 6165, 6166, 6168, 6170, 6173, 6175, 6176, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6198, 6199, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6214, 6215, 6216, 6217, 6218, 6219, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6239, 6240, 6245, 6247, 6248, 6249, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6268, 6269, 6270, 6271, 6272, 6273, 6275, 6278, 6281, 6282, 6283, 6285, 6287, 6288, 6289, 6292, 6295, 6296, 6297, 6298, 6299, 6300, 6302, 6303, 6305, 6306, 6308, 6309, 6310, 6311, 6312, 6314, 6316, 6318, 6322, 6323, 6324, 6325, 6327, 6329, 6330, 6331, 6333, 6334, 6335, 6336, 6338, 6341, 6344, 6345, 6352, 6353, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6371, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6386, 6387, 6388, 6390, 6391, 6392, 6393, 6394, 6395, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6405, 6406, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415], [4, 16, 25, 44, 131, 168, 256, 296, 384, 435, 493, 562, 564, 574, 579, 684, 783, 798, 847, 883, 895, 913, 965, 1106, 1188, 1215, 1267, 1291, 1348, 1429, 1483, 1504, 1706, 1736, 1762, 1780, 1783, 1784, 1802, 1867, 1949, 1985, 1994, 2013, 2040, 2093, 2146, 2154, 2168, 2215, 2221, 2253, 2256, 2313, 2352, 2367, 2399, 2405, 2427, 2432, 2495, 2500, 2547, 2555, 2626, 2646, 2649, 2684, 2708, 2731, 2739, 2751, 2828, 2904, 2930, 2977, 3024, 3027, 3031, 3050, 3053, 3059, 3078, 3084, 3085, 3108, 3124, 3148, 3151, 3155, 3167, 3209, 3229, 3267, 3277, 3279, 3282, 3285, 3286, 3295, 3297, 3300, 3325, 3330, 3342, 3355, 3360, 3367, 3371, 3460, 3483, 3497, 3514, 3536, 3550, 3586, 3642, 3676, 5034], [75, 544, 1746, 2242, 3361, 4629, 5499, 5502, 6244], [32, 115, 171, 202, 281, 328, 572, 578, 1000, 1017, 1039, 1053, 1149, 1182, 1213, 1350, 1380, 1558, 1563, 1640, 1731, 1770, 1840, 2171, 2206, 2220, 2263, 2264, 2317, 2378, 2444, 2490, 2505, 2510, 2573, 2669, 2975, 3135, 3140, 3359, 3427, 3637, 3653, 3667, 3978, 5394, 5587, 5619], [1576, 1884, 2095, 3161, 3215, 3280, 3605, 3714, 4186, 4621, 4934, 4999, 5531, 5727, 5735, 5880, 6164, 6252, 6255, 6257, 6291, 6293, 6319, 6320, 6389], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [57.955549577344101, 15.0, 0.0], [115.9110991546882, 15.0, 0.0], [173.8666487320323, 15.0, 0.0], [231.8221983093764, 15.0, 0.0], [289.77774788672048, 15.0, 0.0], [347.73329746406455, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [60.000000000000007, 30.0, 0.0], [90.000000000000014, 30.0, 0.0], [120.00000000000001, 30.0, 0.0], [150.00000000000003, 30.0, 0.0], [180.00000000000003, 30.0, 0.0], [210.00000000000003, 30.0, 0.0], [240.00000000000003, 30.0, 0.0], [270.00000000000006, 30.0, 0.0], [300.00000000000006, 30.0, 0.0], [330.00000000000006, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0], [63.63961030678928, 45.0, 0.0], [84.852813742385706, 45.0, 0.0], [106.06601717798213, 45.0, 0.0], [127.27922061357856, 45.0, 0.0], [148.49242404917499, 45.0, 0.0], [169.70562748477141, 45.0, 0.0], [190.91883092036784, 45.0, 0.0], [212.13203435596427, 45.0, 0.0], [233.34523779156069, 45.0, 0.0], [254.55844122715712, 45.0, 0.0], [275.77164466275354, 45.0, 0.0], [296.98484809834997, 45.0, 0.0], [318.1980515339464, 45.0, 0.0], [339.41125496954282, 45.0, 0.0], [0.0, 60.0, 0.0], [17.320508075688775, 60.0, 0.0], [34.641016151377549, 60.0, 0.0], [51.96152422706632, 60.0, 0.0], [69.282032302755098, 60.0, 0.0], [86.602540378443877, 60.0, 0.0], [103.92304845413265, 60.0, 0.0], [121.24355652982143, 60.0, 0.0], [138.5640646055102, 60.0, 0.0], [155.88457268119896, 60.0, 0.0], [173.20508075688772, 60.0, 0.0], [190.52558883257649, 60.0, 0.0], [207.84609690826525, 60.0, 0.0], [225.16660498395402, 60.0, 0.0], [242.48711305964278, 60.0, 0.0], [259.80762113533154, 60.0, 0.0], [277.12812921102034, 60.0, 0.0], [294.44863728670913, 60.0, 0.0], [311.76914536239792, 60.0, 0.0], [329.08965343808671, 60.0, 0.0], [346.41016151377551, 60.0, 0.0], [0.0, 75.0, 0.0], [15.529142706151246, 75.0, 0.0], [31.058285412302492, 75.0, 0.0], [46.587428118453737, 75.0, 0.0], [62.116570824604985, 75.0, 0.0], [77.645713530756225, 75.0, 0.0], [93.174856236907473, 75.0, 0.0], [108.70399894305872, 75.0, 0.0], [124.23314164920997, 75.0, 0.0], [139.7622843553612, 75.0, 0.0], [155.29142706151245, 75.0, 0.0], [170.8205697676637, 75.0, 0.0], [186.34971247381495, 75.0, 0.0], [201.87885517996619, 75.0, 0.0], [217.40799788611744, 75.0, 0.0], [232.93714059226869, 75.0, 0.0], [248.46628329841994, 75.0, 0.0], [263.99542600457119, 75.0, 0.0], [279.52456871072241, 75.0, 0.0], [295.05371141687363, 75.0, 0.0], [310.58285412302484, 75.0, 0.0], [326.11199682917606, 75.0, 0.0], [341.64113953532728, 75.0, 0.0], [357.1702822414785, 75.0, 0.0], [0.0, 90.0, 0.0], [15.0, 90.0, 0.0], [30.0, 90.0, 0.0], [45.0, 90.0, 0.0], [60.0, 90.0, 0.0], [75.0, 90.0, 0.0], [90.0, 90.0, 0.0], [105.0, 90.0, 0.0], [120.0, 90.0, 0.0], [135.0, 90.0, 0.0], [150.0, 90.0, 0.0], [165.0, 90.0, 0.0], [180.0, 90.0, 0.0], [195.0, 90.0, 0.0], [210.0, 90.0, 0.0], [225.0, 90.0, 0.0], [240.0, 90.0, 0.0], [255.0, 90.0, 0.0], [270.0, 90.0, 0.0], [285.0, 90.0, 0.0], [300.0, 90.0, 0.0], [315.0, 90.0, 0.0], [330.0, 90.0, 0.0], [345.0, 90.0, 0.0]])))

    def test_with_sym_oct_method_P(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'oct1', 'P')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'oct1', 'P')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[3299, 3317, 3935, 5836, 6194, 6290, 6372], [11, 18, 19, 23, 24, 29, 36, 50, 59, 71, 86, 116, 123, 125, 126, 135, 157, 160, 177, 188, 193, 197, 199, 200, 206, 213, 220, 226, 240, 246, 248, 257, 258, 260, 261, 274, 290, 305, 306, 308, 313, 314, 316, 318, 320, 329, 330, 341, 343, 344, 348, 350, 355, 359, 364, 365, 369, 376, 379, 380, 381, 383, 386, 388, 394, 395, 397, 400, 401, 408, 411, 412, 413, 414, 415, 417, 419, 421, 422, 428, 432, 434, 437, 440, 441, 455, 457, 458, 459, 462, 468, 470, 472, 473, 478, 479, 496, 501, 505, 512, 514, 516, 517, 522, 525, 534, 537, 540, 541, 542, 543, 551, 556, 557, 561, 576, 581, 584, 591, 592, 605, 606, 613, 615, 618, 620, 624, 627, 634, 635, 639, 641, 646, 655, 665, 666, 676, 677, 686, 692, 696, 698, 700, 702, 712, 715, 720, 732, 742, 747, 749, 753, 754, 762, 764, 773, 794, 797, 803, 809, 816, 820, 823, 826, 830, 835, 843, 844, 852, 856, 857, 860, 863, 865, 868, 871, 874, 875, 880, 890, 901, 908, 930, 934, 936, 938, 942, 947, 962, 973, 975, 977, 983, 990, 994, 996, 997, 1001, 1005, 1015, 1016, 1044, 1066, 1068, 1076, 1083, 1093, 1094, 1107, 1115, 1116, 1117, 1118, 1120, 1122, 1131, 1132, 1142, 1160, 1183, 1185, 1190, 1207, 1218, 1220, 1221, 1230, 1244, 1248, 1249, 1268, 1271, 1298, 1306, 1307, 1314, 1327, 1335, 1336, 1337, 1338, 1339, 1349, 1354, 1376, 1396, 1405, 1413, 1414, 1416, 1428, 1434, 1448, 1451, 1454, 1463, 1479, 1484, 1487, 1491, 1499, 1500, 1505, 1507, 1510, 1532, 1533, 1537, 1576, 1581, 1588, 1595, 1600, 1601, 1629, 1631, 1632, 1633, 1639, 1664, 1665, 1666, 1669, 1671, 1676, 1680, 1684, 1719, 1720, 1734, 1742, 1790, 1798, 1803, 1807, 1812, 1823, 1824, 1835, 1843, 1844, 1847, 1851, 1852, 1855, 1856, 1866, 1876, 1877, 1881, 1907, 1927, 1934, 1950, 1982, 1990, 2002, 2022, 2026, 2032, 2034, 2044, 2047, 2054, 2059, 2060, 2081, 2085, 2092, 2095, 2115, 2117, 2119, 2127, 2129, 2139, 2148, 2159, 2164, 2170, 2174, 2176, 2193, 2207, 2211, 2218, 2222, 2229, 2231, 2234, 2235, 2237, 2265, 2276, 2280, 2289, 2300, 2308, 2311, 2312, 2314, 2323, 2346, 2348, 2349, 2359, 2360, 2372, 2381, 2391, 2409, 2413, 2438, 2439, 2441, 2452, 2456, 2476, 2487, 2496, 2498, 2502, 2514, 2541, 2548, 2549, 2552, 2565, 2566, 2567, 2571, 2576, 2579, 2582, 2588, 2589, 2594, 2596, 2597, 2605, 2616, 2618, 2622, 2623, 2624, 2632, 2634, 2635, 2640, 2648, 2661, 2680, 2687, 2694, 2695, 2698, 2699, 2706, 2712, 2714, 2719, 2727, 2732, 2736, 2738, 2745, 2750, 2752, 2754, 2758, 2759, 2763, 2767, 2770, 2771, 2774, 2777, 2782, 2785, 2788, 2792, 2793, 2800, 2805, 2813, 2823, 2825, 2832, 2833, 2835, 2836, 2844, 2847, 2848, 2852, 2857, 2859, 2862, 2863, 2865, 2871, 2882, 2887, 2888, 2889, 2899, 2900, 2910, 2911, 2916, 2921, 2922, 2923, 2924, 2925, 2926, 2928, 2929, 2931, 2932, 2935, 2936, 2939, 2940, 2946, 2952, 2954, 2955, 2959, 2960, 2961, 2965, 2967, 2968, 2971, 2981, 2992, 2993, 2998, 3006, 3008, 3011, 3013, 3016, 3019, 3020, 3022, 3028, 3032, 3034, 3035, 3037, 3045, 3049, 3051, 3052, 3054, 3056, 3058, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3075, 3076, 3077, 3079, 3081, 3082, 3083, 3087, 3088, 3091, 3094, 3095, 3097, 3099, 3100, 3102, 3103, 3105, 3106, 3111, 3112, 3113, 3114, 3116, 3118, 3119, 3120, 3121, 3122, 3125, 3126, 3127, 3130, 3132, 3133, 3136, 3137, 3138, 3139, 3141, 3142, 3147, 3150, 3152, 3154, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3168, 3170, 3172, 3173, 3175, 3176, 3179, 3180, 3181, 3183, 3184, 3185, 3186, 3187, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3199, 3200, 3201, 3203, 3204, 3205, 3206, 3207, 3210, 3215, 3217, 3218, 3223, 3224, 3225, 3226, 3227, 3228, 3232, 3233, 3234, 3236, 3238, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3250, 3253, 3254, 3257, 3259, 3262, 3272, 3274, 3280, 3283, 3287, 3288, 3290, 3303, 3305, 3307, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3318, 3319, 3320, 3322, 3323, 3328, 3331, 3336, 3337, 3338, 3339, 3346, 3349, 3350, 3353, 3357, 3364, 3365, 3366, 3369, 3370, 3372, 3373, 3375, 3376, 3377, 3379, 3380, 3381, 3382, 3384, 3385, 3386, 3387, 3388, 3391, 3394, 3396, 3397, 3399, 3401, 3402, 3403, 3404, 3405, 3406, 3409, 3412, 3413, 3414, 3416, 3417, 3418, 3421, 3422, 3423, 3430, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3443, 3444, 3445, 3447, 3448, 3449, 3451, 3454, 3457, 3459, 3461, 3464, 3465, 3466, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3479, 3480, 3481, 3484, 3488, 3491, 3492, 3494, 3495, 3496, 3498, 3501, 3502, 3506, 3507, 3508, 3510, 3511, 3512, 3518, 3519, 3521, 3523, 3528, 3530, 3531, 3532, 3534, 3535, 3537, 3538, 3542, 3546, 3547, 3551, 3552, 3554, 3555, 3557, 3559, 3560, 3561, 3564, 3569, 3572, 3578, 3579, 3581, 3582, 3584, 3587, 3588, 3589, 3590, 3591, 3594, 3595, 3597, 3598, 3601, 3602, 3604, 3607, 3608, 3609, 3610, 3611, 3617, 3618, 3619, 3624, 3625, 3626, 3629, 3631, 3635, 3636, 3640, 3644, 3645, 3646, 3648, 3650, 3654, 3658, 3659, 3660, 3666, 3669, 3671, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3692, 3694, 3698, 3700, 3701, 3703, 3705, 3706, 3708, 3709, 3713, 3714, 3715, 3717, 3719, 3720, 3722, 3723, 3724, 3725, 3727, 3728, 3729, 3733, 3734, 3735, 3736, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3747, 3749, 3750, 3751, 3752, 3753, 3755, 3756, 3759, 3763, 3765, 3766, 3768, 3769, 3771, 3775, 3777, 3781, 3787, 3789, 3793, 3795, 3797, 3798, 3801, 3802, 3805, 3806, 3807, 3809, 3810, 3811, 3812, 3814, 3815, 3817, 3821, 3822, 3825, 3826, 3827, 3828, 3831, 3832, 3833, 3838, 3840, 3842, 3844, 3848, 3849, 3851, 3852, 3854, 3855, 3856, 3858, 3859, 3860, 3861, 3863, 3864, 3865, 3866, 3867, 3868, 3870, 3873, 3875, 3876, 3877, 3879, 3881, 3883, 3887, 3889, 3890, 3891, 3892, 3893, 3896, 3897, 3902, 3903, 3906, 3907, 3909, 3910, 3911, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3923, 3924, 3925, 3926, 3927, 3929, 3930, 3931, 3939, 3940, 3941, 3942, 3943, 3946, 3948, 3949, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3959, 3960, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3975, 3976, 3977, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3999, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4011, 4012, 4013, 4014, 4017, 4021, 4022, 4023, 4024, 4025, 4027, 4028, 4029, 4030, 4031, 4032, 4034, 4035, 4037, 4038, 4040, 4041, 4043, 4044, 4046, 4047, 4048, 4049, 4050, 4054, 4055, 4056, 4057, 4058, 4059, 4061, 4062, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4074, 4076, 4077, 4078, 4079, 4080, 4081, 4083, 4084, 4085, 4086, 4087, 4089, 4090, 4091, 4092, 4093, 4095, 4097, 4098, 4100, 4101, 4102, 4103, 4104, 4106, 4110, 4112, 4113, 4114, 4115, 4116, 4117, 4119, 4120, 4122, 4123, 4124, 4125, 4126, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4162, 4163, 4164, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4174, 4175, 4176, 4177, 4178, 4179, 4183, 4185, 4186, 4187, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4199, 4200, 4201, 4203, 4204, 4205, 4207, 4208, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4218, 4219, 4220, 4221, 4222, 4223, 4226, 4227, 4228, 4229, 4231, 4232, 4233, 4235, 4236, 4237, 4238, 4240, 4242, 4243, 4244, 4247, 4248, 4249, 4250, 4251, 4252, 4254, 4255, 4256, 4257, 4260, 4262, 4263, 4264, 4266, 4267, 4268, 4269, 4272, 4273, 4275, 4276, 4277, 4280, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4304, 4305, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4318, 4319, 4320, 4321, 4322, 4325, 4326, 4327, 4328, 4330, 4332, 4340, 4341, 4342, 4343, 4345, 4346, 4347, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4369, 4370, 4371, 4373, 4374, 4376, 4377, 4378, 4379, 4380, 4381, 4383, 4384, 4385, 4386, 4387, 4388, 4391, 4392, 4393, 4394, 4395, 4396, 4398, 4399, 4400, 4402, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4428, 4431, 4433, 4434, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4447, 4448, 4450, 4452, 4453, 4455, 4456, 4457, 4460, 4461, 4462, 4463, 4465, 4466, 4467, 4468, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4479, 4480, 4481, 4483, 4485, 4486, 4487, 4488, 4489, 4490, 4492, 4495, 4496, 4497, 4498, 4499, 4500, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4513, 4514, 4515, 4518, 4519, 4521, 4522, 4523, 4525, 4527, 4528, 4529, 4533, 4534, 4535, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4558, 4561, 4562, 4563, 4564, 4567, 4568, 4569, 4570, 4571, 4573, 4574, 4575, 4579, 4580, 4584, 4585, 4586, 4588, 4590, 4591, 4592, 4593, 4594, 4597, 4599, 4600, 4601, 4603, 4604, 4605, 4606, 4607, 4608, 4611, 4612, 4613, 4614, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4624, 4625, 4626, 4627, 4628, 4630, 4632, 4633, 4634, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4650, 4651, 4652, 4653, 4654, 4655, 4661, 4664, 4666, 4668, 4669, 4670, 4671, 4672, 4675, 4680, 4681, 4682, 4683, 4685, 4686, 4687, 4688, 4691, 4693, 4694, 4699, 4701, 4702, 4703, 4704, 4705, 4706, 4710, 4711, 4713, 4714, 4716, 4717, 4719, 4720, 4721, 4722, 4726, 4727, 4729, 4733, 4736, 4738, 4739, 4745, 4746, 4748, 4750, 4753, 4754, 4755, 4759, 4760, 4761, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4774, 4775, 4779, 4785, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4799, 4803, 4805, 4807, 4808, 4811, 4814, 4815, 4818, 4820, 4823, 4824, 4825, 4827, 4829, 4830, 4831, 4832, 4833, 4835, 4837, 4838, 4839, 4840, 4843, 4844, 4846, 4848, 4850, 4851, 4856, 4857, 4858, 4859, 4860, 4863, 4864, 4866, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4877, 4881, 4882, 4883, 4885, 4886, 4887, 4888, 4889, 4895, 4899, 4900, 4903, 4904, 4905, 4908, 4909, 4912, 4913, 4914, 4915, 4916, 4920, 4924, 4925, 4926, 4927, 4928, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4938, 4941, 4942, 4943, 4946, 4947, 4948, 4949, 4950, 4951, 4954, 4957, 4958, 4959, 4960, 4962, 4966, 4967, 4968, 4969, 4970, 4972, 4973, 4977, 4978, 4980, 4982, 4984, 4985, 4986, 4987, 4988, 4989, 4991, 4992, 4995, 4997, 4998, 4999, 5002, 5003, 5004, 5011, 5012, 5014, 5016, 5017, 5018, 5019, 5022, 5023, 5024, 5025, 5026, 5027, 5030, 5031, 5033, 5036, 5038, 5042, 5043, 5044, 5049, 5053, 5055, 5057, 5060, 5062, 5064, 5065, 5066, 5068, 5070, 5073, 5075, 5076, 5077, 5082, 5084, 5085, 5086, 5087, 5089, 5090, 5091, 5092, 5093, 5094, 5096, 5097, 5100, 5105, 5109, 5112, 5113, 5119, 5120, 5121, 5126, 5127, 5129, 5131, 5132, 5133, 5135, 5139, 5140, 5141, 5142, 5143, 5147, 5148, 5149, 5153, 5155, 5156, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5173, 5174, 5176, 5177, 5178, 5179, 5180, 5181, 5185, 5188, 5189, 5191, 5193, 5195, 5196, 5198, 5201, 5202, 5206, 5207, 5208, 5209, 5211, 5212, 5214, 5215, 5216, 5217, 5219, 5220, 5221, 5223, 5227, 5229, 5231, 5232, 5233, 5234, 5239, 5240, 5241, 5242, 5243, 5247, 5248, 5249, 5251, 5252, 5253, 5254, 5255, 5258, 5259, 5260, 5263, 5265, 5266, 5268, 5271, 5273, 5274, 5278, 5279, 5280, 5281, 5285, 5287, 5289, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5304, 5307, 5308, 5312, 5315, 5316, 5317, 5319, 5320, 5322, 5329, 5330, 5332, 5333, 5335, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5353, 5355, 5356, 5357, 5360, 5362, 5365, 5366, 5367, 5371, 5373, 5375, 5376, 5377, 5378, 5380, 5381, 5384, 5386, 5389, 5390, 5392, 5395, 5397, 5400, 5402, 5405, 5406, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5418, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5434, 5435, 5437, 5438, 5439, 5440, 5441, 5443, 5445, 5448, 5450, 5451, 5453, 5454, 5457, 5458, 5461, 5463, 5465, 5466, 5467, 5468, 5469, 5470, 5472, 5474, 5475, 5477, 5478, 5480, 5484, 5486, 5487, 5489, 5490, 5491, 5492, 5493, 5497, 5504, 5505, 5506, 5509, 5514, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5528, 5531, 5532, 5533, 5535, 5537, 5539, 5541, 5543, 5544, 5545, 5547, 5548, 5549, 5550, 5551, 5553, 5554, 5555, 5556, 5557, 5559, 5560, 5564, 5565, 5566, 5567, 5568, 5569, 5571, 5572, 5573, 5575, 5577, 5581, 5582, 5583, 5584, 5585, 5589, 5591, 5593, 5595, 5598, 5599, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5610, 5611, 5613, 5615, 5616, 5618, 5620, 5621, 5622, 5624, 5625, 5627, 5628, 5630, 5631, 5632, 5635, 5637, 5641, 5643, 5646, 5647, 5651, 5653, 5656, 5657, 5658, 5660, 5661, 5663, 5664, 5668, 5670, 5671, 5676, 5678, 5680, 5681, 5683, 5684, 5686, 5687, 5688, 5691, 5696, 5698, 5699, 5701, 5703, 5704, 5706, 5707, 5708, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5720, 5721, 5724, 5725, 5727, 5728, 5729, 5730, 5731, 5734, 5735, 5736, 5738, 5739, 5741, 5742, 5744, 5745, 5748, 5749, 5750, 5751, 5752, 5755, 5759, 5760, 5763, 5764, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5780, 5781, 5782, 5784, 5787, 5790, 5791, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5809, 5810, 5811, 5812, 5815, 5818, 5819, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5833, 5834, 5837, 5838, 5839, 5842, 5844, 5845, 5846, 5847, 5850, 5852, 5853, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5865, 5866, 5867, 5868, 5870, 5873, 5874, 5875, 5877, 5878, 5879, 5880, 5881, 5882, 5885, 5886, 5887, 5889, 5890, 5891, 5893, 5894, 5895, 5896, 5897, 5900, 5902, 5904, 5906, 5908, 5909, 5910, 5911, 5913, 5914, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5926, 5928, 5929, 5930, 5931, 5934, 5935, 5936, 5937, 5938, 5939, 5941, 5942, 5943, 5945, 5946, 5947, 5949, 5952, 5954, 5955, 5956, 5957, 5958, 5959, 5961, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5973, 5974, 5975, 5977, 5979, 5980, 5981, 5983, 5984, 5985, 5986, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6019, 6021, 6022, 6023, 6025, 6026, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6092, 6093, 6094, 6095, 6096, 6097, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6130, 6132, 6133, 6134, 6136, 6137, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6151, 6152, 6153, 6154, 6156, 6158, 6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6245, 6247, 6248, 6249, 6251, 6252, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6281, 6282, 6283, 6285, 6286, 6287, 6288, 6289, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6371, 6373, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419], [1, 4, 13, 16, 25, 32, 44, 51, 52, 54, 88, 92, 99, 115, 144, 168, 170, 171, 179, 181, 202, 208, 212, 215, 218, 227, 230, 253, 259, 263, 267, 269, 270, 277, 279, 281, 328, 384, 435, 481, 493, 564, 572, 574, 578, 579, 594, 636, 640, 647, 654, 684, 710, 745, 783, 787, 798, 847, 883, 895, 913, 954, 965, 982, 1000, 1004, 1008, 1017, 1032, 1036, 1037, 1039, 1050, 1053, 1075, 1095, 1099, 1125, 1140, 1149, 1161, 1164, 1165, 1182, 1194, 1213, 1215, 1219, 1225, 1246, 1254, 1267, 1282, 1290, 1291, 1320, 1330, 1347, 1348, 1350, 1361, 1380, 1384, 1388, 1390, 1394, 1422, 1423, 1471, 1473, 1483, 1504, 1520, 1547, 1558, 1563, 1587, 1591, 1608, 1637, 1640, 1652, 1667, 1689, 1699, 1722, 1731, 1736, 1752, 1756, 1759, 1770, 1780, 1783, 1784, 1794, 1795, 1796, 1800, 1802, 1829, 1831, 1840, 1865, 1867, 1872, 1878, 1886, 1899, 1938, 1949, 1985, 1989, 1994, 2013, 2040, 2041, 2066, 2068, 2069, 2083, 2093, 2105, 2110, 2140, 2143, 2146, 2153, 2154, 2168, 2171, 2205, 2206, 2212, 2215, 2221, 2225, 2245, 2253, 2257, 2262, 2263, 2264, 2282, 2305, 2313, 2317, 2332, 2367, 2378, 2399, 2405, 2406, 2407, 2421, 2434, 2444, 2475, 2484, 2490, 2495, 2500, 2505, 2544, 2547, 2555, 2564, 2573, 2590, 2626, 2646, 2649, 2669, 2684, 2708, 2731, 2751, 2860, 2880, 2904, 2909, 2930, 2975, 2977, 3001, 3024, 3027, 3031, 3050, 3053, 3059, 3078, 3084, 3085, 3108, 3124, 3135, 3140, 3148, 3151, 3155, 3167, 3178, 3209, 3229, 3277, 3282, 3285, 3286, 3295, 3300, 3325, 3330, 3342, 3355, 3359, 3360, 3371, 3427, 3460, 3497, 3514, 3550, 3576, 3586, 3637, 3642, 3653, 3667, 3904, 3978, 4357, 4484, 4530, 4532, 4560, 4631, 4802, 4804, 4813, 4852, 4953, 4990, 5005, 5034, 5102, 5228, 5276, 5394, 5431, 5587, 5619, 5633, 5951, 6149, 6328], [2, 3, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 20, 21, 22, 26, 27, 28, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 53, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 173, 174, 176, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 198, 201, 203, 204, 205, 207, 209, 210, 211, 214, 216, 217, 219, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 254, 256, 262, 265, 268, 271, 272, 273, 275, 276, 278, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 307, 309, 310, 311, 315, 317, 319, 321, 322, 323, 324, 325, 326, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 345, 346, 347, 349, 351, 353, 354, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 370, 372, 373, 374, 375, 377, 378, 382, 385, 387, 389, 390, 391, 392, 393, 396, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 416, 418, 420, 423, 424, 425, 426, 427, 429, 430, 431, 433, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 460, 461, 463, 464, 465, 466, 467, 469, 471, 474, 475, 476, 477, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 513, 515, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 531, 532, 533, 535, 536, 538, 539, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 575, 577, 580, 582, 583, 585, 586, 587, 588, 589, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 614, 616, 617, 619, 621, 622, 623, 625, 626, 628, 629, 630, 631, 632, 637, 638, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 690, 691, 694, 695, 697, 699, 701, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 748, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 790, 791, 792, 793, 795, 796, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 824, 825, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 842, 845, 848, 849, 850, 851, 853, 854, 855, 858, 859, 861, 862, 864, 866, 867, 869, 870, 872, 873, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 935, 937, 939, 940, 941, 943, 945, 946, 948, 950, 951, 952, 953, 955, 957, 959, 961, 963, 964, 966, 967, 968, 969, 970, 971, 972, 976, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 998, 999, 1002, 1003, 1007, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1112, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1134, 1135, 1137, 1138, 1139, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1158, 1159, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1186, 1187, 1188, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1284, 1285, 1286, 1287, 1288, 1289, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1308, 1310, 1311, 1312, 1313, 1315, 1316, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1340, 1341, 1342, 1343, 1345, 1346, 1351, 1352, 1353, 1356, 1357, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1377, 1379, 1382, 1383, 1385, 1386, 1387, 1389, 1391, 1392, 1393, 1395, 1397, 1398, 1399, 1401, 1402, 1403, 1404, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1415, 1418, 1419, 1420, 1421, 1425, 1426, 1427, 1429, 1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1449, 1450, 1452, 1453, 1455, 1456, 1457, 1458, 1459, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1472, 1474, 1476, 1477, 1478, 1480, 1481, 1482, 1485, 1486, 1488, 1489, 1490, 1493, 1494, 1495, 1496, 1497, 1501, 1502, 1503, 1508, 1509, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1521, 1522, 1523, 1524, 1525, 1527, 1528, 1529, 1530, 1531, 1534, 1535, 1536, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1548, 1549, 1550, 1552, 1554, 1556, 1557, 1559, 1560, 1561, 1562, 1567, 1568, 1570, 1571, 1572, 1573, 1574, 1575, 1578, 1579, 1582, 1584, 1585, 1586, 1589, 1590, 1592, 1593, 1594, 1596, 1597, 1603, 1604, 1605, 1606, 1607, 1610, 1612, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1628, 1630, 1634, 1635, 1636, 1638, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1663, 1670, 1673, 1674, 1675, 1677, 1678, 1679, 1681, 1682, 1683, 1685, 1686, 1687, 1688, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1701, 1703, 1704, 1705, 1706, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1721, 1723, 1724, 1725, 1726, 1727, 1728, 1730, 1732, 1733, 1737, 1739, 1741, 1743, 1744, 1745, 1747, 1748, 1749, 1750, 1751, 1753, 1754, 1755, 1758, 1760, 1761, 1762, 1764, 1765, 1767, 1768, 1769, 1771, 1772, 1774, 1775, 1776, 1777, 1778, 1779, 1781, 1782, 1785, 1786, 1787, 1788, 1789, 1791, 1792, 1793, 1797, 1799, 1801, 1804, 1805, 1806, 1808, 1809, 1810, 1811, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1825, 1826, 1827, 1828, 1830, 1832, 1833, 1834, 1836, 1837, 1838, 1841, 1842, 1845, 1848, 1849, 1850, 1853, 1854, 1857, 1858, 1859, 1860, 1863, 1864, 1868, 1869, 1870, 1871, 1874, 1880, 1882, 1883, 1884, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1895, 1896, 1897, 1898, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1908, 1909, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1929, 1930, 1932, 1933, 1935, 1936, 1937, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1952, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1983, 1984, 1986, 1987, 1988, 1991, 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2024, 2025, 2028, 2030, 2031, 2035, 2036, 2038, 2039, 2042, 2045, 2046, 2048, 2049, 2050, 2051, 2052, 2053, 2055, 2056, 2057, 2058, 2062, 2063, 2064, 2065, 2067, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2082, 2084, 2086, 2087, 2088, 2090, 2091, 2094, 2096, 2097, 2098, 2099, 2102, 2103, 2104, 2106, 2108, 2109, 2111, 2112, 2113, 2114, 2116, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2128, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2141, 2144, 2145, 2147, 2149, 2151, 2152, 2155, 2156, 2157, 2158, 2160, 2161, 2162, 2163, 2165, 2166, 2167, 2169, 2173, 2175, 2177, 2178, 2179, 2180, 2182, 2183, 2184, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2195, 2196, 2198, 2199, 2201, 2202, 2203, 2204, 2208, 2209, 2210, 2213, 2214, 2216, 2217, 2219, 2220, 2223, 2224, 2226, 2227, 2228, 2233, 2236, 2238, 2239, 2240, 2241, 2244, 2246, 2247, 2251, 2252, 2255, 2256, 2258, 2259, 2260, 2261, 2266, 2267, 2268, 2269, 2270, 2271, 2273, 2274, 2275, 2277, 2278, 2279, 2281, 2283, 2284, 2285, 2286, 2287, 2288, 2291, 2292, 2293, 2294, 2295, 2296, 2298, 2299, 2301, 2302, 2303, 2304, 2306, 2309, 2310, 2315, 2316, 2318, 2319, 2320, 2321, 2322, 2324, 2325, 2326, 2328, 2329, 2331, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2344, 2345, 2347, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2361, 2362, 2363, 2364, 2365, 2366, 2368, 2369, 2370, 2371, 2373, 2375, 2376, 2377, 2379, 2382, 2383, 2384, 2385, 2387, 2388, 2389, 2390, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2400, 2403, 2408, 2410, 2411, 2412, 2415, 2416, 2417, 2418, 2419, 2420, 2422, 2423, 2424, 2425, 2426, 2427, 2429, 2430, 2431, 2432, 2433, 2435, 2436, 2437, 2440, 2442, 2445, 2446, 2449, 2450, 2451, 2453, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2473, 2474, 2477, 2479, 2481, 2482, 2483, 2485, 2486, 2488, 2489, 2491, 2492, 2493, 2494, 2497, 2499, 2501, 2503, 2504, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2515, 2516, 2517, 2519, 2521, 2523, 2524, 2525, 2526, 2527, 2529, 2530, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2542, 2543, 2545, 2546, 2550, 2551, 2553, 2554, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2568, 2569, 2570, 2572, 2574, 2575, 2577, 2578, 2580, 2581, 2583, 2584, 2585, 2586, 2587, 2591, 2592, 2593, 2595, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2617, 2619, 2620, 2621, 2625, 2627, 2628, 2629, 2630, 2631, 2633, 2636, 2637, 2639, 2641, 2642, 2643, 2644, 2645, 2647, 2650, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2662, 2663, 2664, 2665, 2666, 2667, 2670, 2671, 2673, 2674, 2676, 2678, 2679, 2681, 2683, 2685, 2686, 2690, 2691, 2692, 2693, 2696, 2697, 2700, 2701, 2702, 2703, 2704, 2705, 2707, 2709, 2710, 2711, 2713, 2715, 2716, 2717, 2718, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2728, 2729, 2730, 2733, 2734, 2735, 2737, 2739, 2740, 2741, 2742, 2743, 2744, 2746, 2747, 2748, 2749, 2753, 2755, 2756, 2757, 2760, 2762, 2764, 2765, 2766, 2769, 2772, 2773, 2775, 2776, 2778, 2779, 2780, 2781, 2783, 2784, 2786, 2787, 2789, 2790, 2791, 2794, 2795, 2796, 2797, 2798, 2799, 2801, 2802, 2803, 2804, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2814, 2815, 2817, 2818, 2819, 2820, 2821, 2822, 2824, 2826, 2827, 2828, 2829, 2830, 2831, 2834, 2837, 2838, 2839, 2840, 2841, 2842, 2845, 2846, 2849, 2850, 2851, 2853, 2854, 2856, 2858, 2861, 2864, 2866, 2867, 2868, 2869, 2870, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2881, 2883, 2884, 2885, 2886, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2901, 2902, 2903, 2905, 2906, 2907, 2908, 2912, 2913, 2914, 2915, 2917, 2918, 2919, 2920, 2927, 2933, 2934, 2937, 2938, 2941, 2942, 2943, 2944, 2945, 2947, 2948, 2949, 2950, 2951, 2953, 2956, 2957, 2958, 2962, 2963, 2964, 2966, 2969, 2970, 2972, 2973, 2974, 2976, 2978, 2979, 2980, 2983, 2984, 2985, 2986, 2987, 2989, 2990, 2991, 2994, 2995, 2996, 2997, 2999, 3000, 3002, 3003, 3004, 3005, 3007, 3009, 3010, 3012, 3014, 3015, 3017, 3018, 3021, 3023, 3025, 3026, 3029, 3030, 3033, 3036, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3046, 3047, 3048, 3055, 3057, 3060, 3072, 3073, 3074, 3080, 3086, 3089, 3090, 3092, 3093, 3096, 3098, 3101, 3104, 3107, 3109, 3110, 3115, 3117, 3123, 3128, 3129, 3131, 3134, 3143, 3144, 3145, 3146, 3149, 3153, 3156, 3157, 3165, 3166, 3169, 3171, 3174, 3177, 3182, 3188, 3197, 3198, 3202, 3208, 3211, 3212, 3213, 3214, 3216, 3219, 3220, 3221, 3222, 3230, 3231, 3235, 3237, 3249, 3251, 3255, 3256, 3260, 3261, 3263, 3264, 3265, 3267, 3268, 3269, 3270, 3271, 3273, 3275, 3276, 3278, 3279, 3281, 3284, 3289, 3291, 3292, 3293, 3294, 3296, 3297, 3298, 3302, 3304, 3306, 3308, 3316, 3321, 3324, 3327, 3329, 3332, 3333, 3334, 3335, 3341, 3343, 3344, 3345, 3348, 3351, 3352, 3354, 3356, 3358, 3362, 3363, 3367, 3368, 3374, 3378, 3383, 3389, 3390, 3392, 3393, 3395, 3398, 3400, 3407, 3411, 3415, 3419, 3420, 3426, 3428, 3429, 3431, 3432, 3433, 3442, 3446, 3450, 3453, 3455, 3456, 3458, 3462, 3463, 3467, 3468, 3476, 3477, 3478, 3482, 3483, 3485, 3486, 3487, 3490, 3499, 3500, 3503, 3504, 3505, 3509, 3513, 3515, 3516, 3517, 3520, 3522, 3524, 3525, 3526, 3527, 3533, 3536, 3540, 3541, 3543, 3544, 3545, 3548, 3549, 3553, 3556, 3558, 3562, 3565, 3566, 3567, 3568, 3570, 3571, 3573, 3574, 3575, 3577, 3580, 3583, 3585, 3592, 3593, 3596, 3599, 3600, 3603, 3605, 3606, 3612, 3613, 3614, 3615, 3616, 3620, 3621, 3622, 3623, 3627, 3628, 3630, 3632, 3633, 3634, 3638, 3639, 3641, 3647, 3649, 3651, 3652, 3655, 3656, 3657, 3661, 3662, 3663, 3664, 3665, 3670, 3673, 3674, 3676, 3680, 3681, 3682, 3686, 3687, 3690, 3691, 3693, 3695, 3697, 3699, 3702, 3707, 3710, 3711, 3712, 3718, 3721, 3726, 3730, 3731, 3732, 3737, 3746, 3748, 3754, 3757, 3760, 3761, 3762, 3767, 3770, 3772, 3773, 3774, 3778, 3779, 3780, 3782, 3783, 3784, 3785, 3786, 3788, 3790, 3794, 3796, 3799, 3803, 3804, 3808, 3813, 3816, 3818, 3819, 3820, 3823, 3829, 3830, 3834, 3835, 3836, 3837, 3839, 3841, 3843, 3845, 3846, 3847, 3850, 3857, 3869, 3871, 3872, 3874, 3878, 3880, 3882, 3884, 3885, 3886, 3888, 3894, 3895, 3898, 3899, 3900, 3901, 3905, 3908, 3912, 3913, 3922, 3928, 3932, 3933, 3936, 3937, 3938, 3944, 3945, 3947, 3950, 3958, 3961, 3974, 3990, 3998, 4000, 4001, 4009, 4010, 4015, 4016, 4018, 4019, 4026, 4033, 4036, 4042, 4051, 4052, 4053, 4060, 4063, 4064, 4073, 4075, 4082, 4088, 4094, 4096, 4099, 4107, 4108, 4109, 4111, 4118, 4121, 4127, 4161, 4165, 4173, 4180, 4182, 4184, 4188, 4198, 4202, 4206, 4209, 4217, 4224, 4225, 4230, 4234, 4239, 4241, 4245, 4246, 4258, 4259, 4261, 4265, 4270, 4274, 4278, 4279, 4281, 4293, 4303, 4306, 4317, 4323, 4324, 4329, 4331, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4344, 4348, 4366, 4367, 4368, 4372, 4375, 4382, 4389, 4390, 4397, 4401, 4407, 4416, 4426, 4427, 4429, 4430, 4432, 4435, 4446, 4449, 4451, 4454, 4458, 4459, 4464, 4469, 4477, 4478, 4482, 4491, 4493, 4494, 4501, 4511, 4512, 4516, 4517, 4520, 4524, 4526, 4531, 4536, 4537, 4547, 4548, 4557, 4559, 4565, 4572, 4576, 4577, 4582, 4583, 4587, 4589, 4595, 4596, 4598, 4602, 4609, 4610, 4615, 4623, 4635, 4636, 4637, 4639, 4648, 4656, 4657, 4658, 4659, 4660, 4662, 4663, 4665, 4667, 4673, 4674, 4676, 4677, 4678, 4684, 4692, 4695, 4696, 4697, 4698, 4700, 4708, 4712, 4715, 4723, 4724, 4725, 4728, 4731, 4732, 4734, 4737, 4740, 4741, 4742, 4743, 4744, 4747, 4749, 4752, 4756, 4757, 4758, 4762, 4771, 4776, 4777, 4778, 4780, 4781, 4782, 4783, 4784, 4786, 4787, 4788, 4800, 4801, 4806, 4809, 4810, 4812, 4816, 4817, 4819, 4821, 4822, 4826, 4828, 4834, 4836, 4841, 4842, 4845, 4847, 4853, 4854, 4855, 4861, 4862, 4865, 4867, 4868, 4876, 4878, 4879, 4880, 4884, 4890, 4891, 4892, 4893, 4894, 4896, 4897, 4898, 4901, 4902, 4906, 4907, 4910, 4911, 4917, 4918, 4919, 4921, 4922, 4923, 4929, 4937, 4939, 4944, 4945, 4952, 4956, 4961, 4963, 4964, 4965, 4974, 4975, 4976, 4979, 4981, 4983, 4993, 4994, 4996, 5000, 5001, 5006, 5007, 5008, 5009, 5010, 5013, 5015, 5020, 5021, 5028, 5032, 5035, 5037, 5039, 5040, 5041, 5045, 5046, 5047, 5048, 5050, 5051, 5052, 5054, 5056, 5059, 5061, 5063, 5067, 5069, 5071, 5072, 5078, 5079, 5080, 5081, 5083, 5088, 5095, 5099, 5101, 5103, 5104, 5106, 5107, 5108, 5111, 5114, 5115, 5116, 5117, 5118, 5122, 5123, 5124, 5125, 5128, 5130, 5136, 5137, 5138, 5144, 5146, 5150, 5151, 5152, 5154, 5157, 5169, 5170, 5171, 5172, 5175, 5182, 5183, 5184, 5186, 5187, 5190, 5192, 5194, 5200, 5203, 5204, 5205, 5210, 5213, 5218, 5222, 5224, 5225, 5226, 5230, 5235, 5236, 5237, 5238, 5244, 5245, 5246, 5250, 5256, 5257, 5261, 5262, 5270, 5272, 5282, 5283, 5284, 5286, 5288, 5290, 5291, 5301, 5303, 5305, 5306, 5309, 5310, 5311, 5313, 5314, 5318, 5321, 5323, 5324, 5325, 5326, 5327, 5328, 5331, 5334, 5336, 5350, 5352, 5354, 5358, 5359, 5361, 5363, 5364, 5368, 5369, 5370, 5372, 5374, 5382, 5383, 5387, 5388, 5391, 5393, 5396, 5398, 5399, 5401, 5403, 5404, 5407, 5417, 5419, 5420, 5421, 5432, 5433, 5436, 5442, 5444, 5446, 5447, 5449, 5452, 5459, 5460, 5462, 5464, 5471, 5473, 5476, 5479, 5482, 5485, 5488, 5494, 5495, 5498, 5500, 5501, 5503, 5507, 5510, 5511, 5512, 5513, 5515, 5516, 5517, 5526, 5527, 5529, 5530, 5534, 5538, 5540, 5542, 5546, 5558, 5561, 5563, 5570, 5574, 5576, 5578, 5580, 5586, 5590, 5592, 5594, 5596, 5597, 5600, 5609, 5614, 5617, 5623, 5626, 5634, 5636, 5638, 5639, 5640, 5642, 5644, 5645, 5648, 5649, 5650, 5652, 5654, 5655, 5659, 5662, 5665, 5669, 5672, 5673, 5674, 5675, 5677, 5679, 5682, 5685, 5689, 5690, 5692, 5693, 5695, 5697, 5700, 5702, 5705, 5709, 5719, 5722, 5726, 5732, 5733, 5737, 5743, 5746, 5747, 5753, 5754, 5756, 5757, 5758, 5761, 5762, 5765, 5779, 5783, 5785, 5786, 5788, 5789, 5792, 5793, 5794, 5805, 5806, 5808, 5813, 5814, 5816, 5817, 5820, 5831, 5832, 5840, 5841, 5843, 5848, 5849, 5851, 5854, 5864, 5869, 5871, 5872, 5883, 5888, 5892, 5898, 5899, 5901, 5903, 5907, 5912, 5915, 5925, 5927, 5932, 5933, 5940, 5944, 5948, 5950, 5953, 5962, 5972, 5978, 5982, 5987, 5988, 5998, 6009, 6018, 6020, 6024, 6028, 6050, 6077, 6078, 6091, 6098, 6121, 6129, 6131, 6135, 6138, 6157, 6159, 6197, 6212, 6246, 6253, 6280, 6284, 6313, 6342, 6361, 6370], [49, 96, 280, 484, 544, 664, 956, 1006, 1043, 1111, 1344, 1358, 1381, 1464, 1475, 1555, 1613, 1702, 1738, 1746, 1894, 1953, 1972, 2033, 2037, 2138, 2200, 2242, 2248, 2249, 2250, 2672, 4629, 4638, 5416, 5499, 5502, 5612, 5884, 6174, 6244], [75, 78, 111, 143, 146, 172, 178, 255, 264, 266, 297, 312, 327, 337, 352, 511, 573, 633, 693, 799, 834, 909, 924, 944, 949, 974, 1009, 1022, 1023, 1069, 1070, 1133, 1136, 1155, 1156, 1178, 1184, 1189, 1195, 1200, 1202, 1205, 1247, 1250, 1255, 1264, 1283, 1378, 1400, 1417, 1424, 1430, 1498, 1506, 1526, 1551, 1553, 1564, 1565, 1566, 1577, 1583, 1602, 1614, 1627, 1668, 1707, 1708, 1729, 1735, 1740, 1757, 1763, 1766, 1839, 1861, 1910, 1931, 1951, 1961, 2001, 2003, 2023, 2027, 2029, 2043, 2061, 2089, 2100, 2107, 2118, 2150, 2172, 2181, 2197, 2230, 2232, 2254, 2290, 2307, 2327, 2330, 2343, 2380, 2386, 2401, 2402, 2404, 2414, 2443, 2448, 2454, 2455, 2472, 2518, 2522, 2606, 2638, 2675, 2761, 2816, 2843, 2855, 2982, 2988, 3252, 3258, 3266, 3301, 3340, 3347, 3361, 3408, 3424, 3452, 3489, 3539, 3563, 3643, 3668, 3678, 3696, 3704, 3758, 3776, 3791, 3800, 3853, 3862, 3934, 4039, 4045, 4105, 4181, 4292, 4307, 4365, 4436, 4578, 4581, 4649, 4689, 4690, 4707, 4709, 4718, 4730, 4735, 4751, 4770, 4849, 4955, 4971, 5029, 5058, 5074, 5098, 5110, 5145, 5199, 5267, 5275, 5277, 5302, 5351, 5379, 5385, 5481, 5483, 5496, 5536, 5552, 5562, 5579, 5588, 5629, 5666, 5667, 5694, 5723, 5835, 5905, 5976, 6063, 6150, 6378], [0, 58, 107, 134, 151, 175, 371, 480, 482, 530, 590, 611, 770, 841, 846, 958, 960, 1065, 1067, 1071, 1157, 1266, 1279, 1305, 1309, 1317, 1355, 1460, 1492, 1569, 1580, 1598, 1599, 1609, 1611, 1662, 1672, 1700, 1773, 1846, 1862, 1873, 1875, 1879, 1885, 1928, 2009, 2080, 2101, 2142, 2185, 2194, 2243, 2272, 2297, 2374, 2428, 2447, 2478, 2480, 2520, 2528, 2531, 2651, 2668, 2677, 2682, 2688, 2689, 2768, 3239, 3326, 3410, 3425, 3493, 3529, 3679, 3716, 3764, 3792, 3824, 4020, 4253, 4271, 4566, 4679, 4798, 4940, 5134, 5197, 5264, 5269, 5455, 5456, 5508, 5740, 5807, 5876, 5960, 6155, 6250, 6304]], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0]])))

    def test_with_sym_c5_method_invalid(self):
        return_new = fu.angular_occupancy(self.params, self.angstep, 'c5', 'invalid')
        return_old = oldfu.angular_occupancy(self.params, self.angstep, 'c5', 'invalid')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new,  ([[175, 297, 578, 666, 945, 960, 1000, 1069, 1189, 1371, 1411, 1452, 1566, 1873, 2150, 2232, 2285, 2386, 2447, 2496, 2531, 2606, 2761, 2805, 2816, 2975, 3094, 3258, 3265, 3266, 3427, 3462, 3643, 3674, 3704, 3791, 4039, 4181, 4292, 4307, 4365, 4436, 4578, 4629, 4689, 4707, 4709, 4735, 5145, 5277, 5302, 5385, 5483, 5499, 5502, 5587, 5667, 5976, 6063, 6244], [32, 48, 75, 79, 115, 171, 176, 202, 277, 281, 328, 375, 511, 525, 559, 572, 573, 704, 723, 777, 1017, 1039, 1053, 1089, 1149, 1182, 1213, 1264, 1350, 1473, 1501, 1522, 1551, 1552, 1558, 1563, 1576, 1640, 1686, 1731, 1746, 1770, 1840, 1878, 1884, 1891, 2056, 2171, 2206, 2220, 2242, 2263, 2291, 2317, 2341, 2361, 2378, 2444, 2490, 2505, 2510, 2536, 2573, 2590, 2659, 2669, 2799, 2803, 2855, 2869, 2894, 2927, 2982, 3060, 3090, 3134, 3135, 3140, 3165, 3197, 3215, 3221, 3260, 3281, 3359, 3361, 3433, 3452, 3505, 3515, 3527, 3556, 3558, 3580, 3605, 3637, 3653, 3655, 3667, 3668, 3687, 3764, 3776, 3862, 3934, 3978, 4105, 4532, 4708, 4730, 4770, 4849, 4860, 4923, 4934, 4955, 4971, 5125, 5394, 5417, 5481, 5536, 5619, 5666, 5735, 5835, 6252, 6255, 6291, 6320, 6328], [119, 185, 590, 785, 1177, 1317, 1380, 1442, 1732, 1758, 1888, 2095, 2161, 2169, 2264, 2334, 2539, 2682, 2764, 2916, 3109, 3161, 3205, 3233, 3268, 3280, 3299, 3307, 3318, 3561, 3633, 3714, 3731, 3760, 3790, 3792, 3800, 3819, 3850, 3935, 4020, 4050, 4094, 4186, 4621, 4635, 4742, 4771, 4809, 4999, 5104, 5444, 5498, 5506, 5531, 5538, 5588, 5636, 5655, 5674, 5689, 5709, 5727, 5737, 5752, 5813, 5816, 5836, 5842, 5869, 5870, 5880, 5915, 6028, 6050, 6164, 6194, 6232, 6233, 6257, 6290, 6293, 6314, 6319, 6361, 6372, 6389], [15, 18, 19, 20, 24, 29, 36, 50, 57, 71, 74, 76, 77, 86, 95, 101, 102, 110, 118, 120, 123, 125, 126, 135, 137, 139, 148, 160, 165, 174, 177, 189, 193, 195, 196, 197, 199, 200, 206, 219, 220, 228, 238, 240, 246, 248, 260, 282, 286, 288, 290, 295, 301, 305, 306, 314, 316, 317, 320, 329, 330, 333, 338, 341, 342, 343, 344, 345, 350, 355, 359, 361, 364, 365, 369, 373, 377, 379, 380, 381, 382, 383, 388, 389, 395, 397, 398, 401, 408, 411, 412, 413, 415, 417, 419, 421, 423, 425, 427, 428, 430, 434, 436, 437, 440, 442, 444, 445, 447, 451, 454, 455, 458, 459, 461, 462, 463, 467, 468, 470, 471, 472, 478, 496, 501, 504, 509, 512, 515, 516, 517, 519, 522, 540, 541, 542, 551, 556, 561, 563, 576, 581, 583, 584, 589, 591, 592, 597, 598, 601, 604, 605, 606, 607, 608, 614, 617, 619, 620, 624, 631, 634, 635, 638, 639, 641, 646, 652, 653, 655, 659, 670, 676, 677, 683, 685, 689, 696, 698, 700, 702, 712, 715, 720, 729, 732, 733, 735, 742, 746, 747, 749, 753, 754, 756, 758, 759, 761, 762, 764, 767, 773, 776, 784, 789, 792, 795, 797, 803, 809, 810, 812, 816, 817, 820, 823, 827, 828, 830, 835, 840, 843, 844, 848, 852, 856, 857, 863, 865, 868, 871, 873, 874, 880, 882, 887, 890, 897, 901, 908, 912, 914, 919, 923, 930, 934, 935, 938, 947, 948, 951, 973, 991, 994, 996, 997, 1001, 1003, 1005, 1015, 1016, 1018, 1019, 1029, 1041, 1044, 1045, 1046, 1047, 1049, 1062, 1068, 1079, 1083, 1086, 1091, 1093, 1094, 1097, 1107, 1112, 1115, 1116, 1117, 1120, 1122, 1131, 1132, 1148, 1160, 1179, 1183, 1190, 1199, 1207, 1208, 1218, 1220, 1221, 1222, 1230, 1240, 1241, 1243, 1244, 1249, 1259, 1268, 1271, 1275, 1293, 1297, 1298, 1299, 1300, 1301, 1306, 1307, 1308, 1314, 1316, 1324, 1326, 1329, 1334, 1335, 1336, 1337, 1338, 1339, 1343, 1349, 1376, 1383, 1396, 1398, 1403, 1405, 1413, 1426, 1428, 1433, 1434, 1448, 1451, 1454, 1463, 1465, 1467, 1470, 1478, 1484, 1486, 1487, 1499, 1500, 1507, 1510, 1512, 1521, 1523, 1532, 1538, 1540, 1541, 1562, 1571, 1588, 1590, 1595, 1597, 1600, 1601, 1628, 1629, 1630, 1631, 1632, 1633, 1635, 1638, 1659, 1661, 1669, 1671, 1675, 1679, 1680, 1682, 1684, 1693, 1695, 1710, 1711, 1720, 1725, 1733, 1734, 1742, 1768, 1775, 1777, 1786, 1790, 1798, 1799, 1803, 1804, 1807, 1810, 1812, 1818, 1823, 1824, 1835, 1837, 1841, 1842, 1843, 1845, 1847, 1849, 1851, 1852, 1856, 1859, 1881, 1890, 1898, 1905, 1907, 1915, 1919, 1927, 1933, 1934, 1946, 1950, 1955, 1956, 1963, 1968, 1970, 1973, 1983, 1984, 1986, 1990, 1992, 2000, 2002, 2017, 2022, 2024, 2026, 2030, 2047, 2050, 2051, 2059, 2060, 2073, 2081, 2092, 2102, 2113, 2115, 2117, 2119, 2120, 2126, 2127, 2129, 2130, 2136, 2137, 2139, 2141, 2148, 2151, 2159, 2163, 2166, 2167, 2174, 2176, 2182, 2192, 2193, 2207, 2211, 2213, 2217, 2222, 2227, 2229, 2231, 2234, 2237, 2238, 2259, 2267, 2269, 2270, 2273, 2274, 2276, 2280, 2288, 2300, 2308, 2311, 2312, 2314, 2320, 2331, 2335, 2346, 2349, 2350, 2356, 2362, 2364, 2369, 2372, 2376, 2391, 2398, 2409, 2410, 2413, 2416, 2419, 2425, 2430, 2438, 2439, 2441, 2452, 2456, 2463, 2467, 2476, 2482, 2493, 2498, 2502, 2506, 2513, 2523, 2526, 2532, 2541, 2543, 2548, 2549, 2552, 2565, 2566, 2567, 2571, 2575, 2582, 2588, 2589, 2597, 2602, 2604, 2605, 2611, 2616, 2618, 2622, 2623, 2624, 2628, 2630, 2632, 2640, 2642, 2647, 2648, 2650, 2653, 2656, 2661, 2679, 2680, 2687, 2695, 2698, 2699, 2705, 2706, 2712, 2717, 2719, 2721, 2727, 2732, 2736, 2743, 2744, 2745, 2748, 2750, 2752, 2753, 2754, 2759, 2763, 2765, 2771, 2775, 2782, 2784, 2788, 2791, 2793, 2797, 2798, 2800, 2812, 2813, 2820, 2823, 2825, 2826, 2827, 2829, 2830, 2832, 2833, 2835, 2836, 2838, 2841, 2842, 2844, 2845, 2847, 2848, 2851, 2853, 2856, 2858, 2862, 2863, 2865, 2868, 2871, 2874, 2876, 2883, 2884, 2887, 2888, 2889, 2890, 2892, 2899, 2911, 2912, 2914, 2922, 2923, 2924, 2926, 2928, 2929, 2931, 2932, 2933, 2935, 2936, 2940, 2941, 2949, 2954, 2955, 2957, 2959, 2960, 2965, 2967, 2968, 2969, 2971, 2981, 2983, 2984, 2992, 2996, 2998, 2999, 3006, 3008, 3011, 3013, 3019, 3020, 3022, 3028, 3029, 3030, 3032, 3034, 3035, 3036, 3038, 3040, 3042, 3046, 3049, 3052, 3056, 3062, 3065, 3066, 3067, 3069, 3070, 3073, 3074, 3079, 3081, 3082, 3083, 3087, 3088, 3093, 3097, 3100, 3103, 3106, 3112, 3113, 3119, 3121, 3122, 3125, 3129, 3141, 3142, 3146, 3147, 3149, 3152, 3156, 3157, 3158, 3159, 3160, 3162, 3168, 3171, 3172, 3173, 3175, 3176, 3179, 3183, 3184, 3185, 3186, 3187, 3189, 3191, 3193, 3194, 3196, 3199, 3200, 3201, 3203, 3207, 3211, 3224, 3236, 3240, 3241, 3243, 3244, 3245, 3248, 3250, 3254, 3287, 3288, 3310, 3314, 3317, 3323, 3346, 3366, 3373, 3375, 3380, 3381, 3382, 3385, 3386, 3387, 3388, 3390, 3391, 3394, 3396, 3397, 3398, 3399, 3401, 3403, 3404, 3405, 3406, 3412, 3415, 3417, 3418, 3422, 3428, 3432, 3434, 3435, 3437, 3438, 3440, 3441, 3444, 3448, 3449, 3451, 3455, 3463, 3465, 3469, 3470, 3472, 3473, 3474, 3475, 3476, 3477, 3479, 3481, 3487, 3488, 3492, 3494, 3498, 3502, 3506, 3507, 3510, 3512, 3513, 3518, 3521, 3523, 3528, 3530, 3531, 3534, 3535, 3542, 3546, 3551, 3552, 3553, 3555, 3557, 3562, 3564, 3569, 3572, 3574, 3578, 3581, 3582, 3584, 3585, 3590, 3591, 3594, 3598, 3607, 3610, 3615, 3617, 3618, 3622, 3624, 3628, 3629, 3630, 3631, 3635, 3636, 3644, 3645, 3646, 3648, 3650, 3656, 3657, 3658, 3660, 3664, 3665, 3669, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3691, 3692, 3693, 3694, 3695, 3698, 3699, 3700, 3701, 3702, 3703, 3705, 3706, 3707, 3708, 3709, 3711, 3713, 3715, 3717, 3718, 3719, 3720, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3733, 3734, 3735, 3736, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3747, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3759, 3761, 3762, 3763, 3765, 3766, 3767, 3768, 3769, 3771, 3774, 3775, 3777, 3779, 3780, 3781, 3785, 3786, 3787, 3789, 3793, 3794, 3795, 3797, 3798, 3801, 3802, 3803, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3817, 3821, 3822, 3825, 3826, 3827, 3828, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3842, 3843, 3844, 3845, 3847, 3848, 3849, 3851, 3852, 3854, 3855, 3856, 3858, 3859, 3860, 3861, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3873, 3874, 3875, 3876, 3877, 3879, 3880, 3881, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3905, 3907, 3908, 3909, 3910, 3912, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3929, 3930, 3931, 3939, 3940, 3941, 3942, 3943, 3944, 3946, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4040, 4041, 4042, 4043, 4044, 4046, 4047, 4048, 4049, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4089, 4090, 4091, 4092, 4093, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4106, 4107, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4182, 4183, 4184, 4185, 4187, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4225, 4226, 4227, 4228, 4229, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4272, 4273, 4275, 4276, 4277, 4278, 4279, 4280, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4330, 4331, 4332, 4333, 4337, 4339, 4340, 4341, 4342, 4343, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4366, 4368, 4369, 4370, 4371, 4373, 4374, 4376, 4377, 4378, 4379, 4380, 4381, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4433, 4434, 4435, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4447, 4448, 4449, 4450, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4483, 4485, 4486, 4487, 4488, 4489, 4490, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4512, 4513, 4514, 4515, 4518, 4519, 4520, 4521, 4522, 4523, 4525, 4527, 4528, 4529, 4531, 4533, 4534, 4535, 4536, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4558, 4559, 4561, 4562, 4563, 4564, 4565, 4567, 4568, 4569, 4570, 4571, 4573, 4574, 4575, 4579, 4580, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4590, 4591, 4592, 4593, 4594, 4597, 4599, 4600, 4601, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4630, 4632, 4633, 4634, 4637, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4650, 4651, 4652, 4653, 4654, 4655, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4668, 4669, 4670, 4671, 4672, 4673, 4675, 4678, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4691, 4693, 4694, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4710, 4711, 4713, 4714, 4716, 4717, 4719, 4720, 4721, 4722, 4725, 4726, 4727, 4729, 4733, 4736, 4738, 4739, 4740, 4741, 4745, 4746, 4747, 4748, 4749, 4750, 4752, 4753, 4754, 4755, 4756, 4758, 4759, 4760, 4761, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4774, 4775, 4779, 4781, 4783, 4785, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4799, 4800, 4801, 4805, 4806, 4807, 4808, 4811, 4812, 4814, 4815, 4817, 4818, 4819, 4820, 4822, 4823, 4824, 4825, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4843, 4844, 4846, 4848, 4850, 4851, 4853, 4855, 4856, 4857, 4858, 4859, 4863, 4864, 4865, 4866, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4893, 4894, 4895, 4897, 4898, 4899, 4900, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4917, 4919, 4920, 4921, 4922, 4924, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4935, 4936, 4938, 4941, 4942, 4943, 4946, 4947, 4948, 4949, 4950, 4952, 4954, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4965, 4966, 4967, 4968, 4969, 4970, 4972, 4973, 4974, 4975, 4977, 4978, 4980, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4991, 4992, 4993, 4994, 4995, 4997, 4998, 5000, 5001, 5002, 5003, 5004, 5007, 5009, 5011, 5012, 5014, 5016, 5017, 5018, 5019, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5030, 5031, 5033, 5036, 5037, 5038, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5049, 5052, 5053, 5055, 5056, 5057, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5070, 5072, 5073, 5075, 5076, 5077, 5078, 5082, 5083, 5084, 5085, 5086, 5087, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5100, 5101, 5105, 5109, 5111, 5112, 5113, 5115, 5116, 5117, 5119, 5120, 5121, 5126, 5127, 5129, 5130, 5131, 5132, 5133, 5135, 5136, 5139, 5140, 5141, 5142, 5143, 5147, 5148, 5149, 5150, 5153, 5154, 5155, 5156, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5170, 5171, 5172, 5173, 5176, 5177, 5178, 5179, 5180, 5181, 5183, 5185, 5186, 5187, 5188, 5189, 5191, 5193, 5194, 5195, 5196, 5198, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5223, 5225, 5226, 5227, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5265, 5266, 5268, 5270, 5271, 5274, 5278, 5279, 5280, 5281, 5283, 5285, 5287, 5288, 5289, 5290, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5304, 5307, 5308, 5309, 5311, 5312, 5313, 5314, 5315, 5316, 5318, 5319, 5320, 5321, 5322, 5325, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5352, 5353, 5355, 5356, 5357, 5358, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5370, 5371, 5372, 5373, 5375, 5376, 5377, 5378, 5380, 5381, 5383, 5384, 5386, 5387, 5389, 5390, 5392, 5395, 5396, 5397, 5398, 5400, 5401, 5402, 5403, 5405, 5406, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5418, 5419, 5420, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5445, 5446, 5448, 5450, 5451, 5452, 5453, 5454, 5457, 5458, 5459, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5477, 5478, 5480, 5482, 5484, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5495, 5497, 5500, 5503, 5504, 5505, 5507, 5509, 5512, 5513, 5514, 5515, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5527, 5528, 5530, 5532, 5533, 5535, 5537, 5539, 5540, 5541, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5553, 5554, 5555, 5556, 5557, 5559, 5560, 5561, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5581, 5582, 5583, 5584, 5585, 5589, 5590, 5591, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5610, 5611, 5613, 5615, 5616, 5618, 5620, 5621, 5622, 5624, 5625, 5627, 5628, 5630, 5631, 5632, 5634, 5635, 5637, 5638, 5640, 5641, 5643, 5644, 5645, 5646, 5647, 5651, 5652, 5653, 5656, 5657, 5658, 5660, 5661, 5662, 5663, 5664, 5668, 5670, 5671, 5672, 5673, 5676, 5678, 5680, 5681, 5683, 5684, 5685, 5686, 5687, 5688, 5691, 5693, 5696, 5697, 5698, 5699, 5701, 5703, 5704, 5705, 5706, 5707, 5708, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5724, 5725, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5736, 5738, 5739, 5741, 5742, 5743, 5744, 5745, 5748, 5749, 5750, 5751, 5754, 5755, 5756, 5758, 5759, 5760, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5780, 5781, 5782, 5783, 5784, 5785, 5787, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5806, 5808, 5809, 5810, 5811, 5812, 5814, 5815, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5837, 5838, 5839, 5840, 5841, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5868, 5871, 5872, 5873, 5874, 5875, 5877, 5878, 5879, 5881, 5882, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5899, 5900, 5901, 5902, 5904, 5906, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5952, 5954, 5955, 5956, 5957, 5958, 5959, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6151, 6152, 6153, 6154, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6245, 6247, 6248, 6249, 6251, 6253, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6281, 6282, 6283, 6285, 6286, 6287, 6288, 6289, 6292, 6294, 6295, 6296, 6297, 6298, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6315, 6316, 6317, 6318, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6373, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419], [1, 88, 89, 97, 208, 213, 230, 259, 266, 432, 600, 640, 774, 954, 963, 982, 1004, 1008, 1032, 1095, 1099, 1130, 1161, 1165, 1194, 1225, 1254, 1260, 1263, 1288, 1303, 1318, 1330, 1384, 1393, 1422, 1449, 1520, 1545, 1547, 1549, 1652, 1664, 1666, 1672, 1691, 1724, 1729, 1754, 1756, 1789, 1794, 1795, 1796, 1831, 1832, 1860, 1899, 1900, 1901, 1903, 1942, 2041, 2083, 2105, 2106, 2132, 2140, 2152, 2153, 2208, 2281, 2491, 2564, 2694, 2859, 3169, 3322, 3543, 3871, 3882, 3904, 3906, 3945, 4357, 4560, 4631, 4657, 4776, 4803, 4804, 4852, 4888, 4889, 4916, 5006, 5051, 5174, 5224, 5273, 5303, 5431, 5460, 5690, 5867, 6155], [4, 6, 11, 16, 17, 21, 23, 25, 35, 41, 42, 43, 44, 59, 81, 84, 96, 103, 106, 117, 124, 128, 131, 142, 145, 147, 154, 159, 164, 168, 173, 182, 188, 190, 201, 209, 217, 222, 226, 233, 239, 256, 258, 261, 262, 268, 272, 273, 274, 283, 296, 302, 304, 307, 308, 309, 310, 313, 318, 322, 325, 326, 334, 335, 339, 349, 353, 357, 362, 366, 370, 376, 384, 386, 391, 393, 394, 399, 400, 403, 409, 414, 416, 422, 429, 431, 435, 438, 441, 448, 457, 464, 475, 489, 492, 493, 502, 505, 508, 514, 523, 524, 526, 537, 543, 547, 548, 553, 557, 558, 562, 564, 574, 579, 585, 596, 603, 612, 613, 615, 618, 627, 644, 648, 649, 650, 663, 665, 668, 669, 671, 672, 684, 686, 692, 706, 708, 716, 719, 721, 731, 740, 743, 757, 763, 771, 772, 775, 783, 786, 794, 801, 804, 807, 811, 819, 825, 826, 834, 836, 839, 847, 849, 850, 855, 858, 860, 862, 867, 875, 876, 883, 886, 895, 907, 913, 920, 925, 939, 942, 946, 957, 961, 962, 965, 966, 967, 972, 975, 977, 983, 985, 989, 992, 1013, 1034, 1051, 1059, 1064, 1066, 1076, 1090, 1100, 1101, 1105, 1106, 1110, 1118, 1128, 1134, 1144, 1154, 1169, 1176, 1188, 1196, 1211, 1214, 1215, 1237, 1238, 1248, 1256, 1261, 1265, 1267, 1285, 1289, 1291, 1312, 1340, 1348, 1354, 1356, 1358, 1360, 1362, 1363, 1364, 1370, 1385, 1387, 1391, 1412, 1414, 1416, 1419, 1429, 1431, 1447, 1453, 1462, 1481, 1483, 1491, 1495, 1497, 1504, 1509, 1511, 1516, 1518, 1533, 1536, 1537, 1554, 1568, 1572, 1579, 1586, 1592, 1603, 1615, 1625, 1639, 1645, 1651, 1660, 1665, 1676, 1690, 1697, 1703, 1706, 1712, 1713, 1714, 1715, 1719, 1736, 1741, 1743, 1750, 1753, 1761, 1762, 1776, 1780, 1783, 1784, 1802, 1805, 1811, 1816, 1826, 1836, 1838, 1844, 1853, 1855, 1858, 1864, 1867, 1876, 1877, 1880, 1897, 1916, 1936, 1937, 1939, 1940, 1949, 1975, 1978, 1979, 1982, 1985, 1991, 1994, 1997, 1998, 2004, 2007, 2012, 2013, 2034, 2038, 2040, 2044, 2048, 2054, 2085, 2086, 2093, 2099, 2109, 2131, 2138, 2146, 2149, 2154, 2165, 2168, 2180, 2191, 2209, 2210, 2215, 2216, 2218, 2221, 2224, 2235, 2244, 2248, 2250, 2253, 2256, 2265, 2268, 2278, 2287, 2289, 2303, 2306, 2313, 2315, 2323, 2337, 2339, 2342, 2348, 2351, 2360, 2363, 2367, 2384, 2399, 2405, 2424, 2427, 2432, 2446, 2450, 2458, 2460, 2481, 2483, 2487, 2495, 2500, 2511, 2514, 2534, 2537, 2542, 2546, 2547, 2553, 2555, 2576, 2579, 2580, 2581, 2584, 2594, 2596, 2600, 2601, 2626, 2646, 2649, 2670, 2671, 2672, 2675, 2676, 2678, 2684, 2693, 2702, 2704, 2708, 2720, 2730, 2731, 2734, 2738, 2739, 2758, 2770, 2772, 2774, 2776, 2777, 2781, 2785, 2787, 2790, 2792, 2808, 2809, 2819, 2821, 2828, 2834, 2843, 2850, 2852, 2857, 2866, 2867, 2873, 2879, 2881, 2882, 2893, 2896, 2897, 2898, 2900, 2901, 2902, 2903, 2904, 2905, 2910, 2917, 2921, 2925, 2930, 2939, 2942, 2946, 2950, 2952, 2956, 2961, 2963, 2964, 2970, 2974, 2977, 2986, 2989, 2993, 2994, 3002, 3003, 3007, 3012, 3016, 3021, 3023, 3024, 3026, 3027, 3031, 3037, 3039, 3041, 3045, 3047, 3050, 3053, 3054, 3058, 3059, 3061, 3063, 3068, 3071, 3072, 3075, 3076, 3077, 3078, 3084, 3085, 3086, 3089, 3102, 3111, 3114, 3116, 3117, 3118, 3120, 3123, 3124, 3126, 3127, 3130, 3132, 3133, 3136, 3138, 3139, 3143, 3148, 3150, 3151, 3153, 3154, 3155, 3163, 3164, 3167, 3170, 3180, 3190, 3192, 3195, 3198, 3204, 3206, 3208, 3209, 3210, 3216, 3227, 3228, 3229, 3232, 3234, 3242, 3246, 3247, 3253, 3259, 3262, 3263, 3277, 3282, 3285, 3290, 3295, 3300, 3303, 3305, 3309, 3320, 3325, 3329, 3330, 3331, 3334, 3337, 3338, 3342, 3355, 3360, 3369, 3372, 3374, 3376, 3377, 3379, 3389, 3392, 3395, 3400, 3402, 3409, 3414, 3416, 3421, 3423, 3430, 3439, 3443, 3447, 3456, 3457, 3459, 3466, 3471, 3478, 3480, 3482, 3484, 3489, 3490, 3491, 3495, 3496, 3497, 3503, 3509, 3511, 3514, 3516, 3517, 3522, 3525, 3526, 3532, 3536, 3537, 3538, 3541, 3547, 3548, 3549, 3550, 3554, 3559, 3566, 3567, 3568, 3570, 3579, 3586, 3587, 3588, 3589, 3595, 3597, 3599, 3600, 3602, 3604, 3606, 3611, 3612, 3614, 3616, 3620, 3621, 3625, 3626, 3632, 3638, 3640, 3642, 3647, 3652, 3659, 3661, 3662, 3663, 3666, 3671, 3748, 3784, 3818, 3846, 3932, 3933, 4045, 4338, 4537, 4602, 4648, 4658, 4667, 4674, 4712, 4734, 4777, 4778, 4854, 4861, 4890, 4891, 4892, 4951, 5010, 5059, 5081, 5123, 5146, 5151, 5152, 5199, 5222, 5244, 5245, 5301, 5324, 5369, 5501, 5529, 5534, 6174], [10, 90, 91, 149, 150, 180, 210, 211, 229, 271, 278, 483, 693, 730, 769, 885, 892, 900, 928, 974, 976, 1040, 1063, 1129, 1135, 1138, 1163, 1178, 1197, 1226, 1319, 1374, 1386, 1392, 1400, 1420, 1427, 1441, 1457, 1469, 1519, 1544, 1550, 1567, 1612, 1623, 1644, 1685, 1751, 1760, 1774, 1827, 1833, 1871, 1885, 1896, 1906, 1911, 1913, 1926, 1941, 1943, 1947, 1958, 1959, 1976, 2005, 2006, 2039, 2070, 2074, 2076, 2104, 2111, 2122, 2186, 2252, 2326, 2327, 2370, 2377, 2404, 2418, 2472, 2613, 2615, 2620, 2631, 2664, 2688, 2718, 2737, 3335, 3425, 3426, 3770, 3820, 3938, 4271, 4649, 4656, 4718, 5074, 5080, 5124, 5305, 5351, 5374, 5404, 5432, 5485], [13, 51, 52, 92, 99, 144, 146, 179, 181, 212, 215, 218, 227, 253, 263, 267, 269, 270, 279, 280, 476, 594, 633, 636, 647, 654, 710, 745, 787, 841, 851, 944, 1009, 1023, 1036, 1037, 1043, 1050, 1065, 1125, 1133, 1164, 1171, 1205, 1219, 1246, 1251, 1279, 1282, 1283, 1290, 1292, 1296, 1320, 1344, 1347, 1359, 1361, 1388, 1390, 1394, 1423, 1464, 1471, 1528, 1553, 1555, 1583, 1587, 1591, 1598, 1608, 1614, 1616, 1627, 1634, 1637, 1667, 1689, 1699, 1702, 1722, 1752, 1757, 1759, 1793, 1800, 1829, 1865, 1872, 1886, 1909, 1910, 1938, 1951, 1961, 1972, 1989, 2001, 2003, 2008, 2061, 2066, 2068, 2069, 2089, 2100, 2110, 2143, 2194, 2205, 2225, 2245, 2249, 2254, 2257, 2262, 2272, 2282, 2332, 2347, 2380, 2401, 2407, 2421, 2434, 2459, 2475, 2484, 2544, 2636, 2818, 2880, 2909, 3178, 3239, 3252, 3424, 3529, 3539, 3563, 3576, 3651, 3679, 4484, 4530, 4802, 4813, 4953, 4990, 5005, 5008, 5102, 5228, 5276, 5323, 5633, 5951, 6304], [], [107, 371, 480, 482, 1071, 1157, 1309, 1460, 1492, 1498, 1503, 1782, 1882, 1952, 2009, 2080, 2197, 2243, 2297, 2374, 2455, 2499, 2522, 2651, 2681, 3326, 3429, 3716, 3937, 5264, 5960], [134, 143, 481, 846, 1156, 1266, 1274, 1564, 1846, 2029, 2043, 2172, 2305, 2406, 2520, 3340, 3493, 3696, 3853, 4679, 4690, 4751, 5029, 5058, 5110, 5379, 5496, 5552, 5562, 5579, 5723], [33, 49, 111, 170, 178, 255, 264, 299, 337, 484, 582, 664, 949, 956, 970, 1006, 1022, 1070, 1075, 1111, 1136, 1155, 1184, 1192, 1195, 1200, 1247, 1250, 1255, 1378, 1381, 1417, 1430, 1475, 1506, 1546, 1565, 1577, 1593, 1602, 1611, 1613, 1620, 1668, 1694, 1704, 1708, 1718, 1735, 1738, 1740, 1766, 1779, 1791, 1839, 1861, 1894, 1931, 1945, 1953, 1999, 2023, 2027, 2033, 2037, 2107, 2118, 2199, 2200, 2212, 2230, 2299, 2316, 2330, 2343, 2394, 2478, 2638, 2674, 2677, 2860, 3273, 3408, 4638, 4676, 4798, 5021, 5269, 5272, 5416, 5456, 5612, 5884, 6149, 6284], [78, 327, 352, 611, 909, 958, 998, 1202, 1209, 1355, 1526, 1574, 1580, 1599, 1707, 1763, 1773, 1874, 1928, 2090, 2142, 2181, 2201, 2290, 2307, 2392, 2448, 2453, 2528, 2988, 3301, 5267, 5275, 5508, 5580, 5807, 5876, 5905, 6378], [], [0, 38, 40, 58, 73, 82, 151, 172, 187, 191, 198, 234, 312, 319, 351, 387, 420, 485, 503, 518, 530, 566, 609, 623, 629, 645, 651, 675, 679, 681, 690, 691, 709, 725, 738, 741, 770, 799, 802, 824, 837, 838, 924, 937, 950, 953, 968, 1026, 1031, 1033, 1067, 1078, 1147, 1150, 1181, 1186, 1191, 1193, 1228, 1239, 1272, 1273, 1277, 1295, 1322, 1325, 1346, 1366, 1401, 1407, 1424, 1445, 1459, 1461, 1466, 1474, 1529, 1539, 1569, 1609, 1610, 1657, 1663, 1674, 1700, 1709, 1745, 1755, 1868, 1875, 1974, 2058, 2101, 2175, 2185, 2246, 2277, 2296, 2301, 2336, 2402, 2408, 2414, 2443, 2454, 2466, 2480, 2485, 2492, 2501, 2503, 2504, 2507, 2518, 2550, 2551, 2558, 2559, 2591, 2668, 2673, 2689, 2690, 2710, 2713, 2725, 2768, 2804, 2807, 2817, 2831, 2846, 2854, 2861, 2870, 2872, 2907, 2920, 2934, 2966, 2976, 3182, 3202, 3222, 3251, 3255, 3276, 3308, 3332, 3362, 3393, 3545, 3575, 3627, 3634, 3639, 3641, 3678, 3680, 3758, 5197, 5455, 5629, 5694, 5740, 6150], [2, 7, 46, 61, 105, 109, 116, 127, 133, 169, 214, 231, 237, 257, 275, 285, 303, 324, 336, 346, 348, 356, 392, 402, 418, 426, 446, 465, 473, 479, 536, 546, 555, 560, 626, 699, 726, 744, 866, 878, 904, 922, 929, 932, 936, 971, 1024, 1035, 1055, 1072, 1085, 1140, 1162, 1166, 1206, 1217, 1232, 1258, 1280, 1286, 1305, 1373, 1450, 1505, 1517, 1530, 1531, 1542, 1581, 1662, 1681, 1765, 1767, 1781, 1792, 1814, 1825, 1854, 1862, 1866, 1879, 1887, 1930, 1944, 1960, 1971, 1995, 2028, 2079, 2184, 2198, 2219, 2260, 2279, 2324, 2345, 2358, 2359, 2381, 2393, 2420, 2426, 2428, 2445, 2451, 2473, 2512, 2527, 2545, 2563, 2569, 2577, 2583, 2586, 2593, 2603, 2607, 2617, 2634, 2639, 2643, 2658, 2662, 2667, 2683, 2686, 2701, 2703, 2714, 2735, 2741, 2746, 2756, 2773, 2806, 2811, 2814, 2815, 2891, 2918, 2938, 2947, 2948, 2953, 2962, 2973, 2979, 2980, 2990, 2995, 3009, 3010, 3080, 3095, 3104, 3144, 3145, 3166, 3174, 3177, 3188, 3213, 3231, 3237, 3292, 3324, 3354, 3410, 3419, 3431, 3467, 3468, 3485, 3486, 3524, 3560, 3571, 3613, 3681, 3824, 3911, 4253, 4382, 4491, 4566, 4581, 4784, 4821, 4940, 4979, 5015, 5103, 5134, 5190, 5236, 5306, 5317, 5494, 5516, 5649, 5761, 6250], [39, 156, 157, 204, 252, 534, 750, 987, 990, 1002, 1142, 1174, 1185, 1229, 1327, 1395, 1479, 1641, 1869, 1912, 2010, 2016, 2032, 2084, 2121, 2144, 2164, 2170, 2293, 2383, 2385, 2389, 2397, 2423, 2462, 2497, 2517, 2635, 2637, 2767, 3001, 3051, 3055, 3064, 3091, 3098, 3099, 3101, 3105, 3107, 3108, 3110, 3115, 3128, 3137, 3181, 3217, 3218, 3219, 3220, 3223, 3225, 3226, 3235, 3238, 3249, 3256, 3257, 3264, 3269, 3270, 3271, 3272, 3274, 3278, 3279, 3283, 3284, 3289, 3291, 3293, 3296, 3298, 3302, 3304, 3306, 3311, 3312, 3313, 3315, 3316, 3319, 3321, 3327, 3328, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3349, 3350, 3353, 3356, 3357, 3358, 3363, 3364, 3365, 3368, 3370, 3378, 3384, 3413, 3436, 3445, 3446, 3454, 3458, 3461, 3464, 3483, 3499, 3501, 3508, 3519, 3592, 3601, 3608, 3609, 3619, 3649, 3654, 3676, 3710, 3712, 3778, 3947, 4230, 4464, 4501, 4516, 4517, 4526, 4572, 4610, 4724, 4731, 4757, 4780, 4896, 4925, 4937, 4996, 5020, 5032, 5039, 5128, 5282, 5336, 5350, 5354, 5382, 5388, 5421, 5447, 5479, 5511, 5558, 5626, 5639, 5675, 5682, 5710, 5726, 5747, 5788, 5903, 5953, 6133, 6246, 6269, 6299], [3, 5, 8, 9, 12, 14, 22, 26, 27, 28, 30, 31, 34, 37, 45, 47, 53, 54, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 80, 83, 85, 87, 93, 94, 98, 100, 104, 108, 112, 113, 114, 121, 122, 129, 130, 132, 136, 138, 140, 141, 152, 153, 155, 158, 161, 162, 163, 166, 167, 183, 184, 186, 192, 194, 203, 205, 207, 216, 221, 223, 224, 225, 232, 235, 236, 241, 242, 243, 244, 245, 247, 249, 250, 251, 254, 265, 276, 284, 287, 289, 291, 292, 293, 294, 298, 300, 311, 315, 321, 323, 331, 332, 340, 347, 354, 358, 360, 363, 367, 368, 372, 374, 378, 385, 390, 396, 404, 405, 406, 407, 410, 424, 433, 439, 443, 449, 450, 452, 453, 456, 460, 466, 469, 474, 477, 486, 487, 488, 490, 491, 494, 495, 497, 498, 499, 500, 506, 507, 510, 513, 520, 521, 527, 528, 529, 531, 532, 533, 535, 538, 539, 544, 545, 549, 550, 552, 554, 565, 567, 568, 569, 570, 571, 575, 577, 580, 586, 587, 588, 593, 595, 599, 602, 610, 616, 621, 622, 625, 628, 630, 632, 637, 642, 643, 656, 657, 658, 660, 661, 662, 667, 673, 674, 678, 680, 682, 687, 688, 694, 695, 697, 701, 703, 705, 707, 711, 713, 714, 717, 718, 722, 724, 727, 728, 734, 736, 737, 739, 748, 751, 752, 755, 760, 765, 766, 768, 778, 779, 780, 781, 782, 788, 790, 791, 793, 796, 798, 800, 805, 806, 808, 813, 814, 815, 818, 821, 822, 829, 831, 832, 833, 842, 845, 853, 854, 859, 861, 864, 869, 870, 872, 877, 879, 881, 884, 888, 889, 891, 893, 894, 896, 898, 899, 902, 903, 905, 906, 910, 911, 915, 916, 917, 918, 921, 926, 927, 931, 933, 940, 941, 943, 952, 955, 959, 964, 969, 978, 979, 980, 981, 984, 986, 988, 993, 995, 999, 1007, 1010, 1011, 1012, 1014, 1020, 1021, 1025, 1027, 1028, 1030, 1038, 1042, 1048, 1052, 1054, 1056, 1057, 1058, 1060, 1061, 1073, 1074, 1077, 1080, 1081, 1082, 1084, 1087, 1088, 1092, 1096, 1098, 1102, 1103, 1104, 1108, 1109, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1137, 1139, 1141, 1143, 1145, 1146, 1151, 1152, 1153, 1158, 1159, 1167, 1168, 1170, 1172, 1173, 1175, 1180, 1187, 1198, 1201, 1203, 1204, 1210, 1212, 1216, 1223, 1224, 1227, 1231, 1233, 1234, 1235, 1236, 1242, 1245, 1252, 1253, 1257, 1262, 1269, 1270, 1276, 1278, 1281, 1284, 1287, 1294, 1302, 1304, 1310, 1311, 1313, 1315, 1321, 1323, 1328, 1331, 1332, 1333, 1341, 1342, 1345, 1351, 1352, 1353, 1357, 1365, 1367, 1368, 1369, 1372, 1375, 1377, 1379, 1382, 1389, 1397, 1399, 1402, 1404, 1406, 1408, 1409, 1410, 1415, 1418, 1421, 1425, 1432, 1435, 1436, 1437, 1438, 1439, 1440, 1443, 1444, 1446, 1455, 1456, 1458, 1468, 1472, 1476, 1477, 1480, 1482, 1485, 1488, 1489, 1490, 1493, 1494, 1496, 1502, 1508, 1513, 1514, 1515, 1524, 1525, 1527, 1534, 1535, 1543, 1548, 1556, 1557, 1559, 1560, 1561, 1570, 1573, 1575, 1578, 1582, 1584, 1585, 1589, 1594, 1596, 1604, 1605, 1606, 1607, 1617, 1618, 1619, 1621, 1622, 1624, 1626, 1636, 1642, 1643, 1646, 1647, 1648, 1649, 1650, 1653, 1654, 1655, 1656, 1658, 1670, 1673, 1677, 1678, 1683, 1687, 1688, 1692, 1696, 1698, 1701, 1705, 1716, 1717, 1721, 1723, 1726, 1727, 1728, 1730, 1737, 1739, 1744, 1747, 1748, 1749, 1764, 1769, 1771, 1772, 1778, 1785, 1787, 1788, 1797, 1801, 1806, 1808, 1809, 1813, 1815, 1817, 1819, 1820, 1821, 1822, 1828, 1830, 1834, 1848, 1850, 1857, 1863, 1870, 1883, 1889, 1892, 1893, 1895, 1902, 1904, 1908, 1914, 1917, 1918, 1920, 1921, 1922, 1923, 1924, 1925, 1929, 1932, 1935, 1948, 1954, 1957, 1962, 1964, 1965, 1966, 1967, 1969, 1977, 1980, 1981, 1987, 1988, 1993, 1996, 2011, 2014, 2015, 2018, 2019, 2020, 2021, 2025, 2031, 2035, 2036, 2042, 2045, 2046, 2049, 2052, 2053, 2055, 2057, 2062, 2063, 2064, 2065, 2067, 2071, 2072, 2075, 2077, 2078, 2082, 2087, 2088, 2091, 2094, 2096, 2097, 2098, 2103, 2108, 2112, 2114, 2116, 2123, 2124, 2125, 2128, 2133, 2134, 2135, 2145, 2147, 2155, 2156, 2157, 2158, 2160, 2162, 2173, 2177, 2178, 2179, 2183, 2187, 2188, 2189, 2190, 2195, 2196, 2202, 2203, 2204, 2214, 2223, 2226, 2228, 2233, 2236, 2239, 2240, 2241, 2247, 2251, 2255, 2258, 2261, 2266, 2271, 2275, 2283, 2284, 2286, 2292, 2294, 2295, 2298, 2302, 2304, 2309, 2310, 2318, 2319, 2321, 2322, 2325, 2328, 2329, 2333, 2338, 2340, 2344, 2352, 2353, 2354, 2355, 2357, 2365, 2366, 2368, 2371, 2373, 2375, 2379, 2382, 2387, 2388, 2390, 2395, 2396, 2400, 2403, 2411, 2412, 2415, 2417, 2422, 2429, 2431, 2433, 2435, 2436, 2437, 2440, 2442, 2449, 2457, 2461, 2464, 2465, 2468, 2469, 2470, 2471, 2474, 2477, 2479, 2486, 2488, 2489, 2494, 2508, 2509, 2515, 2516, 2519, 2521, 2524, 2525, 2529, 2530, 2533, 2535, 2538, 2540, 2554, 2556, 2557, 2560, 2561, 2562, 2568, 2570, 2572, 2574, 2578, 2585, 2587, 2592, 2595, 2598, 2599, 2608, 2609, 2610, 2612, 2614, 2619, 2621, 2625, 2627, 2629, 2633, 2641, 2644, 2645, 2652, 2654, 2655, 2657, 2660, 2663, 2665, 2666, 2685, 2691, 2692, 2696, 2697, 2700, 2707, 2709, 2711, 2715, 2716, 2722, 2723, 2724, 2726, 2728, 2729, 2733, 2740, 2742, 2747, 2749, 2751, 2755, 2757, 2760, 2762, 2766, 2769, 2778, 2779, 2780, 2783, 2786, 2789, 2794, 2795, 2796, 2801, 2802, 2810, 2822, 2824, 2837, 2839, 2840, 2849, 2864, 2875, 2877, 2878, 2885, 2886, 2895, 2906, 2908, 2913, 2915, 2919, 2937, 2943, 2944, 2945, 2951, 2958, 2972, 2978, 2985, 2987, 2991, 2997, 3000, 3004, 3005, 3014, 3015, 3017, 3018, 3025, 3033, 3043, 3044, 3048, 3057, 3092, 3096, 3131, 3212, 3214, 3230, 3261, 3267, 3275, 3286, 3294, 3297, 3347, 3351, 3352, 3367, 3371, 3383, 3407, 3411, 3420, 3442, 3450, 3453, 3460, 3500, 3504, 3520, 3533, 3540, 3544, 3565, 3573, 3577, 3583, 3593, 3596, 3603, 3623, 3670, 3673, 3682, 3686, 3690, 3697, 3721, 3730, 3732, 3737, 3746, 3772, 3773, 3782, 3783, 3788, 3796, 3799, 3804, 3816, 3823, 3829, 3841, 3857, 3872, 3878, 3913, 3928, 3936, 3998, 4018, 4019, 4063, 4075, 4088, 4108, 4109, 4127, 4180, 4188, 4224, 4274, 4281, 4306, 4317, 4329, 4334, 4335, 4336, 4344, 4367, 4372, 4375, 4407, 4432, 4446, 4451, 4482, 4511, 4524, 4547, 4557, 4576, 4577, 4589, 4595, 4596, 4598, 4636, 4639, 4677, 4692, 4695, 4696, 4697, 4715, 4723, 4728, 4732, 4737, 4743, 4744, 4762, 4782, 4786, 4810, 4816, 4826, 4842, 4845, 4847, 4862, 4867, 4901, 4918, 4939, 4944, 4945, 4964, 4976, 4981, 5013, 5034, 5035, 5047, 5048, 5050, 5054, 5069, 5071, 5079, 5088, 5098, 5099, 5106, 5107, 5108, 5114, 5118, 5122, 5137, 5138, 5144, 5157, 5169, 5175, 5182, 5184, 5192, 5200, 5284, 5286, 5291, 5310, 5326, 5359, 5391, 5393, 5399, 5407, 5433, 5449, 5476, 5510, 5526, 5542, 5563, 5586, 5592, 5609, 5614, 5617, 5623, 5642, 5648, 5650, 5654, 5659, 5665, 5669, 5677, 5679, 5692, 5695, 5700, 5702, 5722, 5746, 5753, 5757, 5762, 5779, 5786, 5805, 5854, 5883, 5898, 5907, 5998, 6009, 6020, 6280], []], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]])))

    def test_with_empty_params_list(self):
        """ the values got from the pickle file"""
        return_new = fu.angular_occupancy([], self.angstep, 'c5', 'S')
        return_old = oldfu.angular_occupancy([], self.angstep, 'c5', 'S')
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertTrue(numpy.array_equal(return_new, ([[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]])))

    def test_with_null_angstep_returns_ZeroDivisionError_error_msg(self):
        """ the values got from the pickle file"""
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.angular_occupancy(self.params, 0, 'c5', 'S')
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.angular_occupancy(self.params, 0, 'c5', 'S')
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_angular_histogram(unittest.TestCase):
    params = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.angular_occupancy"))[0][0]
    angstep = 15 # i change it becuase the lower value got from the pickle file leads each test to run for more than 10 sec, nov less than 1

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angular_histogram()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angular_histogram()
        self.assertEqual(cm_new.exception.message, "angular_histogram() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_less_angles_returns_IndexError_list_index_out_of_range(self):
        angles=[[0.1],[21.1],[30.11],[1.1]]
        with self.assertRaises(IndexError) as cm_new:
            fu.angular_histogram(angles, self.angstep, 'c5', 'S')
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angular_histogram(angles, self.angstep, 'c5', 'S')
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_method_S(self):
        """ the values got from the pickle file"""
        return_new = fu.angular_histogram(self.params, self.angstep, 'c5', 'S')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'c5', 'S')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [60, 131, 87, 3142, 106, 736, 111, 159, 0, 31, 31, 95, 39, 0, 166, 202, 186, 1138, 0]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]]))

    def test_with_sym_c1_method_S(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'c1', 'S')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'c1', 'S')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [1, 0, 4, 15, 0, 0, 8, 1, 0, 0, 0, 181, 88, 103, 0, 0, 0, 9, 15, 11, 3, 0, 0, 0, 6, 78, 21, 19, 10, 0, 0, 0, 0, 8, 6, 12, 7, 5, 0, 0, 0, 0, 0, 22, 67, 15, 21, 19, 0, 0, 0, 0, 0, 2, 7, 15, 5, 118, 10, 0, 0, 0, 0, 0, 2, 1170, 842, 24, 31, 30, 0, 0, 0, 0, 0, 0, 14, 117, 45, 31, 214, 27, 0, 0, 0, 0, 0, 0, 20, 2804, 84, 9, 35, 9, 0]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [103.10941180192563, 8.3648752678618958, 0.0], [176.21450628042055, 11.840273881876096, 0.0], [236.06567303731981, 14.514303081558177, 0.0], [288.03896258192111, 16.774744264095403, 0.0], [334.65212472788477, 18.771666189212812, 0.0], [17.320665881035382, 20.581969211500514, 0.0], [56.93303390011404, 22.251299640054558, 0.0], [94.089796407092493, 23.809376225696244, 0.0], [129.21924576643349, 25.27682691656447, 0.0], [162.63945091780187, 26.668660597354688, 0.0], [194.5942533593051, 27.996200493836653, 0.0], [225.27544022149684, 29.268238325258856, 0.0], [254.83707261705493, 30.491761757790488, 0.0], [283.40511428823197, 31.672433426416607, 0.0], [311.08411657570718, 32.814917946018149, 0.0], [337.96198959682874, 33.923112003259213, 0.0], [4.1134892483376575, 35.000310475444778, 0.0], [29.60281804202976, 36.049329053620667, 0.0], [54.485601484913772, 37.072596525218906, 0.0], [78.810412451731764, 38.072225413642641, 0.0], [102.61996477563827, 39.050066871297375, 0.0], [125.95205935497097, 40.007753913485175, 0.0], [148.84034277218166, 40.946735883139567, 0.0], [171.31492190766434, 41.868306226292802, 0.0], [193.40286659732473, 42.773625099278647, 0.0], [215.12862428281286, 43.663737936199425, 0.0], [236.51436477689751, 44.539590825107041, 0.0], [257.5802690164162, 45.402043338524194, 0.0], [278.34477253506691, 46.251879315068301, 0.0], [298.8247720406049, 47.089815978324047, 0.0], [319.03580170651145, 47.916511695972396, 0.0], [338.99218443330994, 48.732572619036205, 0.0], [358.7071622904154, 49.538558392666999, 0.0], [18.19300963741847, 50.334987092406848, 0.0], [37.461131087151983, 51.122339510591601, 0.0], [56.522148070016584, 51.901062894532814, 0.0], [75.38597385890661, 52.671574219858329, 0.0], [94.061880093523726, 53.434263067816588, 0.0], [112.55855548442202, 54.189494163637207, 0.0], [130.88415786750079, 54.937609623569593, 0.0], [149.04636050865906, 55.678930950517618, 0.0], [167.05239341807666, 56.413760811888345, 0.0], [184.90908031797213, 57.142384628092266, 0.0], [202.62287181191573, 57.865071995851814, 0.0], [220.19987522407473, 58.582077966921432, 0.0], [237.64588151014897, 59.293644199858242, 0.0], [254.96638958583773, 60.000000000000007, 0.0], [272.16662837155565, 60.70136326071934, 0.0], [289.25157681225221, 61.39794131726056, 0.0], [306.22598209734565, 62.089931722971258, 0.0], [323.09437627694581, 62.777522956471202, 0.0], [339.8610914458917, 63.460895067215752, 0.0], [356.53027364599154, 64.140220265984055, 0.0], [13.105895718668648, 64.815663466024077, 0.0], [29.591768624530079, 65.487382779900017, 0.0], [45.99155283280313, 66.155529976495018, 0.0], [62.30876787180928, 66.820250902106835, 0.0], [78.54680162140626, 67.481685869128711, 0.0], [94.708918819398605, 68.13997001541874, 0.0], [110.79826894611286, 68.795233637120731, 0.0], [126.81789354449648, 69.44760249740412, 0.0], [142.77073302709655, 70.097198113328304, 0.0], [158.65963301599265, 70.744138022809352, 0.0], [174.48735025710221, 71.388536033464305, 0.0], [190.25655814616263, 72.030502454931167, 0.0], [205.9698519000554, 72.67014431610464, 0.0], [221.62975340390906, 73.307565568589141, 0.0], [237.23871576155324, 73.942867277546171, 0.0], [252.79912757434613, 74.576147801003884, 0.0], [268.31331697112819, 75.207502958598496, 0.0], [283.78355541002907, 75.837026190630382, 0.0], [299.21206127104648, 76.464808708239275, 0.0], [314.60100325669839, 77.09093963543441, 0.0], [329.95250361660271, 77.715506143652135, 0.0], [345.26864121054132, 78.338593579458959, 0.0], [0.55145452340394741, 78.960285585967029, 0.0], [15.802944044363288, 79.580664218485097, 0.0], [31.025075521698739, 80.19981005488745, 0.0], [46.219782103845169, 80.817802301147381, 0.0], [61.388966876490883, 81.43471889244924, 0.0], [76.534505204872943, 82.050636590264745, 0.0], [91.658246989813023, 82.665631075752216, 0.0], [106.76201884549539, 83.279777039814959, 0.0], [121.84762620650507, 83.893148270134077, 0.0], [136.91685537121364, 84.505817735472007, 0.0], [151.97147548821775, 85.117857667526891, 0.0], [167.01324049219787, 85.729339640603513, 0.0], [182.04389099526841, 86.340334649353068, 0.0], [197.06515613963234, 86.950913184823222, 0.0], [212.07875541713094, 87.561145309050133, 0.0], [227.08640046109076, 88.171100728415553, 0.0], [242.0897968157137, 88.78084886598522, 0.0], [257.09064568812886, 89.390458933039241, 0.0], [272.09064568812886, 90.0, 0.0]]))

    def test_with_sym_oct_method_S(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'oct1', 'S')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'oct1', 'S')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [1215, 4645, 560]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [18.060151356949547, 32.700469931476135, 0.0], [42.457926460773422, 37.938127427185499, 0.0]]))

    def test_with_sym_invalid_method_S_returns_AttributeError_symclass_hasnot_attribute_symangles_error_msg(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.angular_histogram(self.params, self.angstep, 'invalid', 'S')
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.angular_histogram(self.params, self.angstep, 'invalid', 'S')
        self.assertEqual(cm_new.exception.message, "'symclass' object has no attribute 'symangles'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_method_P(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'c5', 'P')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'c5', 'P')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [1430, 2270, 15, 1286, 55, 23, 25, 9, 52, 156, 185, 14, 5, 19, 88, 36, 21, 13, 137, 103, 138, 39, 206, 18, 77]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [57.955549577344101, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [60.000000000000007, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0], [63.63961030678928, 45.0, 0.0], [0.0, 60.0, 0.0], [17.320508075688775, 60.0, 0.0], [34.641016151377549, 60.0, 0.0], [51.96152422706632, 60.0, 0.0], [69.282032302755098, 60.0, 0.0], [0.0, 75.0, 0.0], [15.529142706151246, 75.0, 0.0], [31.058285412302492, 75.0, 0.0], [46.587428118453737, 75.0, 0.0], [62.116570824604985, 75.0, 0.0], [0.0, 90.0, 0.0], [15.0, 90.0, 0.0], [30.0, 90.0, 0.0], [45.0, 90.0, 0.0], [60.0, 90.0, 0.0]]))

    def test_with_sym_c1_method_P(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'c1', 'P')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'c1', 'P')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [1, 4, 2, 0, 8, 22, 0, 0, 6, 12, 5, 0, 0, 0, 133, 95, 148, 0, 0, 0, 7, 9, 15, 7, 0, 0, 0, 0, 2, 83, 18, 18, 17, 0, 0, 0, 0, 4, 5, 11, 10, 14, 0, 0, 0, 0, 0, 1, 54, 37, 14, 33, 1, 0, 0, 0, 0, 0, 13, 76, 39, 30, 301, 26, 0, 0, 0, 0, 0, 0, 761, 2621, 24, 32, 44, 0, 0, 0, 0, 0, 0, 0, 6, 1450, 119, 9, 48, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [57.955549577344101, 15.0, 0.0], [115.9110991546882, 15.0, 0.0], [173.8666487320323, 15.0, 0.0], [231.8221983093764, 15.0, 0.0], [289.77774788672048, 15.0, 0.0], [347.73329746406455, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [60.000000000000007, 30.0, 0.0], [90.000000000000014, 30.0, 0.0], [120.00000000000001, 30.0, 0.0], [150.00000000000003, 30.0, 0.0], [180.00000000000003, 30.0, 0.0], [210.00000000000003, 30.0, 0.0], [240.00000000000003, 30.0, 0.0], [270.00000000000006, 30.0, 0.0], [300.00000000000006, 30.0, 0.0], [330.00000000000006, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0], [63.63961030678928, 45.0, 0.0], [84.852813742385706, 45.0, 0.0], [106.06601717798213, 45.0, 0.0], [127.27922061357856, 45.0, 0.0], [148.49242404917499, 45.0, 0.0], [169.70562748477141, 45.0, 0.0], [190.91883092036784, 45.0, 0.0], [212.13203435596427, 45.0, 0.0], [233.34523779156069, 45.0, 0.0], [254.55844122715712, 45.0, 0.0], [275.77164466275354, 45.0, 0.0], [296.98484809834997, 45.0, 0.0], [318.1980515339464, 45.0, 0.0], [339.41125496954282, 45.0, 0.0], [0.0, 60.0, 0.0], [17.320508075688775, 60.0, 0.0], [34.641016151377549, 60.0, 0.0], [51.96152422706632, 60.0, 0.0], [69.282032302755098, 60.0, 0.0], [86.602540378443877, 60.0, 0.0], [103.92304845413265, 60.0, 0.0], [121.24355652982143, 60.0, 0.0], [138.5640646055102, 60.0, 0.0], [155.88457268119896, 60.0, 0.0], [173.20508075688772, 60.0, 0.0], [190.52558883257649, 60.0, 0.0], [207.84609690826525, 60.0, 0.0], [225.16660498395402, 60.0, 0.0], [242.48711305964278, 60.0, 0.0], [259.80762113533154, 60.0, 0.0], [277.12812921102034, 60.0, 0.0], [294.44863728670913, 60.0, 0.0], [311.76914536239792, 60.0, 0.0], [329.08965343808671, 60.0, 0.0], [346.41016151377551, 60.0, 0.0], [0.0, 75.0, 0.0], [15.529142706151246, 75.0, 0.0], [31.058285412302492, 75.0, 0.0], [46.587428118453737, 75.0, 0.0], [62.116570824604985, 75.0, 0.0], [77.645713530756225, 75.0, 0.0], [93.174856236907473, 75.0, 0.0], [108.70399894305872, 75.0, 0.0], [124.23314164920997, 75.0, 0.0], [139.7622843553612, 75.0, 0.0], [155.29142706151245, 75.0, 0.0], [170.8205697676637, 75.0, 0.0], [186.34971247381495, 75.0, 0.0], [201.87885517996619, 75.0, 0.0], [217.40799788611744, 75.0, 0.0], [232.93714059226869, 75.0, 0.0], [248.46628329841994, 75.0, 0.0], [263.99542600457119, 75.0, 0.0], [279.52456871072241, 75.0, 0.0], [295.05371141687363, 75.0, 0.0], [310.58285412302484, 75.0, 0.0], [326.11199682917606, 75.0, 0.0], [341.64113953532728, 75.0, 0.0], [357.1702822414785, 75.0, 0.0], [0.0, 90.0, 0.0], [15.0, 90.0, 0.0], [30.0, 90.0, 0.0], [45.0, 90.0, 0.0], [60.0, 90.0, 0.0], [75.0, 90.0, 0.0], [90.0, 90.0, 0.0], [105.0, 90.0, 0.0], [120.0, 90.0, 0.0], [135.0, 90.0, 0.0], [150.0, 90.0, 0.0], [165.0, 90.0, 0.0], [180.0, 90.0, 0.0], [195.0, 90.0, 0.0], [210.0, 90.0, 0.0], [225.0, 90.0, 0.0], [240.0, 90.0, 0.0], [255.0, 90.0, 0.0], [270.0, 90.0, 0.0], [285.0, 90.0, 0.0], [300.0, 90.0, 0.0], [315.0, 90.0, 0.0], [330.0, 90.0, 0.0], [345.0, 90.0, 0.0]]))


    def test_with_sym_oct_method_P(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'oct1', 'P')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'oct1', 'P')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [7, 2700, 296, 3068, 41, 206, 102]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [0.0, 15.0, 0.0], [0.0, 30.0, 0.0], [30.000000000000004, 30.0, 0.0], [0.0, 45.0, 0.0], [21.213203435596427, 45.0, 0.0], [42.426406871192853, 45.0, 0.0]]))


    def test_with_sym_c5_method_invalid(self):
        return_new = fu.angular_histogram(self.params, self.angstep, 'c5', 'invalid')
        return_old = oldfu.angular_histogram(self.params, self.angstep, 'c5', 'invalid')
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [60, 131, 87, 3142, 106, 736, 111, 159, 0, 31, 31, 95, 39, 0, 166, 202, 186, 1138, 0]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]]))

    def test_with_empty_params_list(self):
        """ the values got from the pickle file"""
        return_new = fu.angular_histogram([], self.angstep, 'c5', 'S')
        return_old = oldfu.angular_histogram([], self.angstep, 'c5', 'S')
        # self.assertTrue(numpy.array_equal(return_new, return_old))    --> failed ... ????
        self.assertTrue(numpy.array_equal(return_new[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertTrue(numpy.array_equal(return_new[1], [[0.0, 0.0, 0.0], [45.638329755339889, 19.188136453720929, 0.0], [6.3806392352448285, 27.266044450732828, 0.0], [33.516660247243557, 33.557309761920713, 0.0], [57.381514112289537, 38.942441268981383, 0.0], [7.0684360926569951, 43.761742692679803, 0.0], [27.193047890155107, 48.189685104221397, 0.0], [46.143332861432214, 52.330113035670372, 0.0], [64.183466690520859, 56.251011404111416, 0.0], [9.5039748662096315, 60.000000000000007, 0.0], [26.248664035752775, 63.612200038757003, 0.0], [42.53027664295201, 67.114619523841426, 0.0], [58.44017921964933, 70.528779365509308, 0.0], [2.0546824827378032, 73.872379786839247, 0.0], [17.439360304788927, 77.160411593095844, 0.0], [32.652136889902224, 80.405931773139542, 0.0], [47.745595738025806, 83.620629791557192, 0.0], [62.768797608041552, 86.815261463279597, 0.0], [5.7687977080415465, 90.0, 0.0]]))

    def test_with_null_angstep_returns_ZeroDivisionError_error_msg(self):
        """ the values got from the pickle file"""
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.angular_histogram(self.params, 0, 'c5', 'S')
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.angular_histogram(self.params, 0, 'c5', 'S')
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_balance_angular_distribution(unittest.TestCase):
    params = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.angular_occupancy"))[0][0]
    angstep = 15 # i change it becuase the lower value got from the pickle file leads each test to run for more than 10 sec, nov less than 1

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.balance_angular_distribution()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.balance_angular_distribution()
        self.assertEqual(cm_new.exception.message, "balance_angular_distribution() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_less_angles_returns_IndexError_list_index_out_of_range(self):
        angles=[[0.1],[21.1],[30.11],[1.1]]
        with self.assertRaises(IndexError) as cm_new:
            fu.balance_angular_distribution(angles, max_occupy = -1, angstep = self.angstep, sym= 'c5')
        with self.assertRaises(IndexError) as cm_old:
            oldfu.balance_angular_distribution(angles, max_occupy = -1, angstep = self.angstep, sym= 'c5')
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_not_positive_maxOccupy(self):
        """ the values got from the pickle file"""
        return_new = fu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'c5')
        return_old = oldfu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'c5')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new

    def test_with_sym_c1_not_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'c1')
        return_old = oldfu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'c1')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[3317], [], [213, 4803, 5273, 5867], [272, 357, 432, 600, 1169, 1303, 1360, 1936, 2694, 3906, 4777, 4888, 4889, 4951, 5245], [], [], [525, 666, 1442, 1452, 2496, 2805, 3094, 4860], [3674], [], [], [], [1, 51, 52, 88, 92, 97, 179, 181, 208, 212, 215, 218, 227, 230, 253, 259, 267, 270, 594, 636, 640, 654, 710, 745, 774, 787, 851, 954, 982, 1004, 1008, 1032, 1036, 1037, 1050, 1095, 1099, 1125, 1161, 1165, 1171, 1194, 1219, 1225, 1246, 1251, 1254, 1263, 1282, 1290, 1296, 1318, 1320, 1330, 1347, 1356, 1359, 1384, 1390, 1394, 1422, 1423, 1431, 1520, 1528, 1547, 1549, 1587, 1591, 1608, 1616, 1637, 1652, 1664, 1666, 1667, 1689, 1691, 1699, 1714, 1722, 1724, 1750, 1752, 1753, 1756, 1759, 1761, 1793, 1794, 1795, 1796, 1800, 1811, 1829, 1831, 1836, 1838, 1865, 1872, 1886, 1899, 1901, 1903, 1909, 1938, 1978, 1989, 2008, 2041, 2066, 2068, 2069, 2083, 2105, 2106, 2110, 2140, 2143, 2153, 2208, 2225, 2257, 2262, 2282, 2332, 2347, 2407, 2421, 2459, 2475, 2491, 2544, 2564, 2636, 2818, 2859, 2909, 3178, 3322, 3576, 3651, 3871, 3882, 3904, 3945, 4357, 4484, 4530, 4560, 4631, 4657, 4658, 4712, 4776, 4802, 4804, 4813, 4852, 4861, 4892, 4916, 4953, 4990, 5005, 5006, 5010, 5051, 5102, 5174, 5224, 5228, 5244, 5276, 5303, 5323, 5431, 5460, 5633, 5690, 5951], [103, 117, 150, 182, 268, 403, 409, 476, 786, 801, 819, 1034, 1059, 1064, 1134, 1138, 1176, 1196, 1238, 1256, 1261, 1285, 1319, 1385, 1387, 1391, 1419, 1457, 1503, 1516, 1518, 1536, 1579, 1651, 1660, 1690, 1712, 1713, 1897, 1937, 1939, 1940, 1943, 1975, 1998, 2006, 2076, 2104, 2287, 2418, 2681, 3263, 3599, 3606, 3748, 3770, 3784, 3818, 3846, 3932, 3933, 3937, 4338, 4537, 4602, 4648, 4667, 4674, 4734, 4778, 4854, 4890, 4891, 5059, 5081, 5123, 5146, 5151, 5152, 5222, 5301, 5305, 5324, 5369, 5374, 5501, 5529, 5534], [10, 89, 90, 91, 149, 180, 210, 211, 229, 271, 278, 730, 769, 885, 892, 900, 928, 963, 974, 976, 1040, 1063, 1129, 1130, 1135, 1163, 1197, 1226, 1260, 1288, 1374, 1386, 1392, 1393, 1420, 1427, 1441, 1449, 1469, 1519, 1544, 1545, 1550, 1554, 1567, 1612, 1623, 1644, 1685, 1751, 1754, 1760, 1774, 1789, 1827, 1832, 1833, 1860, 1871, 1896, 1900, 1906, 1911, 1913, 1926, 1941, 1942, 1947, 1958, 1959, 1976, 2005, 2039, 2070, 2074, 2111, 2122, 2132, 2252, 2326, 2327, 2370, 2377, 2613, 2615, 2620, 2631, 2664, 2718, 2737, 3335, 3426, 3543, 3820, 3938, 4656, 4718, 5074, 5080, 5124, 5404, 5432, 5485], [], [], [], [277, 834, 1473, 1878, 2138, 2590, 4532, 6174, 6328], [590, 777, 785, 1888, 2539, 2682, 2688, 3109, 3731, 3800, 3819, 4020, 5444, 5588, 6028], [185, 1317, 1672, 1729, 2152, 2161, 2169, 2281, 3169, 3792, 6155], [266, 4045, 5199], [], [], [], [484, 1043, 1344, 1464, 2484, 5416], [13, 99, 111, 144, 146, 178, 263, 269, 279, 280, 337, 633, 647, 944, 949, 1006, 1009, 1022, 1023, 1070, 1133, 1164, 1195, 1205, 1250, 1255, 1283, 1361, 1378, 1381, 1388, 1430, 1471, 1475, 1506, 1553, 1555, 1577, 1583, 1602, 1613, 1614, 1627, 1668, 1702, 1708, 1738, 1757, 1766, 1839, 1861, 1931, 1953, 1961, 1972, 2001, 2003, 2023, 2027, 2033, 2037, 2061, 2089, 2107, 2200, 2205, 2245, 2249, 2254, 2380, 2401, 2434, 2880, 3252, 3408, 3424, 3563, 4638], [78, 371, 480, 482, 909, 1157, 1292, 1634, 1763, 1910, 1951, 2080, 2100, 2181, 2197, 2243, 2374, 3539, 3716, 5008, 5264], [143, 483, 846, 1156, 1266, 1309, 1492, 1564, 1846, 2029, 2172, 2186, 2472, 2520, 3326, 3493, 3853, 5058, 5579], [3340, 4649, 4690, 4751, 5029, 5351, 5496, 5552, 5562, 5723], [], [], [], [], [96, 481, 1358, 2248, 2250, 2305, 2406, 2672], [693, 1178, 1274, 1400, 2675, 2843], [841, 1279, 1885, 2194, 2272, 2404, 3239, 3425, 3529, 3679, 4271, 6304], [107, 1065, 1460, 1598, 2009, 2455, 5960], [1498, 1782, 2522, 3429, 3489], [], [], [], [], [], [49, 170, 299, 664, 956, 970, 1075, 1111, 1136, 1546, 1593, 1620, 1779, 1894, 1912, 2212, 2394, 2860, 3001, 5612, 5884, 6149], [33, 87, 141, 255, 264, 352, 500, 760, 778, 793, 921, 952, 998, 1002, 1155, 1172, 1184, 1192, 1200, 1202, 1209, 1242, 1247, 1313, 1375, 1417, 1526, 1565, 1574, 1599, 1646, 1694, 1704, 1707, 1718, 1735, 1740, 1791, 1869, 1874, 1923, 1945, 1999, 2090, 2091, 2118, 2133, 2142, 2190, 2201, 2230, 2290, 2307, 2316, 2318, 2330, 2340, 2343, 2392, 2448, 2453, 2638, 2645, 2711, 3301, 5508, 5580], [58, 770, 958, 960, 1355, 1569, 1609, 1773, 1873, 1875, 1928, 2101, 2447, 2480, 2689], [134, 1305, 1879, 2043, 2428, 2668, 2703, 2768, 3410, 3824, 4253, 4581, 4679, 4940, 5015, 5134, 5197, 5306, 5379, 5455, 6250], [169, 1450, 2593, 3696, 3778, 4382, 4491, 4566, 4821, 4896, 4979, 5103, 5110, 5190, 5236, 5494, 5516, 5649, 5761], [], [], [], [], [], [1140, 1581], [356, 582, 1229, 2299, 3298, 5021, 5953], [1611, 2199, 2478, 2674, 2677, 3273, 3351, 4676, 4798, 5269, 5272, 5456, 5807, 5876, 6284], [530, 2528, 2988, 5694, 5905], [0, 40, 46, 82, 109, 151, 187, 237, 275, 319, 418, 446, 518, 536, 566, 609, 623, 626, 645, 679, 681, 738, 741, 744, 799, 802, 878, 937, 968, 971, 1026, 1031, 1067, 1071, 1078, 1147, 1150, 1186, 1191, 1217, 1232, 1280, 1286, 1295, 1322, 1325, 1366, 1401, 1466, 1529, 1530, 1531, 1542, 1663, 1700, 1745, 1755, 1765, 1781, 1868, 1882, 1952, 1960, 1974, 2058, 2184, 2185, 2246, 2277, 2297, 2336, 2393, 2408, 2414, 2443, 2445, 2451, 2454, 2466, 2473, 2485, 2492, 2499, 2507, 2512, 2518, 2527, 2559, 2577, 2639, 2651, 2658, 2667, 2673, 2690, 2701, 2741, 2746, 2804, 2815, 2854, 2891, 2907, 2934, 2962, 2966, 2973, 2976, 3010, 3104, 3145, 3182, 3354, 3393, 3634, 3641, 3680, 5740], [699, 922, 932, 1024, 1206, 1814, 2324, 2662, 2686, 3681], [], [], [], [], [], [4495, 6133], [5, 8, 26, 57, 72, 74, 100, 129, 138, 183, 186, 205, 224, 236, 244, 251, 254, 289, 292, 298, 389, 404, 405, 424, 425, 433, 447, 471, 499, 507, 532, 534, 539, 545, 565, 571, 674, 678, 717, 724, 734, 737, 751, 832, 859, 893, 906, 911, 914, 917, 933, 951, 978, 987, 1011, 1014, 1020, 1025, 1027, 1028, 1042, 1045, 1052, 1054, 1073, 1080, 1088, 1092, 1102, 1143, 1167, 1174, 1198, 1201, 1212, 1227, 1231, 1259, 1321, 1323, 1341, 1353, 1368, 1382, 1395, 1403, 1436, 1480, 1482, 1489, 1557, 1604, 1607, 1635, 1636, 1641, 1642, 1692, 1693, 1701, 1749, 1769, 1772, 1778, 1785, 1808, 1820, 1837, 1914, 1948, 1966, 1992, 2016, 2019, 2020, 2031, 2052, 2071, 2073, 2084, 2087, 2088, 2121, 2123, 2147, 2217, 2228, 2239, 2241, 2258, 2259, 2284, 2286, 2294, 2298, 2319, 2328, 2333, 2355, 2385, 2411, 2440, 2449, 2474, 2489, 2494, 2523, 2530, 2535, 2556, 2587, 2599, 2608, 2609, 2696, 2700, 2716, 2722, 2829, 2875, 2941, 2996, 3017, 3520, 3691, 3693, 3695, 3697, 3698, 3699, 3702, 3703, 3705, 3706, 3707, 3711, 3712, 3717, 3718, 3721, 3723, 3726, 3727, 3730, 3732, 3737, 3739, 3741, 3746, 3754, 3757, 3761, 3762, 3767, 3772, 3773, 3774, 3779, 3780, 3782, 3783, 3785, 3786, 3788, 3794, 3796, 3798, 3799, 3802, 3803, 3804, 3805, 3808, 3812, 3813, 3815, 3816, 3821, 3822, 3823, 3826, 3829, 3830, 3834, 3835, 3836, 3837, 3839, 3841, 3843, 3845, 3847, 3851, 3857, 3858, 3860, 3867, 3869, 3872, 3874, 3875, 3876, 3877, 3878, 3880, 3881, 3883, 3885, 3886, 3891, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3905, 3907, 3908, 3912, 3913, 3915, 3917, 3919, 3922, 3924, 3926, 3927, 3928, 3929, 3931, 3936, 3941, 3944, 3946, 3947, 3948, 3950, 3952, 3954, 3957, 3958, 3961, 3962, 3963, 3964, 3974, 3976, 3977, 3986, 3990, 3998, 4000, 4001, 4005, 4006, 4009, 4010, 4014, 4015, 4016, 4018, 4019, 4026, 4029, 4030, 4032, 4033, 4037, 4042, 4044, 4051, 4052, 4053, 4054, 4059, 4060, 4061, 4063, 4064, 4066, 4073, 4075, 4082, 4088, 4090, 4096, 4099, 4100, 4101, 4102, 4107, 4108, 4109, 4111, 4112, 4113, 4118, 4121, 4123, 4125, 4127, 4128, 4133, 4136, 4150, 4158, 4159, 4161, 4162, 4165, 4173, 4176, 4177, 4179, 4180, 4182, 4183, 4184, 4188, 4189, 4190, 4191, 4192, 4198, 4199, 4201, 4204, 4206, 4209, 4212, 4214, 4217, 4221, 4224, 4225, 4227, 4230, 4231, 4233, 4234, 4237, 4239, 4241, 4244, 4245, 4246, 4247, 4258, 4259, 4261, 4264, 4265, 4270, 4274, 4275, 4276, 4277, 4278, 4279, 4281, 4286, 4293, 4301, 4302, 4306, 4314, 4317, 4323, 4324, 4326, 4329, 4331, 4333, 4334, 4335, 4337, 4339, 4342, 4344, 4348, 4349, 4351, 4354, 4359, 4364, 4366, 4367, 4368, 4370, 4371, 4372, 4373, 4375, 4377, 4379, 4380, 4389, 4390, 4393, 4397, 4398, 4399, 4400, 4401, 4402, 4407, 4412, 4413, 4416, 4419, 4422, 4426, 4427, 4430, 4432, 4435, 4437, 4438, 4439, 4446, 4447, 4449, 4451, 4452, 4454, 4455, 4458, 4460, 4464, 4469, 4470, 4473, 4477, 4478, 4480, 4481, 4482, 4486, 4487, 4488, 4490, 4493, 4494, 4499, 4501, 4502, 4504, 4506, 4511, 4512, 4516, 4517, 4518, 4520, 4521, 4524, 4525, 4526, 4529, 4531, 4533, 4535, 4536, 4538, 4543, 4545, 4547, 4548, 4553, 4557, 4559, 4563, 4565, 4568, 4570, 4572, 4573, 4574, 4576, 4577, 4582, 4583, 4586, 4587, 4589, 4590, 4591, 4594, 4595, 4596, 4598, 4600, 4604, 4606, 4609, 4610, 4612, 4615, 4617, 4622, 4623, 4624, 4625, 4633, 4636, 4639, 4642, 4643, 4644, 4647, 4650, 4660, 4661, 4662, 4663, 4665, 4666, 4671, 4673, 4677, 4678, 4681, 4684, 4692, 4693, 4695, 4696, 4697, 4698, 4700, 4710, 4711, 4713, 4715, 4721, 4723, 4724, 4725, 4728, 4732, 4736, 4737, 4740, 4741, 4743, 4744, 4746, 4747, 4749, 4752, 4754, 4756, 4757, 4758, 4759, 4762, 4774, 4782, 4783, 4786, 4787, 4788, 4792, 4793, 4796, 4799, 4800, 4806, 4807, 4808, 4810, 4816, 4817, 4819, 4822, 4825, 4826, 4828, 4832, 4834, 4835, 4836, 4841, 4842, 4843, 4847, 4850, 4853, 4855, 4857, 4862, 4865, 4867, 4871, 4874, 4876, 4878, 4879, 4880, 4887, 4893, 4894, 4897, 4898, 4901, 4902, 4906, 4907, 4910, 4911, 4914, 4917, 4918, 4920, 4921, 4922, 4928, 4929, 4937, 4938, 4939, 4941, 4944, 4945, 4947, 4949, 4952, 4956, 4960, 4961, 4962, 4963, 4964, 4965, 4967, 4972, 4974, 4976, 4977, 4982, 4983, 4985, 4986, 4988, 4989, 4993, 4994, 4996, 4998, 5000, 5001, 5007, 5009, 5013, 5016, 5017, 5018, 5020, 5022, 5026, 5028, 5030, 5031, 5032, 5033, 5035, 5036, 5037, 5038, 5039, 5041, 5045, 5046, 5048, 5050, 5052, 5053, 5054, 5056, 5057, 5061, 5063, 5067, 5069, 5071, 5072, 5078, 5079, 5083, 5085, 5086, 5088, 5095, 5097, 5099, 5101, 5106, 5107, 5108, 5109, 5111, 5114, 5116, 5117, 5118, 5122, 5128, 5130, 5133, 5135, 5137, 5138, 5139, 5142, 5144, 5148, 5149, 5150, 5154, 5157, 5158, 5163, 5167, 5169, 5170, 5171, 5172, 5173, 5175, 5181, 5182, 5183, 5184, 5191, 5192, 5193, 5194, 5195, 5196, 5200, 5203, 5204, 5210, 5215, 5217, 5220, 5225, 5226, 5227, 5229, 5230, 5232, 5234, 5235, 5237, 5238, 5246, 5250, 5256, 5257, 5261, 5262, 5270, 5271, 5279, 5281, 5282, 5283, 5284, 5286, 5288, 5290, 5291, 5293, 5296, 5298, 5304, 5307, 5309, 5310, 5311, 5312, 5313, 5314, 5318, 5321, 5322, 5325, 5326, 5327, 5328, 5331, 5335, 5336, 5338, 5339, 5342, 5343, 5352, 5356, 5358, 5361, 5362, 5363, 5364, 5367, 5368, 5370, 5373, 5377, 5378, 5382, 5383, 5387, 5388, 5391, 5392, 5395, 5396, 5398, 5399, 5400, 5401, 5403, 5407, 5408, 5413, 5414, 5418, 5420, 5421, 5422, 5424, 5428, 5433, 5436, 5441, 5442, 5445, 5446, 5447, 5449, 5451, 5452, 5454, 5458, 5459, 5462, 5464, 5465, 5468, 5469, 5471, 5472, 5473, 5474, 5476, 5477, 5479, 5482, 5484, 5486, 5492, 5497, 5500, 5503, 5507, 5509, 5510, 5511, 5512, 5513, 5515, 5517, 5522, 5526, 5527, 5530, 5533, 5535, 5537, 5539, 5540, 5542, 5545, 5546, 5547, 5555, 5556, 5557, 5558, 5561, 5563, 5564, 5565, 5570, 5574, 5576, 5581, 5586, 5589, 5592, 5594, 5596, 5597, 5598, 5600, 5604, 5605, 5607, 5609, 5614, 5615, 5617, 5620, 5622, 5623, 5626, 5627, 5630, 5634, 5638, 5640, 5642, 5644, 5645, 5648, 5650, 5651, 5652, 5653, 5654, 5659, 5660, 5662, 5665, 5669, 5672, 5673, 5675, 5677, 5679, 5680, 5681, 5682, 5685, 5688, 5691, 5692, 5693, 5695, 5696, 5697, 5698, 5699, 5700, 5702, 5703, 5704, 5705, 5707, 5710, 5712, 5716, 5717, 5719, 5722, 5725, 5726, 5732, 5733, 5736, 5738, 5743, 5744, 5746, 5747, 5750, 5753, 5754, 5756, 5757, 5758, 5762, 5764, 5765, 5766, 5768, 5771, 5774, 5778, 5779, 5781, 5783, 5786, 5788, 5789, 5792, 5793, 5794, 5795, 5798, 5801, 5805, 5806, 5808, 5811, 5812, 5814, 5820, 5825, 5828, 5829, 5831, 5832, 5838, 5840, 5841, 5843, 5846, 5849, 5851, 5852, 5854, 5860, 5861, 5862, 5863, 5864, 5871, 5872, 5873, 5874, 5881, 5883, 5885, 5888, 5889, 5892, 5894, 5895, 5896, 5898, 5899, 5901, 5903, 5907, 5908, 5910, 5912, 5920, 5921, 5922, 5924, 5925, 5927, 5928, 5933, 5937, 5938, 5940, 5948, 5950, 5961, 5968, 5969, 5971, 5972, 5975, 5977, 5978, 5982, 5987, 5988, 5989, 5998, 6000, 6009, 6014, 6015, 6018, 6024, 6026, 6035, 6036, 6037, 6046, 6058, 6074, 6077, 6078, 6080, 6084, 6091, 6098, 6103, 6115, 6116, 6121, 6129, 6135, 6137, 6138, 6143, 6152, 6157, 6158, 6160, 6172, 6177, 6197, 6200, 6238, 6253, 6267, 6276, 6280, 6294, 6313, 6321, 6326, 6347, 6349, 6356, 6373, 6385, 6404], [3, 9, 12, 14, 27, 28, 30, 31, 34, 37, 43, 45, 47, 53, 55, 56, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 80, 83, 85, 93, 94, 98, 104, 108, 112, 113, 114, 121, 122, 124, 130, 132, 136, 140, 142, 152, 153, 154, 155, 158, 159, 161, 162, 163, 166, 167, 175, 184, 192, 194, 203, 207, 216, 217, 221, 223, 225, 232, 235, 239, 241, 242, 245, 247, 249, 250, 265, 273, 276, 284, 287, 291, 293, 294, 310, 311, 315, 323, 331, 332, 335, 339, 340, 347, 354, 358, 360, 362, 363, 367, 368, 372, 374, 378, 385, 390, 396, 406, 407, 410, 416, 439, 443, 449, 450, 452, 453, 456, 460, 464, 466, 469, 474, 475, 477, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 506, 510, 513, 520, 521, 526, 527, 528, 529, 531, 533, 535, 538, 547, 549, 550, 552, 553, 554, 567, 568, 569, 570, 575, 577, 580, 586, 587, 588, 593, 595, 599, 602, 611, 616, 621, 622, 625, 628, 630, 632, 637, 642, 643, 650, 656, 657, 658, 660, 661, 662, 667, 668, 669, 673, 680, 682, 687, 688, 694, 695, 697, 701, 703, 705, 707, 711, 713, 714, 718, 722, 727, 728, 736, 739, 740, 752, 755, 765, 766, 768, 771, 772, 779, 780, 781, 782, 788, 790, 791, 796, 804, 805, 806, 813, 814, 815, 818, 821, 822, 831, 833, 842, 845, 853, 854, 861, 864, 869, 870, 872, 876, 877, 879, 881, 884, 888, 889, 891, 894, 896, 899, 902, 903, 905, 910, 916, 918, 925, 926, 927, 931, 939, 940, 941, 943, 955, 964, 966, 969, 979, 980, 981, 984, 986, 988, 992, 993, 995, 999, 1007, 1010, 1012, 1021, 1030, 1038, 1048, 1051, 1056, 1057, 1058, 1060, 1061, 1074, 1077, 1081, 1082, 1084, 1087, 1096, 1098, 1101, 1103, 1104, 1108, 1110, 1113, 1114, 1119, 1121, 1123, 1124, 1126, 1127, 1137, 1139, 1141, 1145, 1146, 1151, 1152, 1153, 1158, 1159, 1168, 1170, 1173, 1175, 1180, 1187, 1203, 1204, 1210, 1216, 1223, 1224, 1233, 1234, 1235, 1236, 1245, 1252, 1253, 1257, 1262, 1265, 1269, 1270, 1276, 1278, 1281, 1284, 1287, 1294, 1302, 1304, 1310, 1311, 1312, 1315, 1328, 1331, 1332, 1333, 1340, 1345, 1351, 1352, 1357, 1362, 1363, 1365, 1367, 1369, 1370, 1371, 1372, 1377, 1379, 1389, 1397, 1399, 1402, 1404, 1406, 1408, 1409, 1410, 1411, 1415, 1418, 1421, 1425, 1432, 1435, 1437, 1438, 1439, 1440, 1443, 1444, 1446, 1447, 1455, 1456, 1458, 1462, 1468, 1472, 1476, 1477, 1481, 1485, 1488, 1490, 1493, 1494, 1495, 1496, 1497, 1502, 1508, 1511, 1513, 1514, 1515, 1524, 1525, 1527, 1534, 1535, 1543, 1548, 1556, 1559, 1560, 1561, 1568, 1570, 1573, 1575, 1578, 1580, 1582, 1584, 1585, 1586, 1589, 1594, 1596, 1605, 1606, 1617, 1618, 1619, 1621, 1622, 1624, 1626, 1643, 1647, 1648, 1649, 1650, 1653, 1654, 1655, 1656, 1658, 1670, 1673, 1677, 1678, 1683, 1687, 1688, 1696, 1698, 1703, 1705, 1716, 1717, 1721, 1723, 1726, 1727, 1728, 1730, 1737, 1739, 1744, 1747, 1748, 1764, 1771, 1776, 1787, 1788, 1797, 1801, 1806, 1809, 1813, 1815, 1817, 1819, 1821, 1822, 1828, 1834, 1848, 1850, 1853, 1857, 1858, 1863, 1864, 1870, 1883, 1889, 1892, 1893, 1895, 1902, 1904, 1908, 1917, 1918, 1920, 1921, 1922, 1924, 1925, 1929, 1932, 1935, 1954, 1957, 1962, 1964, 1967, 1969, 1977, 1980, 1981, 1987, 1988, 1993, 1996, 2011, 2015, 2021, 2025, 2035, 2036, 2038, 2042, 2045, 2046, 2049, 2053, 2055, 2057, 2062, 2063, 2064, 2065, 2067, 2072, 2075, 2077, 2078, 2082, 2086, 2094, 2096, 2097, 2098, 2103, 2112, 2114, 2116, 2124, 2125, 2128, 2134, 2135, 2145, 2149, 2155, 2156, 2157, 2158, 2160, 2162, 2165, 2173, 2177, 2178, 2179, 2183, 2187, 2188, 2189, 2195, 2202, 2203, 2204, 2210, 2214, 2223, 2224, 2226, 2233, 2236, 2240, 2247, 2251, 2261, 2266, 2271, 2275, 2283, 2285, 2292, 2302, 2304, 2309, 2310, 2321, 2322, 2325, 2329, 2338, 2342, 2344, 2351, 2353, 2354, 2357, 2365, 2366, 2368, 2371, 2373, 2375, 2379, 2382, 2387, 2388, 2390, 2395, 2396, 2400, 2403, 2412, 2415, 2417, 2422, 2429, 2431, 2435, 2436, 2437, 2457, 2460, 2461, 2464, 2465, 2468, 2469, 2470, 2471, 2477, 2479, 2481, 2486, 2488, 2508, 2509, 2515, 2519, 2521, 2524, 2525, 2529, 2533, 2534, 2537, 2538, 2540, 2554, 2557, 2560, 2561, 2562, 2568, 2570, 2572, 2574, 2578, 2585, 2592, 2595, 2598, 2601, 2610, 2612, 2619, 2621, 2625, 2629, 2633, 2641, 2644, 2652, 2654, 2655, 2657, 2660, 2663, 2665, 2666, 2685, 2691, 2692, 2697, 2702, 2707, 2709, 2715, 2720, 2724, 2726, 2728, 2729, 2733, 2740, 2742, 2747, 2749, 2755, 2757, 2760, 2762, 2778, 2779, 2780, 2781, 2783, 2786, 2789, 2794, 2795, 2796, 2801, 2802, 2810, 2819, 2822, 2824, 2837, 2839, 2840, 2849, 2850, 2864, 2877, 2878, 2885, 2886, 2893, 2895, 2906, 2908, 2913, 2915, 2919, 2937, 2943, 2944, 2945, 2951, 2958, 2972, 2978, 2987, 2989, 2991, 2997, 3000, 3002, 3004, 3005, 3014, 3018, 3021, 3025, 3033, 3043, 3044, 3048, 3057, 3072, 3089, 3143, 3208, 3212, 3216, 3265, 3294, 3450, 3453, 3490, 3504, 3525, 3533, 3540, 3544, 3565, 3573, 3577, 3593, 3603, 3623, 3638, 3661, 3670, 3673, 3682, 3686, 3690, 4336, 4981, 5047, 5359, 5393], [573, 1069, 1566, 2386, 2531, 2606, 2761, 2855, 2982, 3266, 3462, 3643, 3776, 3862, 4105, 4181, 4709, 4770, 4849, 5145, 5277, 5385, 5976, 6063], [48, 511, 723, 1264, 1551, 1552, 1662, 1732, 1862, 2056, 2764, 3268, 3452, 3668, 3764, 3934, 4635, 4708, 4730, 4923, 4955, 4971, 5104, 5125, 5417, 5481, 5536, 5666, 5689, 5709, 5835], [119, 1162, 1177, 1258, 2079, 3633, 3710, 3760, 3790, 3850, 4094, 4731, 4742, 4771, 4780, 4784, 4809, 5354, 5498, 5538, 5639, 5655, 5674, 5737, 5813, 5816, 5842, 5869, 5915, 6050], [], [], [], [], [], [], [116, 257, 348, 479, 936, 1866, 2359, 2381, 2714, 3095, 3299, 3560, 3911, 5317], [156, 157, 204, 252, 473, 750, 990, 1142, 1185, 1327, 1479, 1505, 2010, 2032, 2144, 2164, 2170, 2293, 2383, 2389, 2397, 2423, 2462, 2497, 2517, 2634, 2635, 2637, 2767, 3051, 3055, 3064, 3091, 3098, 3099, 3101, 3107, 3108, 3110, 3115, 3128, 3181, 3205, 3217, 3218, 3220, 3223, 3225, 3226, 3235, 3249, 3256, 3257, 3269, 3270, 3271, 3272, 3274, 3278, 3279, 3283, 3284, 3291, 3296, 3302, 3306, 3307, 3311, 3313, 3319, 3321, 3333, 3336, 3339, 3341, 3343, 3344, 3345, 3348, 3349, 3350, 3353, 3356, 3357, 3363, 3364, 3365, 3368, 3370, 3378, 3384, 3413, 3436, 3439, 3445, 3446, 3454, 3458, 3464, 3483, 3499, 3501, 3508, 3519, 3592, 3609, 3619, 3654, 3676, 4925, 5350, 5506, 5752, 6232, 6233, 6246, 6299], [39, 54, 798, 800, 808, 2196, 2352, 2399, 2442, 2516, 3096, 3131, 3214, 3219, 3230, 3261, 3264, 3267, 3275, 3282, 3286, 3289, 3293, 3297, 3300, 3304, 3316, 3325, 3327, 3347, 3352, 3358, 3367, 3371, 3383, 3411, 3442, 3460, 3500, 3583, 3649, 4845, 5034, 5098, 6020], [297, 327, 924, 2232, 2402, 2816, 3704, 3758, 3791, 4039, 4292, 4307, 4365, 4436, 4578, 4629, 4689, 4707, 4735, 5267, 5275, 5302, 5483, 5499, 5502, 5587, 5629, 5667, 6150, 6244, 6378], [7, 38, 61, 73, 79, 105, 127, 172, 176, 191, 198, 231, 234, 285, 303, 312, 324, 336, 346, 351, 375, 387, 392, 402, 420, 426, 465, 485, 503, 546, 555, 559, 560, 572, 629, 651, 675, 690, 691, 704, 709, 725, 824, 837, 838, 866, 904, 929, 950, 953, 1000, 1017, 1033, 1053, 1055, 1072, 1085, 1089, 1166, 1181, 1193, 1213, 1228, 1239, 1272, 1273, 1277, 1346, 1350, 1407, 1424, 1445, 1459, 1461, 1474, 1501, 1517, 1522, 1539, 1563, 1576, 1610, 1657, 1674, 1686, 1709, 1767, 1770, 1792, 1854, 1884, 1887, 1891, 1944, 1971, 1995, 2028, 2150, 2171, 2175, 2198, 2206, 2220, 2260, 2263, 2291, 2296, 2301, 2317, 2341, 2345, 2358, 2361, 2420, 2501, 2503, 2504, 2510, 2536, 2545, 2550, 2551, 2558, 2563, 2569, 2573, 2583, 2586, 2591, 2603, 2607, 2617, 2659, 2710, 2713, 2725, 2735, 2756, 2773, 2799, 2803, 2806, 2807, 2811, 2814, 2817, 2831, 2846, 2861, 2869, 2870, 2872, 2894, 2918, 2920, 2927, 2938, 2947, 2948, 2953, 2990, 3009, 3060, 3080, 3090, 3134, 3140, 3144, 3165, 3166, 3174, 3177, 3188, 3197, 3202, 3221, 3222, 3237, 3251, 3255, 3258, 3260, 3276, 3281, 3292, 3308, 3324, 3332, 3359, 3362, 3419, 3431, 3433, 3467, 3468, 3485, 3486, 3505, 3515, 3524, 3527, 3545, 3556, 3558, 3575, 3580, 3605, 3613, 3627, 3639, 3653, 3655, 3678, 3687], [2, 133, 214, 726, 1035, 1373, 1681, 1825, 1930, 2219, 2279, 2426, 2643, 2683, 2979, 2980, 2995, 3213, 3215, 3231, 3571, 4621, 4934, 5735, 6252, 6255, 6320], [], [], [], [], [], [], [126, 3935, 3993, 4050, 4156, 4420, 4851, 4932, 5248, 5409, 5628, 5755, 5836, 5955, 6112, 6194, 6290, 6355, 6372, 6393], [6, 11, 15, 17, 18, 19, 20, 22, 23, 24, 25, 29, 35, 36, 41, 42, 50, 59, 71, 76, 77, 81, 84, 86, 95, 101, 102, 110, 118, 120, 123, 125, 135, 137, 139, 145, 147, 148, 160, 164, 165, 173, 174, 177, 188, 189, 190, 193, 195, 196, 197, 199, 200, 201, 206, 209, 219, 220, 222, 226, 228, 233, 238, 240, 243, 246, 248, 258, 260, 261, 262, 274, 282, 286, 288, 290, 295, 300, 301, 302, 304, 305, 306, 307, 308, 309, 313, 314, 316, 317, 318, 320, 321, 322, 325, 326, 329, 330, 333, 334, 338, 341, 342, 343, 344, 345, 349, 350, 353, 355, 359, 361, 364, 365, 366, 369, 370, 373, 376, 377, 379, 380, 381, 382, 383, 384, 386, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 408, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 448, 451, 454, 455, 457, 458, 459, 461, 462, 463, 467, 468, 470, 472, 478, 492, 493, 496, 501, 502, 504, 505, 508, 509, 512, 514, 515, 516, 517, 519, 522, 523, 524, 537, 540, 541, 542, 543, 548, 551, 556, 557, 558, 561, 563, 574, 576, 579, 581, 583, 584, 585, 589, 591, 592, 596, 597, 598, 601, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 617, 618, 619, 620, 624, 627, 631, 634, 635, 638, 639, 641, 644, 646, 648, 649, 652, 653, 655, 659, 663, 665, 670, 671, 676, 677, 683, 685, 686, 689, 692, 696, 698, 700, 702, 706, 708, 712, 715, 716, 719, 720, 721, 729, 731, 732, 733, 735, 742, 743, 746, 747, 748, 749, 753, 754, 756, 758, 759, 761, 762, 763, 764, 767, 773, 775, 776, 784, 789, 792, 794, 795, 797, 803, 807, 809, 810, 811, 812, 816, 817, 820, 823, 825, 826, 827, 828, 829, 830, 835, 836, 839, 840, 843, 844, 848, 849, 850, 852, 855, 856, 857, 858, 860, 862, 863, 865, 867, 868, 871, 873, 874, 875, 880, 882, 886, 887, 890, 895, 897, 898, 901, 907, 908, 912, 915, 919, 920, 923, 930, 934, 935, 938, 942, 946, 947, 948, 957, 959, 961, 962, 967, 972, 973, 975, 977, 983, 985, 989, 991, 994, 996, 997, 1001, 1003, 1005, 1013, 1015, 1016, 1018, 1019, 1029, 1041, 1044, 1046, 1047, 1049, 1062, 1066, 1068, 1076, 1079, 1083, 1086, 1090, 1091, 1093, 1094, 1097, 1105, 1107, 1109, 1112, 1115, 1116, 1117, 1118, 1120, 1122, 1128, 1131, 1132, 1144, 1148, 1160, 1179, 1183, 1190, 1199, 1207, 1208, 1211, 1214, 1215, 1218, 1220, 1221, 1222, 1230, 1237, 1240, 1241, 1243, 1244, 1248, 1249, 1268, 1271, 1275, 1289, 1293, 1297, 1298, 1299, 1300, 1301, 1306, 1307, 1308, 1314, 1316, 1324, 1326, 1329, 1334, 1335, 1336, 1337, 1338, 1339, 1342, 1343, 1349, 1354, 1364, 1376, 1383, 1396, 1398, 1405, 1412, 1413, 1414, 1416, 1426, 1428, 1433, 1434, 1448, 1451, 1453, 1454, 1463, 1465, 1467, 1470, 1478, 1484, 1486, 1487, 1491, 1499, 1500, 1507, 1509, 1510, 1512, 1521, 1523, 1532, 1533, 1537, 1538, 1540, 1541, 1562, 1571, 1572, 1588, 1590, 1592, 1595, 1597, 1600, 1601, 1603, 1615, 1628, 1629, 1630, 1631, 1632, 1633, 1638, 1639, 1645, 1659, 1661, 1665, 1669, 1671, 1675, 1676, 1679, 1680, 1682, 1684, 1695, 1697, 1710, 1711, 1719, 1720, 1725, 1733, 1734, 1742, 1743, 1768, 1775, 1777, 1783, 1786, 1790, 1798, 1799, 1803, 1804, 1805, 1807, 1810, 1812, 1816, 1818, 1823, 1824, 1826, 1830, 1835, 1841, 1842, 1843, 1844, 1845, 1847, 1849, 1851, 1852, 1855, 1856, 1859, 1867, 1876, 1877, 1880, 1881, 1890, 1898, 1905, 1907, 1915, 1916, 1919, 1927, 1933, 1934, 1946, 1949, 1950, 1955, 1956, 1963, 1965, 1968, 1970, 1973, 1979, 1982, 1983, 1984, 1986, 1990, 1991, 1997, 2000, 2002, 2004, 2007, 2012, 2014, 2017, 2018, 2022, 2024, 2026, 2030, 2034, 2044, 2047, 2048, 2050, 2051, 2054, 2059, 2060, 2081, 2085, 2092, 2099, 2102, 2108, 2109, 2113, 2115, 2117, 2119, 2120, 2126, 2127, 2129, 2130, 2131, 2136, 2137, 2139, 2141, 2146, 2148, 2151, 2159, 2163, 2166, 2167, 2174, 2176, 2180, 2182, 2191, 2192, 2193, 2207, 2209, 2211, 2213, 2215, 2216, 2218, 2222, 2227, 2229, 2231, 2234, 2235, 2237, 2238, 2244, 2255, 2265, 2267, 2268, 2269, 2270, 2273, 2274, 2276, 2278, 2280, 2288, 2289, 2295, 2300, 2303, 2306, 2308, 2311, 2312, 2314, 2315, 2320, 2323, 2331, 2335, 2337, 2339, 2346, 2348, 2349, 2350, 2356, 2360, 2362, 2363, 2364, 2367, 2369, 2372, 2376, 2384, 2391, 2398, 2409, 2410, 2413, 2416, 2419, 2424, 2425, 2430, 2433, 2438, 2439, 2441, 2446, 2450, 2452, 2456, 2458, 2463, 2467, 2476, 2482, 2483, 2487, 2493, 2498, 2502, 2506, 2511, 2513, 2514, 2526, 2532, 2541, 2542, 2543, 2546, 2548, 2549, 2552, 2553, 2555, 2565, 2566, 2567, 2571, 2575, 2576, 2579, 2580, 2581, 2582, 2584, 2588, 2589, 2594, 2596, 2597, 2600, 2602, 2604, 2605, 2611, 2614, 2616, 2618, 2622, 2623, 2624, 2627, 2628, 2630, 2632, 2640, 2642, 2647, 2648, 2650, 2653, 2656, 2661, 2670, 2671, 2676, 2678, 2679, 2680, 2684, 2687, 2693, 2695, 2698, 2699, 2704, 2705, 2706, 2712, 2717, 2719, 2721, 2723, 2727, 2730, 2732, 2734, 2736, 2738, 2743, 2744, 2745, 2748, 2750, 2752, 2753, 2754, 2758, 2759, 2763, 2765, 2766, 2769, 2770, 2771, 2772, 2774, 2775, 2776, 2777, 2782, 2784, 2785, 2787, 2788, 2790, 2791, 2792, 2793, 2797, 2798, 2800, 2808, 2809, 2812, 2813, 2820, 2821, 2823, 2825, 2826, 2827, 2830, 2832, 2833, 2834, 2835, 2836, 2838, 2841, 2842, 2844, 2845, 2847, 2848, 2851, 2852, 2853, 2856, 2857, 2858, 2862, 2863, 2865, 2866, 2867, 2868, 2871, 2873, 2874, 2876, 2879, 2881, 2882, 2883, 2884, 2887, 2888, 2889, 2890, 2892, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2905, 2910, 2911, 2912, 2914, 2916, 2917, 2921, 2922, 2923, 2924, 2925, 2926, 2928, 2929, 2930, 2931, 2932, 2933, 2935, 2936, 2939, 2940, 2942, 2946, 2949, 2950, 2952, 2954, 2955, 2956, 2957, 2959, 2960, 2961, 2963, 2964, 2965, 2967, 2968, 2969, 2970, 2971, 2974, 2977, 2981, 2983, 2984, 2985, 2986, 2992, 2993, 2994, 2998, 2999, 3003, 3006, 3007, 3008, 3011, 3012, 3013, 3015, 3016, 3019, 3020, 3022, 3023, 3026, 3028, 3029, 3030, 3032, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3045, 3046, 3047, 3049, 3050, 3052, 3053, 3054, 3056, 3058, 3059, 3061, 3062, 3063, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3073, 3074, 3075, 3076, 3077, 3079, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3092, 3093, 3097, 3100, 3102, 3103, 3105, 3106, 3111, 3112, 3113, 3114, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3125, 3126, 3127, 3129, 3130, 3132, 3133, 3136, 3137, 3138, 3139, 3141, 3142, 3146, 3147, 3148, 3149, 3150, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3162, 3163, 3164, 3167, 3168, 3170, 3171, 3172, 3173, 3175, 3176, 3179, 3180, 3183, 3184, 3185, 3186, 3187, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3198, 3199, 3200, 3201, 3203, 3204, 3206, 3207, 3209, 3210, 3211, 3224, 3227, 3228, 3232, 3233, 3234, 3236, 3238, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3250, 3253, 3254, 3259, 3262, 3285, 3287, 3288, 3290, 3295, 3303, 3305, 3309, 3310, 3312, 3314, 3315, 3318, 3320, 3323, 3328, 3329, 3331, 3334, 3337, 3338, 3346, 3355, 3360, 3366, 3369, 3372, 3373, 3374, 3375, 3376, 3377, 3379, 3380, 3381, 3382, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3409, 3412, 3414, 3415, 3416, 3417, 3418, 3420, 3421, 3422, 3423, 3428, 3430, 3432, 3434, 3435, 3437, 3438, 3440, 3441, 3443, 3444, 3447, 3448, 3449, 3451, 3455, 3456, 3457, 3459, 3461, 3463, 3465, 3466, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3484, 3487, 3488, 3491, 3492, 3494, 3495, 3496, 3498, 3502, 3503, 3506, 3507, 3509, 3510, 3511, 3512, 3513, 3516, 3517, 3518, 3521, 3522, 3523, 3526, 3528, 3530, 3531, 3532, 3534, 3535, 3537, 3538, 3541, 3542, 3546, 3547, 3548, 3549, 3551, 3552, 3553, 3554, 3555, 3557, 3559, 3561, 3562, 3564, 3567, 3568, 3569, 3570, 3572, 3574, 3578, 3579, 3581, 3582, 3584, 3585, 3587, 3588, 3589, 3590, 3591, 3594, 3595, 3596, 3597, 3598, 3600, 3601, 3602, 3604, 3607, 3608, 3610, 3611, 3612, 3614, 3615, 3616, 3617, 3618, 3620, 3621, 3622, 3624, 3625, 3626, 3628, 3629, 3630, 3631, 3632, 3635, 3636, 3640, 3642, 3644, 3645, 3646, 3647, 3648, 3650, 3652, 3656, 3657, 3658, 3659, 3660, 3662, 3663, 3664, 3665, 3666, 3669, 3671, 3672, 3675, 3677, 3683, 3684, 3685, 3688, 3689, 3692, 3694, 3700, 3701, 3708, 3709, 3713, 3715, 3719, 3720, 3722, 3724, 3725, 3728, 3729, 3733, 3734, 3735, 3736, 3738, 3740, 3742, 3743, 3744, 3745, 3747, 3749, 3750, 3751, 3752, 3753, 3755, 3756, 3759, 3763, 3765, 3766, 3768, 3769, 3771, 3775, 3777, 3781, 3787, 3789, 3793, 3795, 3797, 3801, 3806, 3807, 3809, 3810, 3811, 3814, 3817, 3825, 3827, 3828, 3831, 3832, 3833, 3838, 3840, 3842, 3844, 3848, 3849, 3852, 3854, 3855, 3856, 3859, 3861, 3863, 3864, 3865, 3866, 3868, 3870, 3873, 3879, 3884, 3887, 3888, 3889, 3890, 3892, 3893, 3902, 3903, 3909, 3910, 3914, 3916, 3918, 3920, 3921, 3923, 3925, 3930, 3939, 3940, 3942, 3943, 3949, 3951, 3953, 3955, 3956, 3959, 3960, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3975, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3987, 3988, 3989, 3991, 3992, 3994, 3995, 3996, 3997, 3999, 4002, 4003, 4004, 4007, 4008, 4011, 4012, 4013, 4017, 4021, 4022, 4023, 4024, 4025, 4027, 4028, 4031, 4034, 4035, 4036, 4038, 4040, 4041, 4043, 4046, 4047, 4048, 4049, 4055, 4056, 4057, 4058, 4062, 4065, 4067, 4068, 4069, 4070, 4071, 4072, 4074, 4076, 4077, 4078, 4079, 4080, 4081, 4083, 4084, 4085, 4086, 4087, 4089, 4091, 4092, 4093, 4095, 4097, 4098, 4103, 4104, 4106, 4110, 4114, 4115, 4116, 4117, 4119, 4120, 4122, 4124, 4126, 4129, 4130, 4131, 4132, 4134, 4135, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4151, 4152, 4153, 4154, 4155, 4157, 4160, 4163, 4164, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4174, 4175, 4178, 4185, 4187, 4193, 4194, 4195, 4196, 4197, 4200, 4202, 4203, 4205, 4207, 4208, 4210, 4211, 4213, 4215, 4216, 4218, 4219, 4220, 4222, 4223, 4226, 4228, 4229, 4232, 4235, 4236, 4238, 4240, 4242, 4243, 4248, 4249, 4250, 4251, 4252, 4254, 4255, 4256, 4257, 4260, 4262, 4263, 4266, 4267, 4268, 4269, 4272, 4273, 4280, 4282, 4283, 4284, 4285, 4287, 4288, 4289, 4290, 4291, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4303, 4304, 4305, 4308, 4309, 4310, 4311, 4312, 4313, 4315, 4316, 4318, 4319, 4320, 4321, 4322, 4325, 4327, 4328, 4330, 4332, 4340, 4341, 4343, 4345, 4346, 4347, 4350, 4352, 4353, 4355, 4356, 4358, 4360, 4361, 4362, 4363, 4369, 4374, 4376, 4378, 4381, 4383, 4384, 4385, 4386, 4387, 4388, 4391, 4392, 4394, 4395, 4396, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4414, 4415, 4417, 4418, 4421, 4423, 4424, 4425, 4428, 4429, 4431, 4433, 4434, 4440, 4441, 4442, 4443, 4444, 4445, 4448, 4450, 4453, 4456, 4457, 4459, 4461, 4462, 4463, 4465, 4466, 4467, 4468, 4471, 4472, 4474, 4475, 4476, 4479, 4483, 4485, 4489, 4492, 4496, 4497, 4498, 4500, 4503, 4505, 4507, 4508, 4509, 4510, 4513, 4514, 4515, 4519, 4522, 4523, 4527, 4528, 4534, 4539, 4540, 4541, 4542, 4544, 4546, 4549, 4550, 4551, 4552, 4554, 4555, 4556, 4558, 4561, 4562, 4564, 4567, 4569, 4571, 4575, 4579, 4580, 4584, 4585, 4588, 4592, 4593, 4597, 4599, 4601, 4603, 4605, 4607, 4608, 4611, 4613, 4614, 4616, 4618, 4619, 4620, 4626, 4627, 4628, 4630, 4632, 4634, 4637, 4640, 4641, 4645, 4646, 4651, 4652, 4653, 4654, 4655, 4659, 4664, 4668, 4669, 4670, 4672, 4675, 4680, 4682, 4683, 4685, 4686, 4687, 4688, 4691, 4694, 4699, 4701, 4702, 4703, 4704, 4705, 4706, 4714, 4716, 4717, 4719, 4720, 4722, 4726, 4727, 4729, 4733, 4738, 4739, 4745, 4748, 4750, 4753, 4755, 4760, 4761, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4772, 4773, 4775, 4779, 4781, 4785, 4789, 4790, 4791, 4794, 4795, 4797, 4801, 4805, 4811, 4812, 4814, 4815, 4818, 4820, 4823, 4824, 4827, 4829, 4830, 4831, 4833, 4837, 4838, 4839, 4840, 4844, 4846, 4848, 4856, 4858, 4859, 4863, 4864, 4866, 4868, 4869, 4870, 4872, 4873, 4875, 4877, 4881, 4882, 4883, 4884, 4885, 4886, 4895, 4899, 4900, 4903, 4904, 4905, 4908, 4909, 4912, 4913, 4915, 4919, 4924, 4926, 4927, 4930, 4931, 4933, 4935, 4936, 4942, 4943, 4946, 4948, 4950, 4954, 4957, 4958, 4959, 4966, 4968, 4969, 4970, 4973, 4975, 4978, 4980, 4984, 4987, 4991, 4992, 4995, 4997, 5002, 5003, 5004, 5011, 5012, 5014, 5019, 5023, 5024, 5025, 5027, 5040, 5042, 5043, 5044, 5049, 5055, 5060, 5062, 5064, 5065, 5066, 5068, 5070, 5073, 5075, 5076, 5077, 5082, 5084, 5087, 5089, 5090, 5091, 5092, 5093, 5094, 5096, 5100, 5105, 5112, 5113, 5115, 5119, 5120, 5121, 5126, 5127, 5129, 5131, 5132, 5136, 5140, 5141, 5143, 5147, 5153, 5155, 5156, 5159, 5160, 5161, 5162, 5164, 5165, 5166, 5168, 5176, 5177, 5178, 5179, 5180, 5185, 5186, 5187, 5188, 5189, 5198, 5201, 5202, 5205, 5206, 5207, 5208, 5209, 5211, 5212, 5213, 5214, 5216, 5218, 5219, 5221, 5223, 5231, 5233, 5239, 5240, 5241, 5242, 5243, 5247, 5249, 5251, 5252, 5253, 5254, 5255, 5258, 5259, 5260, 5263, 5265, 5266, 5268, 5274, 5278, 5280, 5285, 5287, 5289, 5292, 5294, 5295, 5297, 5299, 5300, 5308, 5315, 5316, 5319, 5320, 5329, 5330, 5332, 5333, 5334, 5337, 5340, 5341, 5344, 5345, 5346, 5347, 5348, 5349, 5353, 5355, 5357, 5360, 5365, 5366, 5371, 5372, 5375, 5376, 5380, 5381, 5384, 5386, 5389, 5390, 5397, 5402, 5405, 5406, 5410, 5411, 5412, 5415, 5419, 5423, 5425, 5426, 5427, 5429, 5430, 5434, 5435, 5437, 5438, 5439, 5440, 5443, 5448, 5450, 5453, 5457, 5461, 5463, 5466, 5467, 5470, 5475, 5478, 5480, 5487, 5488, 5489, 5490, 5491, 5493, 5495, 5504, 5505, 5514, 5518, 5519, 5520, 5521, 5523, 5524, 5525, 5528, 5532, 5541, 5543, 5544, 5548, 5549, 5550, 5551, 5553, 5554, 5559, 5560, 5566, 5567, 5568, 5569, 5571, 5572, 5573, 5575, 5577, 5578, 5582, 5583, 5584, 5585, 5590, 5591, 5593, 5595, 5599, 5601, 5602, 5603, 5606, 5608, 5610, 5611, 5613, 5616, 5618, 5621, 5624, 5625, 5631, 5632, 5635, 5637, 5641, 5643, 5646, 5647, 5656, 5657, 5658, 5661, 5663, 5664, 5668, 5670, 5671, 5676, 5678, 5683, 5684, 5686, 5687, 5701, 5706, 5708, 5711, 5713, 5714, 5715, 5718, 5720, 5721, 5724, 5728, 5729, 5730, 5731, 5734, 5739, 5741, 5742, 5745, 5748, 5749, 5751, 5759, 5760, 5763, 5767, 5769, 5770, 5772, 5773, 5775, 5776, 5777, 5780, 5782, 5784, 5785, 5787, 5790, 5791, 5796, 5797, 5799, 5800, 5802, 5803, 5804, 5809, 5810, 5815, 5817, 5818, 5819, 5821, 5822, 5823, 5824, 5826, 5827, 5830, 5833, 5834, 5837, 5839, 5844, 5845, 5847, 5848, 5850, 5853, 5855, 5856, 5857, 5858, 5859, 5865, 5866, 5868, 5870, 5875, 5877, 5878, 5879, 5882, 5886, 5887, 5890, 5891, 5893, 5897, 5900, 5902, 5904, 5906, 5909, 5911, 5913, 5914, 5916, 5917, 5918, 5919, 5923, 5926, 5929, 5930, 5931, 5932, 5934, 5935, 5936, 5939, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5949, 5952, 5954, 5956, 5957, 5958, 5959, 5962, 5963, 5964, 5965, 5966, 5967, 5970, 5973, 5974, 5979, 5980, 5981, 5983, 5984, 5985, 5986, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5999, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6010, 6011, 6012, 6013, 6016, 6017, 6019, 6021, 6022, 6023, 6025, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6047, 6048, 6049, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6059, 6060, 6061, 6062, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6075, 6076, 6079, 6081, 6082, 6083, 6085, 6086, 6087, 6088, 6089, 6090, 6092, 6093, 6094, 6095, 6096, 6097, 6099, 6100, 6101, 6102, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6113, 6114, 6117, 6118, 6119, 6120, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6130, 6131, 6132, 6134, 6136, 6139, 6140, 6141, 6142, 6144, 6145, 6146, 6147, 6148, 6151, 6153, 6154, 6156, 6159, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6173, 6175, 6176, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6195, 6196, 6198, 6199, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6234, 6235, 6236, 6237, 6239, 6240, 6241, 6242, 6243, 6245, 6247, 6248, 6249, 6251, 6254, 6256, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6277, 6278, 6279, 6281, 6282, 6283, 6285, 6286, 6287, 6288, 6289, 6292, 6295, 6296, 6297, 6298, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6314, 6315, 6316, 6317, 6318, 6322, 6323, 6324, 6325, 6327, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6348, 6350, 6351, 6352, 6353, 6354, 6357, 6358, 6359, 6360, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6374, 6375, 6376, 6377, 6379, 6380, 6381, 6382, 6383, 6384, 6386, 6387, 6388, 6390, 6391, 6392, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419], [4, 16, 21, 44, 106, 128, 131, 168, 256, 283, 296, 544, 562, 564, 672, 684, 757, 783, 847, 883, 913, 945, 965, 1100, 1106, 1154, 1188, 1267, 1291, 1348, 1429, 1483, 1504, 1625, 1706, 1715, 1736, 1741, 1762, 1780, 1784, 1802, 1985, 1994, 2013, 2040, 2093, 2154, 2168, 2221, 2253, 2256, 2313, 2405, 2427, 2432, 2495, 2500, 2547, 2626, 2646, 2649, 2708, 2731, 2739, 2751, 2828, 2904, 3024, 3027, 3031, 3078, 3124, 3151, 3229, 3277, 3330, 3342, 3497, 3514, 3536, 3550, 3566, 3586], [75, 578, 1189, 1746, 2242, 2378, 2975, 3361, 3427], [32, 115, 171, 202, 281, 328, 1039, 1149, 1182, 1380, 1558, 1640, 1731, 1758, 1840, 2095, 2264, 2334, 2444, 2490, 2505, 2669, 3135, 3280, 3637, 3667, 3978, 4186, 4999, 5394, 5619, 5636, 6291, 6319, 6361], [3161, 3714, 5531, 5727, 5880, 6164, 6257, 6293, 6389], []]))

    def test_with_sym_oct_not_positive_maxOccupy(self):
        return_new = fu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'oct1')
        return_old = oldfu.balance_angular_distribution(self.params, max_occupy = -1, angstep = self.angstep, sym= 'oct1')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new

    def test_with_empty_list(self):
        return_new = fu.balance_angular_distribution([], max_occupy = -1, angstep = self.angstep, sym= 'c5')
        return_old = oldfu.balance_angular_distribution([], max_occupy = -1, angstep = self.angstep, sym= 'c5')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]))

    def test_with_null_angstepy_error_msg(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.balance_angular_distribution(self.params, max_occupy = -1, angstep = 0, sym= 'c5')
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.balance_angular_distribution(self.params, max_occupy = -1, angstep = 0, sym= 'c5')
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c5_positive_maxOccupy_not_testabel(self):
        """
        It use to process random value that lead the function to returns always different va;ues
        """
        self.assertTrue(True)
        """
        return_new = fu.balance_angular_distribution(deepcopy(self.params), max_occupy = 1, angstep = self.angstep, sym= 'c5')
        return_old = oldfu.balance_angular_distribution(deepcopy(self.params), max_occupy = 1, angstep = self.angstep, sym= 'c5')
        self.assertTrue(numpy.array_equal(return_new, return_old))
        """


class Test_symmetry_neighbors(unittest.TestCase):
    angles = [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.symmetry_neighbors()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.symmetry_neighbors()
        self.assertEqual(cm_new.exception.message, "symmetry_neighbors() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_empty_list_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.symmetry_neighbors([] , symmetry= "c1")
        return_old = oldfu.symmetry_neighbors([], symmetry= "c1")
        self.assertTrue(numpy.array_equal(return_new, return_old))
        """

    def test_with_less_angles_returns_RuntimeError_3_angles_are_required(self):
        angles=[[0.1],[21.1],[30.11],[1.1]]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.symmetry_neighbors(angles , symmetry= "c1")
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.symmetry_neighbors(angles , symmetry= "c1")
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "InvalidValueException")
        self.assertEqual(msg[3], "Three angles are required")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_sym_c1(self):
        return_new = fu.symmetry_neighbors(self.angles , symmetry= "c1")
        return_old = oldfu.symmetry_neighbors(self.angles , symmetry= "c1")
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]))

    def test_with_sym_c5(self):
        return_new = fu.symmetry_neighbors(self.angles , symmetry= "c5")
        return_old = oldfu.symmetry_neighbors(self.angles , symmetry= "c5")
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0.0, 0.0, 1.0], [72.0, 0.0, 1.0], [288.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [72.680419921875, 0.6526213884353638, 0.3333333432674408], [288.680419921875, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [71.589599609375, 0.8487909436225891, 0.3333333432674408], [287.589599609375, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [71.06591796875, -0.12803982198238373, 0.3333333432674408], [287.06591796875, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [71.8331298828125, -0.927923858165741, 0.3333333432674408], [287.8331298828125, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [72.8309326171875, -0.4454488158226013, 0.3333333432674408], [288.8309326171875, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [72.0, 7.64274186065882e-15, -1.0], [288.0, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [72.93408203125, 0.12803970277309418, -0.3333333134651184], [288.93408203125, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [72.1668701171875, 0.927923858165741, -0.3333333134651184], [288.1668701171875, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [71.1690673828125, 0.44544869661331177, -0.3333333134651184], [287.1690673828125, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [71.319580078125, -0.652621328830719, -0.3333333134651184], [287.319580078125, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184], [72.410400390625, -0.8487908840179443, -0.3333333134651184], [288.410400390625, -0.8487908840179443, -0.3333333134651184]]))

    def test_with_sym_d1(self):
        return_new = fu.symmetry_neighbors(self.angles , symmetry= "d1")
        return_old = oldfu.symmetry_neighbors(self.angles , symmetry= "d1")
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0.0, 0.0, 1.0], [0.0, 180.0, 181.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [359.319580078125, 179.34738159179688, 180.3333282470703], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [0.410430908203125, 179.15121459960938, 180.3333282470703], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [0.93408203125, 180.12803649902344, 180.3333282470703], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.1668701171875, 180.92791748046875, 180.3333282470703], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [359.1690673828125, 180.44544982910156, 180.3333282470703], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.0, 180.0, 179.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [359.06591796875, 179.87196350097656, 179.6666717529297], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [359.8331298828125, 179.07208251953125, 179.6666717529297], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [0.8309326171875, 179.55455017089844, 179.6666717529297], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.680419921875, 180.65261840820312, 179.6666717529297], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184], [359.5895690917969, 180.84878540039062, 179.6666717529297]]))

    def test_with_sym_not_c_or_d(self):
        """ these cases take a lot of times. more or less one minute"""
        angles = [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408]]
        return_new = fu.symmetry_neighbors(angles , symmetry= "invalid")
        return_old = oldfu.symmetry_neighbors(angles , symmetry= "invalid")
        self.assertTrue(numpy.array_equal(return_new, return_old))



class Test_rotation_between_anglesets(unittest.TestCase):
    """  used the value used in 'Test_assign_projdirs_f' """
    agls1 =  [[0.0, 0.0, 1.0], [0.6804220676422119, 0.6526213884353638, 0.3333333432674408], [-0.4104178845882416, 0.8487909436225891, 0.3333333432674408], [-0.9340742230415344, -0.12803982198238373, 0.3333333432674408], [-0.16687190532684326, -0.927923858165741, 0.3333333432674408], [0.8309417366981506, -0.4454488158226013, 0.3333333432674408], [8.742277657347586e-08, 7.64274186065882e-15, -1.0], [0.9340742230415344, 0.12803970277309418, -0.3333333134651184], [0.16687177121639252, 0.927923858165741, -0.3333333134651184], [-0.8309418559074402, 0.44544869661331177, -0.3333333134651184], [-0.6804221272468567, -0.652621328830719, -0.3333333134651184], [0.41041797399520874, -0.8487908840179443, -0.3333333134651184]]
    agls2 = [[0.0, 0.0, 0.66], [0.44907856464385987, 0.4307301163673401, 0.22000000655651095], [-0.27087580382823945, 0.5602020227909088, 0.22000000655651095], [-0.6164889872074127, -0.08450628250837326, 0.22000000655651095], [-0.11013545751571656, -0.6124297463893891, 0.22000000655651095], [0.5484215462207794, -0.2939962184429169, 0.22000000655651095], [5.7699032538494066e-08, 5.044209628034821e-15, -0.66], [0.6164889872074127, 0.08450620383024215, -0.21999998688697817], [0.11013536900281906, 0.6124297463893891, -0.21999998688697817], [-0.5484216248989106, 0.2939961397647858, -0.21999998688697817], [-0.44907860398292543, -0.43073007702827454, -0.21999998688697817], [0.2708758628368378, -0.5602019834518432, -0.21999998688697817]]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.rotation_between_anglesets()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.rotation_between_anglesets()
        self.assertEqual(cm_new.exception.message, "rotation_between_anglesets() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_rotation_between_anglesets(self):
        return_new = fu.rotation_between_anglesets(self.agls1, self.agls2)
        return_old = oldfu.rotation_between_anglesets(self.agls1, self.agls2)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,(2.2152846519737862e-09, 0.0, 0.0)))

    def test_sets_have_different_length(self):
        agls2=self.agls2[:30]
        return_new = fu.rotation_between_anglesets(self.agls1, agls2)
        return_old = oldfu.rotation_between_anglesets(self.agls1, agls2)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  (2.2152846519737862e-09, 0.0, 0.0)))

    def test_angls1_empty_list_error_msg(self):
        return_new = fu.rotation_between_anglesets([], self.agls2)
        return_old = oldfu.rotation_between_anglesets([], self.agls2)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertEqual(return_new, -1)

    def test_angls2_empty_list_error_msg(self):
        return_new = fu.rotation_between_anglesets(self.agls1, [])
        return_old = oldfu.rotation_between_anglesets(self.agls1, [])
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertEqual(return_new, -1)



class Test_angle_between_projections_directions(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.angle_between_projections_directions()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.angle_between_projections_directions()
        self.assertEqual(cm_new.exception.message, "angle_between_projections_directions() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_3angles(self):
        agls1 = [20, 60, 0]
        agls2 = [45, 75, 5]
        return_new = fu.angle_between_projections_directions(agls1, agls2)
        return_old = oldfu.angle_between_projections_directions(agls1, agls2)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 27.432927773655976)

    def test_with_2angles(self):
        agls1 = [20, 60]
        agls2 = [45, 75]
        return_new = fu.angle_between_projections_directions(agls1, agls2)
        return_old = oldfu.angle_between_projections_directions(agls1, agls2)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 27.432927773655976)

    def test_with_list1_empty(self):
        agls2 = [45, 75]
        with self.assertRaises(IndexError) as cm_new:
            fu.angle_between_projections_directions([], agls2)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angle_between_projections_directions([], agls2)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_list2_empty(self):
        agls1 = [45, 75]
        with self.assertRaises(IndexError) as cm_new:
            fu.angle_between_projections_directions( agls1, [])
        with self.assertRaises(IndexError) as cm_old:
            oldfu.angle_between_projections_directions( agls1, [])
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_pixel_size(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_pixel_size()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_pixel_size()
        self.assertEqual(cm_new.exception.message, "get_pixel_size() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_pixel_size_img2d(self):
        return_new = fu.get_pixel_size(IMAGE_2D)
        return_old = oldfu.get_pixel_size(IMAGE_2D)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_get_pixel_size_img3d(self):
        return_new = fu.get_pixel_size(IMAGE_3D)
        return_old = oldfu.get_pixel_size(IMAGE_3D)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_get_pixel_size_imgEmpty(self):
        return_new = fu.get_pixel_size(EMData())
        return_old = oldfu.get_pixel_size(EMData())
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 1)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.get_pixel_size(None)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.get_pixel_size(None)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_attr_default'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_set_pixel_size(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.set_pixel_size()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.set_pixel_size()
        self.assertEqual(cm_new.exception.message, "set_pixel_size() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_set_pixel_size(self):
        img_fu = deepcopy(IMAGE_2D)
        img_fu_old = deepcopy(IMAGE_2D)
        fu.set_pixel_size(img_fu,2.1)
        oldfu.set_pixel_size(img_fu_old,2.1)
        self.assertEqual(img_fu.get_attr('apix_x'), img_fu_old.get_attr('apix_x'))
        self.assertEqual(img_fu.get_attr('apix_y'), img_fu_old.get_attr('apix_y'))
        self.assertEqual(img_fu.get_attr('apix_z'), img_fu_old.get_attr('apix_z'))
        self.assertEqual(img_fu.get_attr('apix_x'), 2.1)
        self.assertEqual(img_fu.get_attr('apix_y'), 2.1)
        self.assertEqual(img_fu.get_attr('apix_z'), 2.1)

    def test_set_pixel_size_truncated_value(self):
        img_fu = deepcopy(IMAGE_2D)
        img_fu_old = deepcopy(IMAGE_2D)
        fu.set_pixel_size(img_fu,2.1111)
        oldfu.set_pixel_size(img_fu_old,2.1111)
        self.assertEqual(img_fu.get_attr('apix_x'), img_fu_old.get_attr('apix_x'))
        self.assertEqual(img_fu.get_attr('apix_y'), img_fu_old.get_attr('apix_y'))
        self.assertEqual(img_fu.get_attr('apix_z'), img_fu_old.get_attr('apix_z'))
        self.assertEqual(img_fu.get_attr('apix_x'), 2.111)
        self.assertEqual(img_fu.get_attr('apix_y'), 2.111)
        self.assertEqual(img_fu.get_attr('apix_z'), 2.111)

    def test_NoneType_as_img_returns_AttributeError_NoneType_obj_hasnot_attribute_process(self):
        with self.assertRaises(AttributeError) as cm_new:
            fu.set_pixel_size(None,2.1)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.set_pixel_size(None,2.1)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'get_zsize'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_lacos(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.lacos()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.lacos()
        self.assertEqual(cm_new.exception.message, "lacos() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_null_angle(self):
        return_new = fu.lacos(0)
        return_old = oldfu.lacos(0)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new,90.0)

    def test_negative_angle(self):
        return_new = fu.lacos(-0.12)
        return_old = oldfu.lacos(-0.12)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 96.892102579346385)

    def test_positive_angle(self):
        return_new = fu.lacos(0.12)
        return_old = oldfu.lacos(0.12)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new,83.107897420653629)

    def test_outOfRange_angle(self):
        return_new = fu.lacos(12)
        return_old = oldfu.lacos(12)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0.0)


class Test_findall(unittest.TestCase):
    l = [1,2,3,4,5,5,5,4,3,2,1]

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.findall()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.findall()
        self.assertEqual(cm_new.exception.message, "findall() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_findall_5(self):
        return_new = fu.findall(5, self.l, start=0)
        return_old = oldfu.findall(5, self.l, start=0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [4, 5, 6]))

    def test_findall_noValues(self):
        return_new = fu.findall(0, self.l, start=0)
        return_old = oldfu.findall(0, self.l, start=0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))



class Test_class_iterImagesList(unittest.TestCase):
    list_of_imgs = [IMAGE_2D,IMAGE_3D,IMAGE_BLANK_2D,IMAGE_BLANK_3D,IMAGE_2D_REFERENCE]

    def test_invalid_init(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.iterImagesList()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.iterImagesList()
        self.assertEqual(cm_new.exception.message, "__init__() takes at least 2 arguments (1 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_valid_init(self):
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes = None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes = None)
        self.assertEqual(type(fu_obj).__name__ , "iterImagesList")
        self.assertEqual(type(fu_obj).__name__, type(oldfu_obj).__name__)

    def test_valid_init2(self):
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes = [1,2])
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes = [1,2])
        self.assertEqual(type(fu_obj).__name__ , "iterImagesList")
        self.assertEqual(type(fu_obj).__name__, type(oldfu_obj).__name__)

    def test_wrong_init_list_of_index_leads_IndexError(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.iterImagesList(self.list_of_imgs, list_of_indexes = [1,2,7])
        with self.assertRaises(IndexError) as cm_old:
            oldfu.iterImagesList(self.list_of_imgs, list_of_indexes = [1,2,7])
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_iterNo(self):
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

    def test_imageIndex(self):
        """ since the position is -1 it is returning the index of the last image hence 4"""
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        self.assertEqual(fu_obj.imageIndex(), oldfu_obj.imageIndex())
        self.assertEqual(fu_obj.imageIndex(), 4)

    def test_image(self):
        """ since the position is -1 it is returning the last image hence the 4th"""
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        fu_img=fu_obj.image()
        oldfu_img=oldfu_obj.image()
        expectedimg=self.list_of_imgs[fu_obj.imageIndex()]
        self.assertTrue(numpy.array_equal(fu_img.get_3dview(), oldfu_img.get_3dview()))
        self.assertTrue(numpy.array_equal(fu_img.get_3dview(), expectedimg.get_3dview()))

    def test_goToNext(self):
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes=None)

        """ I'm testing all the data in the obj in order to test the return False"""
        fu_counter =0
        while fu_obj.goToNext():       # I'm , implicitly, testing the return True
            self.assertEqual(fu_obj.iterNo(), fu_counter)
            fu_counter += 1

        oldfu_counter =0
        while oldfu_obj.goToNext():
            self.assertEqual(oldfu_obj.iterNo(), oldfu_counter)
            oldfu_counter += 1

        """ no more img in the object"""
        self.assertFalse(fu_obj.goToNext())
        self.assertFalse(oldfu_obj.goToNext())

        """ check if both of the classes tested all the images"""
        self.assertTrue(fu_counter, oldfu_counter)
        self.assertTrue(fu_counter, len(self.list_of_imgs))

    def test_goToPrev(self):
        fu_obj = fu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        oldfu_obj = oldfu.iterImagesList(self.list_of_imgs, list_of_indexes=None)
        """At the beginning there is no previous image"""
        self.assertFalse(fu_obj.goToPrev())
        self.assertFalse(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

        """ We are on the first image, it means that we have still no previous image"""
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 0)

        self.assertFalse(fu_obj.goToPrev())
        self.assertFalse(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), -1)

        """ We are on the second image, it means that we have an previous image"""
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        fu_obj.goToNext()
        oldfu_obj.goToNext()
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 1)

        self.assertTrue(fu_obj.goToPrev())
        self.assertTrue(oldfu_obj.goToPrev())
        self.assertEqual(fu_obj.iterNo(),oldfu_obj.iterNo())
        self.assertEqual(fu_obj.iterNo(), 0)



class Test_pack_message(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.pack_message()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.pack_message()
        self.assertEqual(cm_new.exception.message, "pack_message() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_data_is_a_string(self):
        data = "case S:I am a string!!!"
        return_new = fu.pack_message(data)
        return_old = oldfu.pack_message(data)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 'Scase S:I am a string!!!')

    def test_data_is_a_very_long_string(self):
        long_data = "I am a stringggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg!!!"
        return_new = fu.pack_message(long_data)
        return_old = oldfu.pack_message(long_data)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, "C"+zlib.compress(long_data,1))

    def test_data_is_a_notstring(self):
        data = 5555
        return_new = fu.pack_message(data)
        return_old = oldfu.pack_message(data)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, "O" + pickle.dumps(data,-1))

    def test_data_is_a_notstring_long_version(self):
        data
        return_new = fu.pack_message(data)
        return_old = oldfu.pack_message(data)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, "Z" + zlib.compress(pickle.dumps(data, -1),1))



class Test_unpack_message(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.unpack_message()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.unpack_message()
        self.assertEqual(cm_new.exception.message, "unpack_message() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_data_is_a_string_BUG(self):
        self.assertTrue(True)
        """
        data = fu.pack_message("case S:I am a string!!!")
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """

    def test_data_is_a_very_long_string(self):
        self.assertTrue(True)
        """
        long_data = "I am a stringggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg!!!"
        data= fu.pack_message(long_data)
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """

    def test_data_is_a_notstring(self):
        self.assertTrue(True)
        """
        data = fu.pack_message(5555)
        return_new = fu.unpack_message(5555)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new,return_old)
        """
    def test_data_is_a_notstring_long_version(self):
        self.assertTrue(True)
        """
        data = fu.pack_message(555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555)
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new, return_old)
        """

    def test_pickle_file_values(self):
        (data,) = get_arg_from_pickle_file(os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.unpack_message"))[0]
        return_new = fu.unpack_message(data)
        return_old = oldfu.unpack_message(data)
        self.assertEqual(return_new, return_old)



class Test_wrap_mpi_send(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_send()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_send()
        self.assertEqual(cm_new.exception.message, "wrap_mpi_send() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_value(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_send"""
        return_new = fu.wrap_mpi_send(data = [9], destination = 0, communicator = None)
        return_old = oldfu.wrap_mpi_send(data =[9], destination = 0, communicator = None)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_with_MPI_COMM_WORLD(self):
        return_new = fu.wrap_mpi_send(data = [9], destination = 0, communicator = MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_send(data =[9], destination = 0, communicator = MPI_COMM_WORLD)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.wrap_mpi_send(data = [9], destination = 0, communicator = -1)
        return_old = oldfu.wrap_mpi_send(data =[9], destination = 0, communicator = -1)
        self.assertEqual(return_new, return_old)
        """



class Test_wrap_mpi_recv(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_recv()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_recv()
        self.assertEqual(cm_new.exception.message, "wrap_mpi_recv() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    "Can only test on cluster , cannot work on workstation"
    # def test_wrap_mpi_recv_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_recv")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (data, communicator) = argum[0]
    #
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_new = fu.wrap_mpi_recv(data, communicator)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_recv(data, communicator)
    #
    #     self.assertEqual(return_new, return_old)



class Test_wrap_mpi_bcast(unittest.TestCase):
    """ Values got running Test_get_sorting_params_refine.test_default_case"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_bcast()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_bcast()
        self.assertEqual(cm_new.exception.message, "wrap_mpi_bcast() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_None_data(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_send"""
        return_new = fu.wrap_mpi_bcast(None, root=0, communicator= None)
        return_old = oldfu.wrap_mpi_bcast(None, root=0, communicator= None)
        self.assertEqual(return_new, return_old)
        self.assertTrue(return_new is None)

    def test_default_case(self):
        attr_value_list = [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0],[2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        return_new = fu.wrap_mpi_bcast(data = attr_value_list, root = 0, communicator = MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_bcast(data =attr_value_list, root= 0, communicator = MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545,150.6989385443887, 95.77312314162165,0.0, 0.0], [2, 67.0993779295224,52.098986136572584,248.45843717750148, 0.0,0.0]]))


    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.wrap_mpi_bcast(data = [9], root = 0, communicator = -1)
        return_old = oldfu.wrap_mpi_bcast(data =[9], root= 0, communicator = -1)
        self.assertEqual(return_new, return_old)
        """



class Test_wrap_mpi_gatherv(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_gatherv()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_gatherv()
        self.assertEqual(cm_new.exception.message, "wrap_mpi_gatherv() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_pickle_file_values(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_gatherv"""
        return_new = fu.wrap_mpi_gatherv(data = [45,3], root = 0, communicator= None)
        return_old = oldfu.wrap_mpi_gatherv(data= [45,3], root = 0, communicator= None)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [45, 3]))

    def test_with_MPI_COMM_WORLD(self):
        """ values got via pickle files/utilities/utilities.wrap_mpi_gatherv"""
        return_new = fu.wrap_mpi_gatherv(data = [45,3], root = 0, communicator= MPI_COMM_WORLD)
        return_old = oldfu.wrap_mpi_gatherv(data= [45,3], root = 0, communicator= MPI_COMM_WORLD)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [45, 3]))

    def test_invalid_communicator_crashes_because_signal11SIGSEV(self):
        self.assertTrue(True)
        """
        return_new = fu.wrap_mpi_gatherv(data = [45,3], root = 0, communicator= -1)
        return_old = oldfu.wrap_mpi_gatherv(data= [45,3], root = 0, communicator= -1)
        self.assertEqual(return_new, return_old)
        """



class Test_get_colors_and_subsets(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_colors_and_subsets()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_colors_and_subsets()
        self.assertEqual(cm_new.exception.message, "get_colors_and_subsets() takes exactly 6 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_mainMode_equal_my_rank(self):
        main_node = 0
        my_rank = mpi_comm_rank(MPI_COMM_WORLD)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        sh_my_rank = mpi_comm_rank(shared_comm)
        masters = mpi_comm_split(MPI_COMM_WORLD, sh_my_rank == main_node, my_rank)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        return_new = fu.get_colors_and_subsets(main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank,masters)
        return_old = oldfu.get_colors_and_subsets(main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank,masters)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0, 1, True)))

    def test_mainMode_not_equal_my_rank_returns_TypeError_obj_Nonetype_hasnot_len(self):
        main_node = 0
        my_rank = mpi_comm_rank(MPI_COMM_WORLD)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        sh_my_rank = mpi_comm_rank(shared_comm)
        masters = mpi_comm_split(MPI_COMM_WORLD, sh_my_rank == main_node, my_rank)
        shared_comm = mpi_comm_split_type(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        with self.assertRaises(TypeError) as cm_new:
            fu.get_colors_and_subsets(main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank+1,masters)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_colors_and_subsets(main_node, MPI_COMM_WORLD, my_rank, shared_comm, sh_my_rank+1,masters)
        self.assertEqual(cm_new.exception.message, "object of type 'NoneType' has no len()")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


class Test_wrap_mpi_split(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.wrap_mpi_split()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.wrap_mpi_split()
        self.assertEqual(cm_new.exception.message, "wrap_mpi_split() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


        """ Can only be tested in mpi not on workstation   """
    # def test_wrap_mpi_split_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_split")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (comm, no_of_groups) = argum[0]
    #
    #     return_new = fu.wrap_mpi_split(comm, no_of_groups)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_split(comm, no_of_groups)
    #
    #     self.assertEqual(return_new, return_old)


class Test_get_dist(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_dist()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_dist()
        self.assertEqual(cm_new.exception.message, "get_dist() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_get_dist(self):
        return_new = fu.get_dist(c1=[2,4],c2=[5,1])
        return_old = oldfu.get_dist([2, 4], [5, 1])
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 4.2426406871192848)

    def test_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.get_dist(c1=[2],c2=[5])
        with self.assertRaises(IndexError) as cm_old:
            oldfu.get_dist(c1=[2],c2=[5])
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_eliminate_moons(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.eliminate_moons()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.eliminate_moons()
        self.assertEqual(cm_new.exception.message, "eliminate_moons() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_real_case_IMAGE_3D(self):
        moon_params = [0.4,0.7]
        return_new = fu.eliminate_moons(deepcopy(IMAGE_3D), moon_params)
        return_old = oldfu.eliminate_moons(deepcopy(IMAGE_3D), moon_params)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))

    def test_real_case_IMAGE_3D_no_change(self):
        v = fu.model_gauss(0.25,12,12,12)
        moon_params = [-1,-1]
        return_new = fu.eliminate_moons(deepcopy(v), moon_params)
        return_old = oldfu.eliminate_moons(deepcopy(v), moon_params)
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))
        self.assertTrue(numpy.array_equal(return_new.get_3dview(), v.get_3dview()))

    def test_returns_IndexError_list_index_out_of_range(self):
        moon_params = [0.4]
        with self.assertRaises(IndexError) as cm_new:
            fu.eliminate_moons(deepcopy(IMAGE_3D), moon_params)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.eliminate_moons(deepcopy(IMAGE_3D), moon_params)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


    def test_real_case_IMAGE_2D_returns_RuntimeError_the_img_should_be_a_3D_img(self):
        moon_params = [0.4,0.7]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.eliminate_moons(deepcopy(IMAGE_2D), moon_params)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.eliminate_moons(deepcopy(IMAGE_2D), moon_params)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(msg[1], "The image should be 3D")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_img_returns_RuntimeError_the_img_should_be_a_3D_img(self):
        moon_params = [0.4,0.7]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.eliminate_moons(EMData(), moon_params)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.eliminate_moons(EMData(), moon_params)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageDimensionException")
        self.assertEqual(msg[1], "The image should be 3D")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_NoneType_img_returns_AttributeError_NoneType_obj_hasnot_attribute_find_3d_threshold(self):
        moon_params = [0.4,0.7]
        with self.assertRaises(AttributeError) as cm_new:
            fu.eliminate_moons(None, moon_params)
        with self.assertRaises(AttributeError) as cm_old:
            oldfu.eliminate_moons(None, moon_params)
        self.assertEqual(cm_new.exception.message, "'NoneType' object has no attribute 'find_3d_threshold'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_combinations_of_n_taken_by_k(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.combinations_of_n_taken_by_k()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.combinations_of_n_taken_by_k()
        self.assertEqual(cm_new.exception.message, "combinations_of_n_taken_by_k() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_combinations_of_n_taken_by_k(self):
        return_new = fu.combinations_of_n_taken_by_k(5,3)
        return_old = oldfu.combinations_of_n_taken_by_k(5,3)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 10)



class Test_cmdexecute(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.cmdexecute()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.cmdexecute()
        self.assertEqual(cm_new.exception.message, "cmdexecute() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_correct_cmd_without_printing_on_success(self):
        return_new = fu.cmdexecute("ls", False)
        return_old = oldfu.cmdexecute("ls", False)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, None)

    def test_correct_cmd_with_printing_on_success(self):
        return_new = fu.cmdexecute("ls", True)
        return_old = oldfu.cmdexecute("ls", True)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 1)

    def test_wrong_cmd(self):
        return_new = fu.cmdexecute("quack", True)
        return_old = oldfu.cmdexecute("quack", True)
        self.assertEqual(return_new,return_old)
        self.assertEqual(return_new, 0)



class Test_string_found_in_file(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.string_found_in_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.string_found_in_file()
        self.assertEqual(cm_new.exception.message, "string_found_in_file() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_file_not_found_returns_IOError(self):
        with self.assertRaises(IOError) as cm_new:
            fu.string_found_in_file("search smth", "not_a_file.txt")
        with self.assertRaises(IOError) as cm_old:
            oldfu.string_found_in_file("search smth", "not_a_file.txt")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)

    def test_found_value(self):
        f = "f.txt"
        data=[["hallo",1,1,1],[2,2,2,2],[3,3,3,3]]
        path_to_file = path.join(ABSOLUTE_PATH, f)
        fu.write_text_row(data, path_to_file)
        return_new = fu.string_found_in_file("hallo", path_to_file)
        return_old = oldfu.string_found_in_file("hallo", path_to_file)
        remove_list_of_file([f])
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new)

    def test_notfound_value(self):
        f = "f.txt"
        data=[["ds",1,1,1],[2,2,2,2],[3,3,3,3]]
        path_to_file = path.join(ABSOLUTE_PATH, f)
        fu.write_text_row(data, path_to_file)
        return_new = fu.string_found_in_file("hallo", path_to_file)
        return_old = oldfu.string_found_in_file("hallo", path_to_file)
        remove_list_of_file([f])
        self.assertEqual(return_new,return_old)
        self.assertFalse(return_new)



class Test_get_latest_directory_increment_value(unittest.TestCase):
    start_value = 1
    folder_name = 'd'
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_latest_directory_increment_value()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_latest_directory_increment_value()
        self.assertEqual(cm_new.exception.message, "get_latest_directory_increment_value() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_nothing_to_count(self):
        return_new = fu.get_latest_directory_increment_value(ABSOLUTE_PATH, self.folder_name, start_value = self.start_value, myformat = "%03d")
        return_old = oldfu.get_latest_directory_increment_value(ABSOLUTE_PATH, self.folder_name, start_value = self.start_value, myformat = "%03d")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new,self.start_value)

    def test_count_something(self):
        os.mkdir(path.join(ABSOLUTE_PATH, self.folder_name+"001"))
        os.mkdir(path.join(ABSOLUTE_PATH, self.folder_name + "002"))
        return_new = fu.get_latest_directory_increment_value(ABSOLUTE_PATH, "/"+self.folder_name,start_value=self.start_value, myformat="%03d")
        return_old = oldfu.get_latest_directory_increment_value(ABSOLUTE_PATH, "/" + self.folder_name,start_value=self.start_value, myformat="%03d")
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new,2)
        remove_dir(path.join(ABSOLUTE_PATH, self.folder_name+"001"))
        remove_dir(path.join(ABSOLUTE_PATH, self.folder_name + "002"))



class Test_if_error_then_all_processes_exit_program(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.if_error_then_all_processes_exit_program()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.if_error_then_all_processes_exit_program()
        self.assertEqual(cm_new.exception.message, "if_error_then_all_processes_exit_program() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_shrink_data_huang(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_shrink_data_huang()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_shrink_data_huang()
        self.assertEqual(cm_new.exception.message, "get_shrink_data_huang() takes at least 7 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    @unittest.skip("it cannot find something in the ADNAN file")
    def test_get_shrink_data_huang_true_should_return_equal_objects(self):
        """
        I got
        RuntimeError: FileAccessException at /home/lusnig/EMAN2/eman2/libEM/emdata_metadata.cpp:240: error with '/home/lusnig/Downloads/adnan4testing/Substack/EMAN2DB/../../Particles/mpi_proc_000/EMAN2DB/TcdA1-0011_frames_sum_ptcls_352x352x1': 'cannot access file '/home/lusnig/Downloads/adnan4testing/Substack/EMAN2DB/../../Particles/mpi_proc_000/EMAN2DB/TcdA1-0011_frames_sum_ptcls_352x352x1'' caught
        """
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["log_main"] = "logging"
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["constants"]["stack"] = 'bdb:' + path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Substack/sort3d_substack_002')
        Tracker["applyctf"] = True
        ids = []
        for i in range(1227):
            ids.append(i)
        Tracker["chunk_dict"] =ids
        myid = 0
        m_node = 0
        nproc = 1
        partids = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, "Refine3D-Substack-Local_001/main010/indexes_010.txt")
        partstack =  path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, "Refine3D-Substack-Local_001/main010/params_010.txt")
        nxinit = 2

        return_new = fu.get_shrink_data_huang(Tracker, nxinit, partids, partstack, myid, m_node, nproc)

        return_old = oldfu.get_shrink_data_huang(Tracker, nxinit, partids, partstack, myid, m_node, nproc)

        self.assertTrue(numpy.allclose(return_new[0][0].get_3dview(), return_old[0][0].get_3dview(), 0.5))


class Test_getindexdata(unittest.TestCase):
    """ nproc and myid valeus got from "pickle files/utilities/utilities.getindexdata"""
    nproc = 95
    myid = 22
    stack = 'bdb:' + path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D/best_000')
    partids = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D/main001/this_iteration_index_keep_images.txt')
    partstack = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D//main001/run000/rotated_reduced_params.txt')

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.getindexdata()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.getindexdata()
        self.assertEqual(cm_new.exception.message, "getindexdata() takes exactly 5 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_nproc_greater_than_ndata(self):
        return_new = fu.getindexdata(self.stack, self.partids, self.partstack, self.myid, self.nproc)
        return_old = oldfu.getindexdata(self.stack, self.partids, self.partstack, self.myid, self.nproc)
        self.assertTrue(numpy.array_equal(return_new[0].get_3dview(), return_old[0].get_3dview()))

    def test_nproc_and_myid_greater_than_ndata_(self):
        return_new = fu.getindexdata(self.stack, self.partids, self.partstack, 100, self.nproc)
        return_old = oldfu.getindexdata(self.stack, self.partids, self.partstack, 100, self.nproc)
        self.assertTrue(numpy.array_equal(return_new[0].get_3dview(), return_old[0].get_3dview()))

    def test_nproc_lower_than_ndata(self):
        return_new = fu.getindexdata(self.stack, self.partids, self.partstack, self.myid, nproc= 10)
        return_old = oldfu.getindexdata(self.stack, self.partids, self.partstack, self.myid, nproc= 10)
        self.assertTrue(numpy.array_equal(return_new[0].get_3dview(), return_old[0].get_3dview()))



class Test_store_value_of_simple_vars_in_json_file(unittest.TestCase):
    f= path.join(ABSOLUTE_PATH, "fu.json")
    f_old = path.join(ABSOLUTE_PATH, "oldfu.json")
    var_to_save= {'string_var': 'var1', 'integer_var': 7, 'bool_var': False, 'list_var': [2,3,4]}
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.store_value_of_simple_vars_in_json_file()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.store_value_of_simple_vars_in_json_file()
        self.assertEqual(cm_new.exception.message, "store_value_of_simple_vars_in_json_file() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_value(self):
        fu.store_value_of_simple_vars_in_json_file(filename =  self.f, local_vars = self.var_to_save, exclude_list_of_vars = [], write_or_append = "w",	vars_that_will_show_only_size = [])
        oldfu.store_value_of_simple_vars_in_json_file(filename =  self.f_old, local_vars = self.var_to_save, exclude_list_of_vars = [], write_or_append = "w",	vars_that_will_show_only_size = [])
        self.assertEqual(returns_values_in_file(self.f), returns_values_in_file(self.f_old))
        self.assertTrue(fu.string_found_in_file(self.var_to_save.keys()[0], self.f))
        self.assertTrue(oldfu.string_found_in_file(self.var_to_save.keys()[0], self.f_old))
        remove_list_of_file([self.f,self.f_old])

    def test_exclude_a_variable(self):
        var=self.var_to_save.keys()[0]
        fu.store_value_of_simple_vars_in_json_file(filename =  self.f, local_vars = self.var_to_save, exclude_list_of_vars = [var], write_or_append = "w",	vars_that_will_show_only_size = [])
        oldfu.store_value_of_simple_vars_in_json_file(filename =  self.f_old, local_vars = self.var_to_save, exclude_list_of_vars = [var], write_or_append = "w",	vars_that_will_show_only_size = [])
        self.assertEqual(returns_values_in_file(self.f), returns_values_in_file(self.f_old))
        self.assertFalse(fu.string_found_in_file(var, self.f))
        self.assertFalse(oldfu.string_found_in_file(var, self.f_old))
        remove_list_of_file([self.f,self.f_old])

    def test_onlySize_a_variable(self):
        var= 'list_var'
        fu.store_value_of_simple_vars_in_json_file(filename =  self.f, local_vars = self.var_to_save, exclude_list_of_vars = [], write_or_append = "w",	vars_that_will_show_only_size = [var])
        oldfu.store_value_of_simple_vars_in_json_file(filename =  self.f_old, local_vars = self.var_to_save, exclude_list_of_vars = [], write_or_append = "w",	vars_that_will_show_only_size = [var])
        self.assertEqual(returns_values_in_file(self.f), returns_values_in_file(self.f_old))
        self.assertTrue(fu.string_found_in_file("<type 'list'> with length: 3", self.f))
        self.assertTrue(oldfu.string_found_in_file("<type 'list'> with length: 3", self.f_old))
        remove_list_of_file([self.f, self.f_old])



class Test_convert_json_fromunicode(unittest.TestCase):
    f= path.join(ABSOLUTE_PATH, "f.json")
    var_to_save= {'string_var': 'var1', 'integer_var': 7, 'bool_var': False, 'list_var': [2,3,4]}

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.convert_json_fromunicode()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.convert_json_fromunicode()
        self.assertEqual(cm_new.exception.message, "convert_json_fromunicode() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_with_loaded_jsonFile(self):
        fu.store_value_of_simple_vars_in_json_file(filename=self.f, local_vars=self.var_to_save,exclude_list_of_vars=[], write_or_append="w",vars_that_will_show_only_size=[])
        with open(self.f, 'r') as f1:
            values=json.load( f1)

        return_new = fu.convert_json_fromunicode(values)
        return_old = oldfu.convert_json_fromunicode(values)
        self.assertDictEqual(return_new,return_old)
        remove_list_of_file([self.f])

    def test_with_string(self):
        data = "ciaone"
        return_new = fu.convert_json_fromunicode(data)
        return_old = oldfu.convert_json_fromunicode(data)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, data)



class Test_get_sorting_attr_stack(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_sorting_attr_stack()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_sorting_attr_stack()
        self.assertEqual(cm_new.exception.message, "get_sorting_attr_stack() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        stack = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/multi_shc/multi_shc.ali3d_multishc"))[0][0]
        for i in range(len(stack)):
            stack[i].set_attr("group",i)
        return_new = fu.get_sorting_attr_stack(stack)
        return_old = oldfu.get_sorting_attr_stack(stack)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new,[[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0], [3, 48.329977109192356, 117.5705850518134, 351.86937664408134, 0.0, 0.0], [4, 27.69691819268928, 43.27031745806075, 221.01598994487352, 0.0, 0.0], [5, 21.310076601702065, 171.03012732754505, 171.96680859829712, 0.0, 0.0], [6, 15.29265945235332, 52.64344620523427, 261.77408611622946, 0.0, 0.0], [7, 5.167600687104752, 102.82730387712962, 342.39939706174914, 0.0, 0.0], [8, 24.790317531012022, 99.47564893121846, 197.28160868317875, 0.0, 0.0], [9, 63.6110637166135, 57.82849773806232, 46.28909621816683, 0.0, 0.0], [10, 43.0541340885994, 99.96781920338643, 268.6955892945691, 0.0, 0.0], [11, 61.17678429642095, 90.75462285273008, 146.44621665024576, 0.0, 0.0], [12, 42.21290066966395, 144.5552830212904, 307.2072172161095, 0.0, 0.0], [13, 66.842043722353, 151.03106106540827, 74.69558471790953, 0.0, 0.0], [14, 57.13253366620802, 77.06211216981875, 14.078738028151804, 0.0, 0.0], [15, 23.41658890400403, 33.44337707006545, 302.5719333204403, 0.0, 0.0], [16, 31.39639453397831, 51.13633353440325, 208.30249398432636, 0.0, 0.0], [17, 29.02858651478833, 35.5375562136724, 142.0210172114356, 0.0, 0.0], [18, 33.0380714821259, 25.92835772588129, 56.941091101308245, 0.0, 0.0], [19, 33.154703792393036, 119.10157237670761, 289.65555324857974, 0.0, 0.0], [20, 51.7488556189989, 61.390756979764014, 50.60060397900594, 0.0, 0.0], [21, 13.14807567561769, 87.51982195330109, 196.43451185108586, 0.0, 0.0], [22, 44.16102088511332, 70.89045303205856, 173.69722943005007, 0.0, 0.0], [23, 5.203725557624949, 124.16777353839416, 274.3070842951357, 0.0, 0.0], [24, 71.40261567268388, 94.91091772300047, 193.279386674675, 0.0, 0.0], [25, 37.759166538330405, 64.89547557023316, 126.31095971850405, 0.0, 0.0], [26, 69.73110445824167, 36.63569177645915, 141.5284940422194, 0.0, 0.0], [27, 13.404248750628184, 64.23894693338787, 268.45800591947955, 0.0, 0.0], [28, 36.768338316193336, 142.47038328015265, 328.30282713390517, 0.0, 0.0], [29, 49.40940654524283, 57.44562945197844, 225.5720769552322, 0.0, 0.0], [30, 42.05392118654274, 111.5816596879126, 229.38783889376506, 0.0, 0.0], [31, 4.413172142330993, 36.815963893301586, 219.42779280502356, 0.0, 0.0], [32, 21.93687623164496, 101.33898701867622, 10.389958811519477, 0.0, 0.0], [33, 7.238104232102415, 93.18173962163453, 297.8577786238534, 0.0, 0.0], [34, 33.74128043831372, 136.57263972662804, 251.97793890785513, 0.0, 0.0], [35, 13.24801500355332, 93.3437024073173, 83.42851157658254, 0.0, 0.0], [36, 68.98968742383678, 137.52188147974766, 131.28953414678818, 0.0, 0.0], [37, 6.656739020518444, 83.46392407516454, 108.36199175910278, 0.0, 0.0], [38, 55.08043065083436, 77.00680292359846, 276.94285028405614, 0.0, 0.0], [39, 68.11877000276846, 170.36329302918105, 110.40575965943643, 0.0, 0.0], [40, 14.384107688958224, 37.08496112731635, 226.66984538039912, 0.0, 0.0], [41, 34.82364685570731, 22.08565956767624, 67.24551437397145, 0.0, 0.0], [42, 54.90981252536744, 84.76440954646556, 246.244958672071, 0.0, 0.0], [43, 65.74869436077404, 96.69886072311077, 48.8693101954874, 0.0, 0.0], [44, 56.61431355350081, 127.49229486891034, 352.1753011958611, 0.0, 0.0], [45, 13.363329087310646, 50.6501020880211, 254.4766641608211, 0.0, 0.0], [46, 37.52831980476232, 57.12531740572374, 63.945298445442404, 0.0, 0.0], [47, 65.89658161668316, 81.17948835034154, 12.404945110092683, 0.0, 0.0], [48, 34.31531685691827, 82.26885039884172, 160.73300049337337, 0.0, 0.0], [49, 17.681190265485114, 105.10467265590191, 119.8614020125277, 0.0, 0.0], [50, 15.31103266122065, 54.585177368223576, 271.6740281746854, 0.0, 0.0], [51, 36.283176319068986, 62.914786915921084, 104.54889787946392, 0.0, 0.0], [52, 3.4069623341830635, 157.06953327943953, 258.63938748179646, 0.0, 0.0], [53, 15.818597678822641, 101.17411462087938, 124.36987185667502, 0.0, 0.0], [54, 5.145354760978023, 145.49560881782645, 259.29832164314917, 0.0, 0.0], [55, 56.769249564633384, 49.87909869978583, 339.7947584207519, 0.0, 0.0], [56, 22.02743770985016, 60.589524188603185, 329.76575466706055, 0.0, 0.0], [57, 13.845198933255048, 108.88152968318862, 266.16552396525003, 0.0, 0.0], [58, 26.256731825057074, 50.99774992620399, 103.53874757271407, 0.0, 0.0], [59, 59.518223120645075, 44.12851528850411, 350.54914168406856, 0.0, 0.0], [60, 14.6120857430749, 134.118368756269, 190.99542187117007, 0.0, 0.0], [61, 54.53681589479305, 104.15765119485769, 218.94808795789788, 0.0, 0.0], [62, 43.81366478468314, 167.8017617509876, 184.31279489033895, 0.0, 0.0], [63, 43.93387611407539, 37.88212967171051, 78.06736658579604, 0.0, 0.0], [64, 59.09189637303123, 75.17428928858558, 359.3010696556519, 0.0, 0.0], [65, 22.179552852855508, 58.65260316036829, 181.70124261889157, 0.0, 0.0], [66, 69.29897204983331, 164.63384795897073, 186.55493640315802, 0.0, 0.0], [67, 7.70600634119414, 135.8714860404165, 200.73045260049025, 0.0, 0.0], [68, 8.093148293539642, 106.7864434015925, 31.46848962081191, 0.0, 0.0], [69, 63.21178451811289, 172.1347585895757, 221.8787228503647, 0.0, 0.0], [70, 39.26708106177247, 109.5665308139106, 212.0178242621771, 0.0, 0.0], [71, 5.334919831202555, 65.96229606168743, 191.2185522118338, 0.0, 0.0], [72, 69.25239015969382, 127.83273678349846, 258.0599500142225, 0.0, 0.0], [73, 33.5544474437572, 95.83126974465429, 185.6297961209063, 0.0, 0.0], [74, 23.26676870455981, 93.61370037103086, 45.28778441021137, 0.0, 0.0], [75, 23.043517141348772, 85.84605595290141, 49.47880592292438, 0.0, 0.0], [76, 32.29696863642283, 82.2144519927641, 195.90500589451506, 0.0, 0.0], [77, 61.75569747009288, 59.71952915315906, 200.08880634568584, 0.0, 0.0], [78, 55.77388609688742, 80.90666038882988, 348.03178571828937, 0.0, 0.0], [79, 59.29148816095736, 112.04611759714986, 337.00885101339793, 0.0, 0.0], [80, 35.1758933715832, 90.05390008227911, 128.26317896036022, 0.0, 0.0], [81, 11.86605599859547, 137.92249001802958, 246.76615643070795, 0.0, 0.0], [82, 67.2881097166682, 69.57308961723741, 148.17043074761835, 0.0, 0.0], [83, 47.19123431038949, 61.2678939843427, 17.806652177535398, 0.0, 0.0], [84, 10.603352096546047, 99.09333923199034, 100.16174984508127, 0.0, 0.0], [85, 9.711739202292577, 66.0802792775635, 344.0008163242261, 0.0, 0.0], [86, 62.633048929359376, 108.2560649627951, 233.64751565667922, 0.0, 0.0], [87, 15.973356105036785, 167.05874406098954, 9.692510439987075, 0.0, 0.0], [88, 29.510920813596286, 39.4352946112764, 315.9396310062408, 0.0, 0.0], [89, 47.105447134414106, 131.1150313645737, 169.44623231632715, 0.0, 0.0], [90, 70.08997625761248, 54.12087833087295, 191.55760589075828, 0.0, 0.0], [91, 30.490916355709714, 49.17052385044576, 157.3015888880858, 0.0, 0.0], [92, 69.16740894604052, 46.33040988241775, 276.01316541962285, 0.0, 0.0], [93, 11.38232151100766, 19.50450649105371, 65.58885592786618, 0.0, 0.0], [94, 49.76300543857437, 131.18661434631423, 209.89458600184605, 0.0, 0.0]])

    def test_empty_stack(self):
        return_new=fu.get_sorting_attr_stack([])
        self.assertTrue(numpy.array_equal(return_new, oldfu.get_sorting_attr_stack([])))
        self.assertTrue(numpy.array_equal(return_new, []))

    def test_wrong_images_in_the_stack_RunTimeError(self):
        stack=[IMAGE_2D,IMAGE_2D]
        for i in range(len(stack)):
            stack[i].set_attr("group",i)
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_sorting_attr_stack(stack)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_sorting_attr_stack(stack)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)


class Test_get_sorting_params_refine(unittest.TestCase):
    stack = get_arg_from_pickle_file(path.join(ABSOLUTE_PATH, "pickle files/multi_shc/multi_shc.ali3d_multishc"))[0][0]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_sorting_params_refine()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_sorting_params_refine()
        self.assertEqual(cm_new.exception.message, "get_sorting_params_refine() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        for i in range(len(self.stack)):
            self.stack[i].set_attr("group",i)
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["constants"]["nproc"] = 1
        return_new = fu.get_sorting_params_refine(Tracker, self.stack, len(self.stack))
        return_old = oldfu.get_sorting_params_refine(Tracker, self.stack, len(self.stack))
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0], [3, 48.329977109192356, 117.5705850518134, 351.86937664408134, 0.0, 0.0], [4, 27.69691819268928, 43.27031745806075, 221.01598994487352, 0.0, 0.0], [5, 21.310076601702065, 171.03012732754505, 171.96680859829712, 0.0, 0.0], [6, 15.29265945235332, 52.64344620523427, 261.77408611622946, 0.0, 0.0], [7, 5.167600687104752, 102.82730387712962, 342.39939706174914, 0.0, 0.0], [8, 24.790317531012022, 99.47564893121846, 197.28160868317875, 0.0, 0.0], [9, 63.6110637166135, 57.82849773806232, 46.28909621816683, 0.0, 0.0], [10, 43.0541340885994, 99.96781920338643, 268.6955892945691, 0.0, 0.0], [11, 61.17678429642095, 90.75462285273008, 146.44621665024576, 0.0, 0.0], [12, 42.21290066966395, 144.5552830212904, 307.2072172161095, 0.0, 0.0], [13, 66.842043722353, 151.03106106540827, 74.69558471790953, 0.0, 0.0], [14, 57.13253366620802, 77.06211216981875, 14.078738028151804, 0.0, 0.0], [15, 23.41658890400403, 33.44337707006545, 302.5719333204403, 0.0, 0.0], [16, 31.39639453397831, 51.13633353440325, 208.30249398432636, 0.0, 0.0], [17, 29.02858651478833, 35.5375562136724, 142.0210172114356, 0.0, 0.0], [18, 33.0380714821259, 25.92835772588129, 56.941091101308245, 0.0, 0.0], [19, 33.154703792393036, 119.10157237670761, 289.65555324857974, 0.0, 0.0], [20, 51.7488556189989, 61.390756979764014, 50.60060397900594, 0.0, 0.0], [21, 13.14807567561769, 87.51982195330109, 196.43451185108586, 0.0, 0.0], [22, 44.16102088511332, 70.89045303205856, 173.69722943005007, 0.0, 0.0], [23, 5.203725557624949, 124.16777353839416, 274.3070842951357, 0.0, 0.0], [24, 71.40261567268388, 94.91091772300047, 193.279386674675, 0.0, 0.0], [25, 37.759166538330405, 64.89547557023316, 126.31095971850405, 0.0, 0.0], [26, 69.73110445824167, 36.63569177645915, 141.5284940422194, 0.0, 0.0], [27, 13.404248750628184, 64.23894693338787, 268.45800591947955, 0.0, 0.0], [28, 36.768338316193336, 142.47038328015265, 328.30282713390517, 0.0, 0.0], [29, 49.40940654524283, 57.44562945197844, 225.5720769552322, 0.0, 0.0], [30, 42.05392118654274, 111.5816596879126, 229.38783889376506, 0.0, 0.0], [31, 4.413172142330993, 36.815963893301586, 219.42779280502356, 0.0, 0.0], [32, 21.93687623164496, 101.33898701867622, 10.389958811519477, 0.0, 0.0], [33, 7.238104232102415, 93.18173962163453, 297.8577786238534, 0.0, 0.0], [34, 33.74128043831372, 136.57263972662804, 251.97793890785513, 0.0, 0.0], [35, 13.24801500355332, 93.3437024073173, 83.42851157658254, 0.0, 0.0], [36, 68.98968742383678, 137.52188147974766, 131.28953414678818, 0.0, 0.0], [37, 6.656739020518444, 83.46392407516454, 108.36199175910278, 0.0, 0.0], [38, 55.08043065083436, 77.00680292359846, 276.94285028405614, 0.0, 0.0], [39, 68.11877000276846, 170.36329302918105, 110.40575965943643, 0.0, 0.0], [40, 14.384107688958224, 37.08496112731635, 226.66984538039912, 0.0, 0.0], [41, 34.82364685570731, 22.08565956767624, 67.24551437397145, 0.0, 0.0], [42, 54.90981252536744, 84.76440954646556, 246.244958672071, 0.0, 0.0], [43, 65.74869436077404, 96.69886072311077, 48.8693101954874, 0.0, 0.0], [44, 56.61431355350081, 127.49229486891034, 352.1753011958611, 0.0, 0.0], [45, 13.363329087310646, 50.6501020880211, 254.4766641608211, 0.0, 0.0], [46, 37.52831980476232, 57.12531740572374, 63.945298445442404, 0.0, 0.0], [47, 65.89658161668316, 81.17948835034154, 12.404945110092683, 0.0, 0.0], [48, 34.31531685691827, 82.26885039884172, 160.73300049337337, 0.0, 0.0], [49, 17.681190265485114, 105.10467265590191, 119.8614020125277, 0.0, 0.0], [50, 15.31103266122065, 54.585177368223576, 271.6740281746854, 0.0, 0.0], [51, 36.283176319068986, 62.914786915921084, 104.54889787946392, 0.0, 0.0], [52, 3.4069623341830635, 157.06953327943953, 258.63938748179646, 0.0, 0.0], [53, 15.818597678822641, 101.17411462087938, 124.36987185667502, 0.0, 0.0], [54, 5.145354760978023, 145.49560881782645, 259.29832164314917, 0.0, 0.0], [55, 56.769249564633384, 49.87909869978583, 339.7947584207519, 0.0, 0.0], [56, 22.02743770985016, 60.589524188603185, 329.76575466706055, 0.0, 0.0], [57, 13.845198933255048, 108.88152968318862, 266.16552396525003, 0.0, 0.0], [58, 26.256731825057074, 50.99774992620399, 103.53874757271407, 0.0, 0.0], [59, 59.518223120645075, 44.12851528850411, 350.54914168406856, 0.0, 0.0], [60, 14.6120857430749, 134.118368756269, 190.99542187117007, 0.0, 0.0], [61, 54.53681589479305, 104.15765119485769, 218.94808795789788, 0.0, 0.0], [62, 43.81366478468314, 167.8017617509876, 184.31279489033895, 0.0, 0.0], [63, 43.93387611407539, 37.88212967171051, 78.06736658579604, 0.0, 0.0], [64, 59.09189637303123, 75.17428928858558, 359.3010696556519, 0.0, 0.0], [65, 22.179552852855508, 58.65260316036829, 181.70124261889157, 0.0, 0.0], [66, 69.29897204983331, 164.63384795897073, 186.55493640315802, 0.0, 0.0], [67, 7.70600634119414, 135.8714860404165, 200.73045260049025, 0.0, 0.0], [68, 8.093148293539642, 106.7864434015925, 31.46848962081191, 0.0, 0.0], [69, 63.21178451811289, 172.1347585895757, 221.8787228503647, 0.0, 0.0], [70, 39.26708106177247, 109.5665308139106, 212.0178242621771, 0.0, 0.0], [71, 5.334919831202555, 65.96229606168743, 191.2185522118338, 0.0, 0.0], [72, 69.25239015969382, 127.83273678349846, 258.0599500142225, 0.0, 0.0], [73, 33.5544474437572, 95.83126974465429, 185.6297961209063, 0.0, 0.0], [74, 23.26676870455981, 93.61370037103086, 45.28778441021137, 0.0, 0.0], [75, 23.043517141348772, 85.84605595290141, 49.47880592292438, 0.0, 0.0], [76, 32.29696863642283, 82.2144519927641, 195.90500589451506, 0.0, 0.0], [77, 61.75569747009288, 59.71952915315906, 200.08880634568584, 0.0, 0.0], [78, 55.77388609688742, 80.90666038882988, 348.03178571828937, 0.0, 0.0], [79, 59.29148816095736, 112.04611759714986, 337.00885101339793, 0.0, 0.0], [80, 35.1758933715832, 90.05390008227911, 128.26317896036022, 0.0, 0.0], [81, 11.86605599859547, 137.92249001802958, 246.76615643070795, 0.0, 0.0], [82, 67.2881097166682, 69.57308961723741, 148.17043074761835, 0.0, 0.0], [83, 47.19123431038949, 61.2678939843427, 17.806652177535398, 0.0, 0.0], [84, 10.603352096546047, 99.09333923199034, 100.16174984508127, 0.0, 0.0], [85, 9.711739202292577, 66.0802792775635, 344.0008163242261, 0.0, 0.0], [86, 62.633048929359376, 108.2560649627951, 233.64751565667922, 0.0, 0.0], [87, 15.973356105036785, 167.05874406098954, 9.692510439987075, 0.0, 0.0], [88, 29.510920813596286, 39.4352946112764, 315.9396310062408, 0.0, 0.0], [89, 47.105447134414106, 131.1150313645737, 169.44623231632715, 0.0, 0.0], [90, 70.08997625761248, 54.12087833087295, 191.55760589075828, 0.0, 0.0], [91, 30.490916355709714, 49.17052385044576, 157.3015888880858, 0.0, 0.0], [92, 69.16740894604052, 46.33040988241775, 276.01316541962285, 0.0, 0.0], [93, 11.38232151100766, 19.50450649105371, 65.58885592786618, 0.0, 0.0], [94, 49.76300543857437, 131.18661434631423, 209.89458600184605, 0.0, 0.0]]))

    def returns_too_ndata_vlaue_respect_the_number_of_data_IndexError_list_index_out_of_range(self):
        for i in range(len(self.stack)):
            self.stack[i].set_attr("group",i)
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["constants"]["nproc"] = 1
        with self.assertRaises(IndexError) as cm_new:
            fu.get_sorting_params_refine(Tracker, self.stack, len(self.stack)+11)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.get_sorting_params_refine(Tracker, self.stack, len(self.stack)+11)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_stack(self):
        stack=[]
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["constants"]["nproc"] = 1
        return_new = fu.get_sorting_params_refine(Tracker, stack, len(stack))
        return_old = oldfu.get_sorting_params_refine(Tracker, stack, len(stack))
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))

    def test_wrong_images_in_the_stack_RunTimeError(self):
        stack=[IMAGE_2D,IMAGE_2D]
        for i in range(len(stack)):
            stack[i].set_attr("group",i)
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["constants"]["nproc"] = 1
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_sorting_params_refine(Tracker, stack, len(stack))
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_sorting_params_refine(Tracker, stack, len(stack))
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "NotExistingObjectException")
        self.assertEqual(msg[3], "The requested key does not exist")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[3], msg_old[3])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_parsing_sorting_params(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.parsing_sorting_params()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.parsing_sorting_params()
        self.assertEqual(cm_new.exception.message, "parsing_sorting_params() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.parsing_sorting_params([])
        return_old = oldfu.parsing_sorting_params([])
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, ([], [])))

    def test_typeerror_int_hasnot_attribute__get_item__(self):
        l=[1,2,3,4,5]
        with self.assertRaises(TypeError) as cm_new:
            fu.parsing_sorting_params(l)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.parsing_sorting_params(l)
        self.assertEqual(cm_new.exception.message, "'int' object has no attribute '__getitem__'")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_values(self):
        l=[[1,2,3,4,5],[1,21,31,41,51]]
        return_new = fu.parsing_sorting_params(l)
        return_old = oldfu.parsing_sorting_params(l)
        self.assertTrue(numpy.array_equal(return_new[0], return_old[0]))
        self.assertTrue(numpy.array_equal(return_new[1], return_old[1]))
        self.assertTrue(numpy.array_equal(return_new[0], [1, 1]))
        self.assertTrue(numpy.array_equal(return_new[1], [[2, 3, 4, 5], [21, 31, 41, 51]]))




class Test_fill_in_mpi_list(unittest.TestCase):
    """ Values got running Test_get_sorting_params_refine.test_default_case"""
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.fill_in_mpi_list()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.fill_in_mpi_list()
        self.assertEqual(cm_new.exception.message, "fill_in_mpi_list() takes exactly 4 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        total_attr_value_list=[[],[],[]]
        attr_value_list = [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        return_new = fu.fill_in_mpi_list(mpi_list = deepcopy(total_attr_value_list), data_list = attr_value_list, index_start = 0 ,index_end = len(total_attr_value_list))
        return_old = oldfu.fill_in_mpi_list(mpi_list = deepcopy(total_attr_value_list), data_list = attr_value_list, index_start = 0 ,index_end = len(total_attr_value_list))
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]))

    def test_index_start_negative_returns_IndexError_list_index_out_of_range(self):
        total_attr_value_list=[[],[],[]]
        attr_value_list = [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        with self.assertRaises(IndexError) as cm_new:
            fu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=0-1,index_end=len(total_attr_value_list))
        with self.assertRaises(IndexError) as cm_old:
            oldfu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=-1,index_end=len(total_attr_value_list))
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)
    def test_index_end_too_high_returns_IndexError_list_index_out_of_range(self):
        total_attr_value_list=[[],[],[]]
        attr_value_list = [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        with self.assertRaises(IndexError) as cm_new:
            fu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=0,index_end=len(total_attr_value_list)+2)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=0,index_end=len(total_attr_value_list)+2)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_less_values_in_attr_value_list_returns_IndexError_list_index_out_of_range(self):
        total_attr_value_list=[[],[],[]]
        attr_value_list = [ [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        with self.assertRaises(IndexError) as cm_new:
            fu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=0, index_end=len(total_attr_value_list))
        with self.assertRaises(IndexError) as cm_old:
            oldfu.fill_in_mpi_list(mpi_list=deepcopy(total_attr_value_list), data_list=attr_value_list, index_start=0, index_end=len(total_attr_value_list))
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_too_values_in_attr_value_list(self):
        total_attr_value_list=[[],[],[]]
        attr_value_list = [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]
        return_new = fu.fill_in_mpi_list(mpi_list = deepcopy(total_attr_value_list), data_list = attr_value_list, index_start = 0 ,index_end = len(total_attr_value_list))
        return_old = oldfu.fill_in_mpi_list(mpi_list = deepcopy(total_attr_value_list), data_list = attr_value_list, index_start = 0 ,index_end = len(total_attr_value_list))
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [[0, 27.84771510918482, 49.09925034711038, 236.702241194244, 0.0, 0.0], [1, 54.496982231553545, 150.6989385443887, 95.77312314162165, 0.0, 0.0], [2, 67.0993779295224, 52.098986136572584, 248.45843717750148, 0.0, 0.0]]))



class Test_sample_down_1D_curve(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.sample_down_1D_curve()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.sample_down_1D_curve()
        self.assertEqual(cm_new.exception.message, "sample_down_1D_curve() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.sample_down_1D_curve(nxinit=100, nnxo=180, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        return_old = oldfu.sample_down_1D_curve(nxinit=100, nnxo=180, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new,  [0.4444444444444444, 3.3333333333333335, 6.444444444444444, 9.555555555555557, 12.666666666666663, 17.000000000000004, 19.333333333333343, 22.444444444444436, 25.555555555555543, 28.66666666666668, 34.00000000000001, 35.33333333333335, 38.444444444444464, 41.55555555555553, 44.66666666666664, 51.00000000000001, 51.33333333333331, 54.44444444444447, 57.55555555555558, 60.6666666666667, 68.00000000000001, 67.33333333333323, 70.44444444444449, 73.55555555555559, 76.66666666666671, 85.00000000000003, 83.33333333333337, 86.4444444444443, 89.55555555555559, 92.66666666666671, 102.00000000000003, 99.33333333333337, 102.44444444444429, 105.5555555555556, 108.66666666666671, 118.9999999999998, 115.33333333333384, 118.44444444444403, 121.5555555555556, 124.66666666666673, 135.99999999999977, 131.3333333333339, 134.44444444444397, 137.55555555555563, 140.66666666666674, 152.99999999999974, 147.333333333334, 150.4444444444439, 153.55555555555623, 156.66666666666612, 169.99999999999972, 163.33333333333405, 166.44444444444383, 169.5555555555563, 172.66666666666606, 186.9999999999997, 179.3333333333341, 182.4444444444438, 185.5555555555564, 188.666666666666, 203.99999999999966, 195.3333333333342, 198.44444444444377, 201.55555555555645, 204.66666666666595, 220.99999999999963, 211.33333333333258, 214.44444444444713, 217.5555555555548, 220.6666666666659, 237.9999999999996, 227.33333333333252, 230.4444444444473, 233.55555555555475, 236.66666666666583, 254.99999999999957, 243.33333333333246, 246.44444444444753, 249.5555555555547, 252.66666666666578, 271.99999999999955, 259.3333333333324, 262.4444444444477, 265.55555555555463, 268.6666666666657, 288.99999999999955, 275.33333333333235, 278.4444444444479, 281.5555555555546, 284.66666666666566, 305.9999999999995, 291.3333333333323, 294.44444444444815, 297.5555555555545, 300.6666666666656, 322.99999999999943, 307.33333333333474, 310.4444444444458, 175.77777777777527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]))

    def test_null_nxinit_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.sample_down_1D_curve(nxinit=0, nnxo=180, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.sample_down_1D_curve(nxinit=0, nnxo=180, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_null_nnxo_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.sample_down_1D_curve(nxinit=100, nnxo=0, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.sample_down_1D_curve(nxinit=100, nnxo=0, pspcurv_nnxo_file=path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,"Sharpening-after-meridien/fsc_halves.txt"))
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_file_not_found(self):
        with self.assertRaises(IOError) as cm_new:
            fu.sample_down_1D_curve(nxinit=100, nnxo=180, pspcurv_nnxo_file="filenotfound.txt")
        with self.assertRaises(IOError) as cm_old:
            oldfu.sample_down_1D_curve(nxinit=100, nnxo=180, pspcurv_nnxo_file="filenotfound.txt")
        self.assertEqual(cm_new.exception.strerror, "No such file or directory")
        self.assertEqual(cm_new.exception.strerror, cm_old.exception.strerror)



class Test_get_initial_ID(unittest.TestCase):
    full_ID_dict = {0: 'ciao_0', 1: 'ciao_1', 2: 'ciao_2', 3: 'ciao_3'}

    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_initial_ID()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_initial_ID()
        self.assertEqual(cm_new.exception.message, "get_initial_ID() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_valid_list_dict(self):
        part_list = [0,1,2]
        return_new  = fu.get_initial_ID(part_list, self.full_ID_dict)
        return_old = oldfu.get_initial_ID(part_list, self.full_ID_dict)
        self.assertTrue(numpy.array_equal(return_new, return_old))

    def test_empty_list(self):
        return_new  = fu.get_initial_ID([], self.full_ID_dict)
        return_old = oldfu.get_initial_ID([], self.full_ID_dict)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))

    def test_invalid_value_in_list_KeyError(self):
        part_list = [0, 1, 20]
        with self.assertRaises(KeyError) as cm_new:
            fu.get_initial_ID(part_list, self.full_ID_dict)
        with self.assertRaises(KeyError) as cm_old:
            oldfu.get_initial_ID(part_list, self.full_ID_dict)
        self.assertEqual(cm_new.exception.message, 20)
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_dict_KeyError(self):
        part_list = [0, 1, 20]
        with self.assertRaises(KeyError) as cm_new:
            fu.get_initial_ID(part_list, {})
        with self.assertRaises(KeyError) as cm_old:
            oldfu.get_initial_ID(part_list, {})
        self.assertEqual(cm_new.exception.message, 0)
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_print_upper_triangular_matrix(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_upper_triangular_matrix()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_upper_triangular_matrix()
        self.assertEqual(cm_new.exception.message, "print_upper_triangular_matrix() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    @unittest.skip("which variable is the third parameter??")
    def test_print_upper_triangular_matrix(self):
        log_new =[]
        log_old = []
        size =4
        data=[]
        for i in range(size):
            for j in range(size):
                data.append((i,j*j))
        fu.print_upper_triangular_matrix(data,size,log_new)
        oldfu.print_upper_triangular_matrix(data, size, log_old)



class Test_convertasi(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.convertasi()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.convertasi()
        self.assertEqual(cm_new.exception.message, "convertasi() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.convertasi([],3)
        return_old = oldfu.convertasi([],3)
        self.assertTrue(numpy.allclose(return_new, return_old))
        self.assertTrue(numpy.allclose(return_new, [numpy.array([], dtype=int), numpy.array([], dtype=int), numpy.array([], dtype=int)]))

    def test_default_case(self):
        asig = [0,1,2,3,4,5,6]
        return_new = fu.convertasi(asig,7)
        return_old = oldfu.convertasi(asig,7)
        self.assertTrue(numpy.allclose(return_new,return_old))
        self.assertEqual(return_new, [numpy.array([0], dtype=int), numpy.array([1], dtype=int), numpy.array([2], dtype=int), numpy.array([3], dtype=int), numpy.array([4], dtype=int), numpy.array([5], dtype=int), numpy.array([6], dtype=int)])



class Test_prepare_ptp(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.prepare_ptp()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.prepare_ptp()
        self.assertEqual(cm_new.exception.message, "prepare_ptp() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.prepare_ptp([],3)
        return_old = oldfu.prepare_ptp([],3)
        self.assertTrue(numpy.allclose(return_new, return_old))
        self.assertTrue(numpy.allclose(return_new, []))

    def test_default_case(self):
        K = 7
        data_list = [[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6]]
        return_new = fu.prepare_ptp(data_list, K)
        return_old = oldfu.prepare_ptp(data_list, K)
        self.assertTrue(numpy.allclose(return_new, return_old))
        self.assertEqual(return_new, [[numpy.array([0], dtype=int), numpy.array([1], dtype=int), numpy.array([2], dtype=int), numpy.array([3], dtype=int), numpy.array([4], dtype=int), numpy.array([5], dtype=int), numpy.array([6], dtype=int)], [numpy.array([0], dtype=int), numpy.array([1], dtype=int), numpy.array([2], dtype=int), numpy.array([3], dtype=int), numpy.array([4], dtype=int), numpy.array([5], dtype=int), numpy.array([6], dtype=int)], [numpy.array([0], dtype=int), numpy.array([1], dtype=int), numpy.array([2], dtype=int), numpy.array([3], dtype=int), numpy.array([4], dtype=int), numpy.array([5], dtype=int), numpy.array([6], dtype=int)]])



class Test_print_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.print_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_dict()
        self.assertEqual(cm_new.exception.message, "print_dict() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_print_dict(self):
        dic = {'0': 'ciao_0', '1': 'ciao_1'}
        old_stdout = sys.stdout
        print_new = StringIO()
        sys.stdout = print_new
        return_new = fu.print_dict(dic, "title")
        print_old = StringIO()
        sys.stdout = print_old
        return_old = oldfu.print_dict(dic, "title")
        self.assertEqual(return_new,return_old)
        self.assertTrue(return_new is None)
        self.assertEqual(print_new.getvalue(), print_old.getvalue())
        sys.stdout = old_stdout

    def test_error_key_type(self):
        dic = {0: 'ciao_0', 1: 'ciao_1', 2: 'ciao_2', 3: 'ciao_3'}
        with self.assertRaises(TypeError) as cm_new:
            fu.print_dict(dic, " Test_print_dict.test_error_key_type")
        with self.assertRaises(TypeError) as cm_old:
            oldfu.print_dict(dic, " Test_print_dict.test_error_key_type")
        self.assertEqual(cm_new.exception.message, "cannot concatenate 'str' and 'int' objects")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_get_resolution_mrk01(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_resolution_mrk01()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_resolution_mrk01()
        self.assertEqual(cm_new.exception.message, "get_resolution_mrk01() takes exactly 5 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_radi_not_integer(self):
        v = [IMAGE_2D,IMAGE_2D_REFERENCE]
        return_new = fu.get_resolution_mrk01(deepcopy(v), 0.5,0.15,ABSOLUTE_PATH, None)
        return_old = oldfu.get_resolution_mrk01(deepcopy(v), 0.5,0.15,ABSOLUTE_PATH,None)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (-0.0061, 0.1617, 0.01)))
        remove_list_of_file([path.join(ABSOLUTE_PATH,"fsc.txt")])

    def test_radi_integer_no_mask(self):
        v = [IMAGE_3D,IMAGE_3D]
        return_new = fu.get_resolution_mrk01(deepcopy(v), 1,IMAGE_3D.get_xsize(),ABSOLUTE_PATH, None)
        return_old = oldfu.get_resolution_mrk01(deepcopy(v), 1,IMAGE_3D.get_xsize(),ABSOLUTE_PATH,None)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.2, 0.2, 0.47)))
        remove_list_of_file([path.join(ABSOLUTE_PATH, "fsc.txt")])

    def test_radi_integer_with_mask(self):
        v = [IMAGE_3D,IMAGE_3D]
        mask_option = [fu.model_circle(1,IMAGE_3D.get_xsize(),IMAGE_3D.get_ysize(),IMAGE_3D.get_zsize())]
        return_new = fu.get_resolution_mrk01(deepcopy(v), 1,None,ABSOLUTE_PATH, mask_option)
        return_old = oldfu.get_resolution_mrk01(deepcopy(v), 1,None,ABSOLUTE_PATH,mask_option)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.2, 0.2, 0.47)))
        remove_list_of_file([path.join(ABSOLUTE_PATH, "fsc.txt")])

    def test_with_invalid_mask_returns_RuntimeError_ImageFormatException(self):
        v = [IMAGE_3D,IMAGE_3D]
        mask_option = [fu.model_circle(1,IMAGE_3D.get_xsize()+10,IMAGE_3D.get_ysize(),IMAGE_3D.get_zsize())]
        with self.assertRaises(RuntimeError) as cm_new:
            fu.get_resolution_mrk01(deepcopy(v), 1,None,ABSOLUTE_PATH, mask_option)
        with self.assertRaises(RuntimeError) as cm_old:
            oldfu.get_resolution_mrk01(deepcopy(v), 1,None,ABSOLUTE_PATH,mask_option)
        msg = cm_new.exception.message.split("'")
        msg_old = cm_old.exception.message.split("'")
        self.assertEqual(msg[0].split(" ")[0], "ImageFormatException")
        self.assertEqual(msg[1], "can not multiply images that are not the same size")
        self.assertEqual(msg[0].split(" ")[0], msg_old[0].split(" ")[0])
        self.assertEqual(msg[1], msg_old[1])
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_partition_to_groups(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.partition_to_groups()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.partition_to_groups()
        self.assertEqual(cm_new.exception.message, "partition_to_groups() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.partition_to_groups([],3)
        return_old = oldfu.partition_to_groups([],3)
        self.assertTrue(numpy.allclose(return_new, return_old))
        self.assertTrue(numpy.allclose(return_new, [[], [], []]))

    def test_default_case(self):
        K = 7
        data_list = [[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6]]
        return_new = fu.partition_to_groups(data_list, K)
        return_old = oldfu.partition_to_groups(data_list, K)
        self.assertTrue(numpy.allclose(return_new, return_old))
        self.assertTrue(numpy.allclose(return_new, [[], [], [], [], [], [], []]))



class Test_partition_independent_runs(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.partition_independent_runs()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.partition_independent_runs()
        self.assertEqual(cm_new.exception.message, "partition_independent_runs() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.partition_independent_runs([],3)
        return_old = oldfu.partition_independent_runs([],3)
        self.assertDictEqual(return_new,return_old)
        self.assertEqual(return_new, {})

    def test_default_case(self):
        K = 7
        data_list = [[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6]]
        return_new = fu.partition_independent_runs(data_list, K)
        return_old = oldfu.partition_independent_runs(data_list, K)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, {0: [[0], [1], [2], [3], [4], [5], [6]], 1: [[0], [1], [2], [3], [4], [5], [6]], 2: [[0], [1], [2], [3], [4], [5], [6]]})




class Test_merge_groups(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.merge_groups()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.merge_groups()
        self.assertEqual(cm_new.exception.message, "merge_groups() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_list(self):
        return_new = fu.merge_groups([])
        return_old = oldfu.merge_groups([])
        self.assertTrue(numpy.allclose(return_new, []))

    def test_default_case(self):
        data_list = [[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6]]
        return_new = fu.merge_groups(data_list)
        return_old = oldfu.merge_groups(data_list)
        self.assertEqual(return_new, [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6])



class Test_save_alist(unittest.TestCase):
    filename_new = "listfile.txt"
    filename_old = "listfile2.txt"
    data_list = [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.save_alist()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.save_alist()
        self.assertEqual(cm_new.exception.message, "save_alist() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_create_files(self):
        Tracker = deepcopy(TRACKER)
        Tracker["this_dir"] = ABSOLUTE_PATH
        Tracker["constants"]["log_main"] = "logging"
        Tracker["constants"]["myid"] = "myid"
        Tracker["constants"]["main_node"] = "myid"

        fu.save_alist(Tracker, self.filename_new, self.data_list)
        oldfu.save_alist(Tracker,self.filename_old, self.data_list)
        self.assertEqual(returns_values_in_file(path.join(ABSOLUTE_PATH,self.filename_new)),returns_values_in_file(path.join(ABSOLUTE_PATH,self.filename_old)))
        remove_list_of_file([path.join(ABSOLUTE_PATH,self.filename_new),path.join(ABSOLUTE_PATH,self.filename_old)])

    def test_no_create_files(self):
        Tracker = deepcopy(TRACKER)
        Tracker["this_dir"] = ABSOLUTE_PATH
        Tracker["constants"]["log_main"] = "logging"
        Tracker["constants"]["myid"] = "myid"
        Tracker["constants"]["main_node"] = "different myid"

        fu.save_alist(Tracker, self.filename_new, self.data_list)
        oldfu.save_alist(Tracker, self.filename_old, self.data_list)

        self.assertFalse(path.isfile(path.join(ABSOLUTE_PATH, self.filename_new)))
        self.assertFalse(path.isfile(path.join(ABSOLUTE_PATH, self.filename_old)))



class Test_margin_of_error(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.margin_of_error()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.margin_of_error()
        self.assertEqual(cm_new.exception.message, "margin_of_error() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.margin_of_error(0.2,0.1)
        return_old = oldfu.margin_of_error(0.2,0.1)
        self.assertEqual(return_new, 1.2649110640673518)



class Test_do_two_way_comparison(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.do_two_way_comparison()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.do_two_way_comparison()
        self.assertEqual(cm_new.exception.message, "do_two_way_comparison() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_defaault_case(self):
        Tracker = deepcopy(TRACKER)
        Tracker["this_dir"] = ABSOLUTE_PATH
        Tracker["constants"]["log_main"] = "logging"
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 1
        Tracker["this_total_stack"] = 10
        Tracker["number_of_groups"] = 4
        Tracker["constants"]["indep_runs"]  = 4
        Tracker['full_ID_dict'] = {0: 0, 1: 1, 2:2, 3: 3}
        Tracker["partition_dict"]    = [[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]]
        Tracker["chunk_dict"] = [0, 1, 2, 3]
        Tracker["P_chunk0"] = 0.2
        Tracker["constants"]["smallest_group"] = 2
        Tracker2 = deepcopy(Tracker)
        return_new = fu.do_two_way_comparison(Tracker)
        return_old = oldfu.do_two_way_comparison(Tracker2)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, None)
        self.assertTrue(numpy.array_equal(Tracker["score_of_this_comparison"], Tracker2["score_of_this_comparison"]))


class Test_select_two_runs(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.select_two_runs()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.select_two_runs()
        self.assertEqual(cm_new.exception.message, "select_two_runs() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        summed_scores = [0,1,2,3,4]
        two_way_dict = [3.2,1.43,54,32,543]
        return_new = fu.select_two_runs(summed_scores,two_way_dict)
        return_old = oldfu.select_two_runs(summed_scores,two_way_dict)
        self.assertTrue(numpy.array_equal(return_new, (32, 543, 4, 3)))

    def test_returns_IndexError_list_index_out_of_range(self):
        summed_scores = [0,1,2,3,4]
        two_way_dict = [3.2]
        with self.assertRaises(IndexError) as cm_new:
            fu.select_two_runs(summed_scores,two_way_dict)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.select_two_runs(summed_scores,two_way_dict)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_summed_scores_empty_returns_IndexError_list_index_out_of_range(self):
        summed_scores = []
        two_way_dict = [3.2]
        with self.assertRaises(IndexError) as cm_new:
            fu.select_two_runs(summed_scores,two_way_dict)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.select_two_runs(summed_scores,two_way_dict)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_two_way_dict_empty_returns_IndexError_list_index_out_of_range(self):
        summed_scores = [0,1,2,3,4]
        two_way_dict = []
        with self.assertRaises(IndexError) as cm_new:
            fu.select_two_runs(summed_scores,two_way_dict)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.select_two_runs(summed_scores,two_way_dict)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_counting_projections(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.counting_projections()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.counting_projections()
        self.assertEqual(cm_new.exception.message, "counting_projections() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_ali3d_params_empty(self):
        return_new = fu.counting_projections(delta = 0.5, ali3d_params =[], image_start = 1)
        return_old = oldfu.counting_projections(delta = 0.5, ali3d_params =[], image_start = 1)
        self.assertDictEqual(return_new,return_old)

    def test_default_case(self):
        ali3d_params  = [[idx1, idx2, 0 , 0.25, 0.25] for idx1 in range(2) for idx2 in range(2)]
        return_new = fu.counting_projections(delta = 0.5, ali3d_params =ali3d_params, image_start = 1)
        return_old = oldfu.counting_projections(delta = 0.5, ali3d_params =ali3d_params, image_start = 1)
        self.assertDictEqual(return_new,return_old)



class Test_unload_dict(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.unload_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.unload_dict()
        self.assertEqual(cm_new.exception.message, "unload_dict() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        dict_angles = {(0.64764598050589606, 53.04857999805229) : [], (10.262155636450808, 97.18016191759037) : [], (100.75772287892256, 50.274472062413594) : [], (101.11458591875028, 44.457078732458605) : []}
        return_new = fu.unload_dict(dict_angles)
        return_old = oldfu.unload_dict(dict_angles)
        self.assertTrue(numpy.allclose(return_new, [[101.11458591875028, 44.457078732458605], [10.262155636450808, 97.18016191759037], [0.6476459805058961, 53.04857999805229], [100.75772287892256, 50.274472062413594]]))

    def test_empty_dict(self):
        return_new = fu.unload_dict({})
        return_old = oldfu.unload_dict({})
        self.assertTrue(numpy.allclose(return_new, []))



class Test_load_dict(unittest.TestCase):
    ali3d_params = [[idx1, idx2, 0, 0.25, 0.25] for idx1 in range(2) for idx2 in range(2)]
    sampled = fu.counting_projections(delta=0.5, ali3d_params=ali3d_params, image_start=1)
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.load_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.load_dict()
        self.assertEqual(cm_new.exception.message, "load_dict() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        # result to big. could be used the pickle for storing this data?
        d = fu.unload_dict(self.sampled)
        return_new = fu.load_dict(deepcopy(self.sampled), d)
        return_old = oldfu.load_dict(deepcopy(self.sampled), d)
        self.assertDictEqual(return_new,return_old)

    def test_empty_unloaded_dict_angles(self):
        # result to big. could be used the pickle for storing this data?
        return_new = fu.load_dict(deepcopy(self.sampled), [])
        return_old = oldfu.load_dict(deepcopy(self.sampled), [])
        self.assertDictEqual(return_new,return_old)

    def test_dict_angle_main_node(self):
        d = fu.unload_dict([])
        return_new = fu.load_dict([], d)
        return_old = oldfu.load_dict([], d)
        self.assertTrue(numpy.array_equal(return_new,return_old))
        self.assertEqual(return_new, [])

    def test_empty_all(self):
        return_new = fu.load_dict({}, [])
        return_old = oldfu.load_dict({}, [])
        self.assertDictEqual(return_new,{})
        self.assertDictEqual(return_new, return_old)




class Test_get_stat_proj(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_stat_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_stat_proj()
        self.assertEqual(cm_new.exception.message, "get_stat_proj() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_myid_same_value_as_main_Node(self):
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["nproc"] = 1
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        this_ali3d = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER,'Initial3D//main001/run000/rotated_reduced_params.txt')
        Tracker2 = deepcopy(Tracker)

        return_new = fu.get_stat_proj(Tracker,delta = 5,this_ali3d=this_ali3d)
        return_old = oldfu.get_stat_proj(Tracker2,delta = 5,this_ali3d=this_ali3d)
        self.assertDictEqual(return_new,return_old)
        self.assertDictEqual(return_new, {(239.83725161472682, 34.32194941451909): [], (103.77643540278966, 71.33707511505752): [], (290.07472254019615, 98.11592924080134): [], (231.75902476866551, 169.96644317376868): [], (316.37403003265143, 64.49510317767826): [], (217.88200331799396, 164.9903791502494): [], (19.774990665148692, 138.13384266895085): [], (171.17270056579099, 62.53695091221686): [], (298.91965634545465, 54.54945736082458): [], (205.59793167440634, 111.5343412661951): [], (274.08677259413264, 25.057615418303023): [], (148.03812218633067, 91.3482604150222): [], (220.82381017489928, 58.351554491017154): [], (285.10789217692422, 59.21855243579674): [], (353.76416679400427, 79.56170661556362): [], (24.269454053805148, 109.0903549428155): [], (158.24570214975125, 8.797410709991048): [], (4.8059923649976213, 137.93223765241342): [], (233.08905524636486, 92.49483987665928): [], (170.02801654661363, 149.84913781566883): [], (57.711800215689323, 61.00679557990334): [], (23.964522632106693, 104.23398403046221): [], (48.859473508421232, 133.6766908418426): [], (286.99787206579697, 83.51511053854594): [], (135.70568585980573, 81.4753269035727): [], (29.372858128566897, 152.79942233405984): [], (301.17196288329285, 35.15005577055701): [], (278.20469572610108, 49.414033012567195): [], (138.89747531787543, 96.07800505849684): [], (88.028894707696892, 90.53926235704517): [], (179.42556130364653, 130.5859669874328): [], (162.88642477271108, 86.69523471149502): [], (66.480143603374572, 65.97979188671809): [], (219.28735281900242, 9.638979412512889): [], (113.03102302456985, 90.87632255825744): [], (56.012713543928839, 46.4164370315091): [], (98.688579230489268, 95.53596711920669): [], (340.18270201767552, 40.53580211131656): [], (91.089162077835198, 124.54538217884104): [], (12.101938358714667, 55.536414070491674): [], (278.85939220298349, 107.66971165604207): [], (358.31045035675317, 94.18293633089255): [], (41.164988355290497, 41.358641634282336): [], (309.77696392019169, 69.26062329814772): [], (6.635592091699845, 123.40737773140071): [], (166.02223944612984, 81.88407075919865): [], (66.80054006660383, 99.95886951088143): [], (159.8987701243347, 62.38491044515201): [], (73.957214030031039, 114.61196062055488): [], (48.479149346457511, 94.85911217381467): [], (193.6929019742071, 53.13010235415598): [], (253.74668889043321, 121.8862981248596): [], (115.84059481900161, 27.784651210218723): [], (24.255837521063899, 79.97268528166225): [], (130.58413387642784, 110.52329842667419): [], (61.683519459101348, 27.052742429748992): [], (254.0176902387735, 160.65298274298343): [], (313.68377941649925, 112.99110606827777): [], (66.680532246070698, 109.66198848942666): [], (245.46935957966946, 73.2476648864461): [], (301.55180848630943, 40.014445966259665): [], (0.0, 180.0): [], (33.426538054435085, 94.65619249668148): [35, 38, 40, 41, 42], (183.41239535235781, 120.93849550806387): [], (68.457566605122167, 114.53783983593641): [], (137.19097785528206, 52.367951630852616): [], (158.24326067314547, 28.35763657632798): [], (325.41463022601221, 45.194212372091116): [], (108.73718395650583, 95.67142810391188): [], (234.68996393267071, 68.24810015441338): [], (232.90609070681143, 63.36948149499615): [], (109.3485901138684, 158.7115927728546): [], (164.04850552187077, 96.4170531430287): [], (28.338006382236287, 46.043053276232335): [], (250.40484272591269, 24.73738984490336): [], (8.3484743230485954, 94.31812178851712): [], (353.83937465764706, 132.93564514784396): [], (173.38661860949529, 111.10019602409304): [], (132.183780782642, 57.15604215404191): [], (169.08070315247133, 96.48488946145406): [], (167.89441620922022, 86.76275151200221): [], (202.34896395526158, 67.81198798502527): [], (61.493655266498749, 70.76692409795508): [], (145.99515875128782, 125.28521889393367): [], (12.63079718126211, 123.4881635959913): [], (60.118173705488402, 104.72130789481913): [], (118.12986574162949, 37.538775189688025): [], (36.107908134670652, 75.27869210518088): [], (39.060971933136237, 118.99320442009667): [], (107.77471045335651, 85.95222580318716): [], (294.19377383001898, 64.19598948463411): [], (302.78209993236607, 74.02045758436027): [], (313.01088966259755, 88.71916413332387): [], (304.45358925001398, 49.768136460819186): [], (196.94910213614438, 67.73917161350815): [], (7.4363802306108084, 84.59946283186504): [], (252.47079233020685, 15.00962084975062): [], (308.53850768871501, 15.771578129121457): [], (296.73344717316695, 59.375344374371615): [], (317.52675385749973, 49.944494843807384): [], (64.838512080371984, 80.51985099198731): [], (197.29968869723476, 58.03428124920305): [], (344.22467334365012, 35.73129197996368): [], (68.556432776294116, 95.12976725858039): [], (165.05124350872205, 47.887518669881516): [], (74.97396638965246, 80.65650418800205): [], (56.770340845241009, 75.55729380808995): [80], (221.18996704913354, 77.77421140684253): [], (51.416185998926338, 153.09584354095557): [], (242.16927819245598, 107.17517478604191): [], (142.62591597320181, 37.86942607214865): [], (79.196439534981025, 119.53408057909498): [], (160.97165504747156, 81.81597622686058): [], (114.31363701195421, 56.91501881321111): [], (35.272875665976649, 46.13661821040938): [], (200.71778902515814, 77.49818220833534): [], (9.2276980040757621, 31.207757164705757): [], (288.67295869133039, 127.20768036166155): [], (135.3954713461541, 71.76343085081976): [], (332.25821468765855, 84.12532052635393): [], (46.500905840133932, 99.68523115350966): [], (205.83785848021824, 77.56721689295962): [], (212.55060045308289, 116.47980528023409): [], (19.178277061502833, 79.90422561370437): [], (261.13575775861733, 155.915018231783): [], (138.18841363682904, 42.667925494108374): [], (112.53801057119246, 100.57540596643712): [], (28.847369333049425, 50.906465185304945): [], (341.49219889373057, 166.6409285859774): [], (292.78179864370168, 54.46666807706943): [], (92.199187797649415, 100.30124122384984): [], (335.66280435088044, 35.61570419541684): [], (271.54870296924105, 73.59931408796062): [], (2.1313762051486833, 16.499234491237342): [], (143.92637798874884, 96.14579720256098): [], (55.528911571385819, 65.83211186325346): [], (271.95750028221272, 63.8961188626601): [], (289.18601235497806, 122.36385994497876): [], (258.42671745330591, 49.14722090259065): [], (15.533219044475857, 6.81176397112579): [], (195.08565130834253, 121.09580190105879): [], (152.66826735362793, 23.415513615494444): [], (180.02306520910329, 149.98361164018726): [], (165.06415142701721, 140.09050345032978): [], (73.222185677649534, 167.86283423034675): [], (309.09173732802213, 25.530904571684264): [], (288.00322171288013, 88.38202178121018): [], (254.09727545152359, 112.18801201497473): [], (237.90605193378349, 111.96978853756661): [], (9.4964864968354838, 50.645427321467544): [], (291.3463676109854, 49.59131762469191): [], (148.95592504606157, 96.21359798470844): [], (221.24765740607717, 106.89317608794337): [], (198.60834792825469, 48.34023455390632): [], (218.14028688085656, 116.5551371256661): [], (300.24662965061759, 161.2729529337236): [], (285.02413814153783, 98.04784624731151): [], (125.59306753425598, 81.3389828169029): [], (152.90172696135178, 42.86646669570318): [], (153.64812903221284, 67.1552612722227): [], (349.5416098463387, 64.94238458169698): [], (232.51452607493604, 111.89712200707993): [], (251.7579317360395, 83.03999510763894): [], (87.722136823385455, 85.68187821148287): [], (131.11794115714292, 120.23378001146453): [], (173.66604756161036, 101.39939905494025): [], (230.22256741276868, 121.56929663612618): [], (110.16082286333564, 66.56883306532724): [], (251.11035087631589, 126.70156586098466): [], (137.98726234175163, 100.91845745808826): [], (12.458116306308446, 84.6671664128066): [], (313.85539973238582, 127.54698186688891): [], (92.867925646344929, 76.04401299573793): [], (43.461114520881047, 94.79146561951097): [7, 13, 14, 15, 16], (150.86789958278413, 81.67975213708839): [], (101.50476774132932, 114.98322787079482): [], (167.77986661619531, 57.63614005502124): [], (179.08887730545533, 116.02884175573367): [], (257.52101226480892, 165.5200718633996): [], (287.58033718459387, 78.66935591947826): [], (18.16039839578081, 55.61813025121971): [], (248.69741363240638, 112.11523336674097): [], (333.42083005465878, 79.287420163905): [], (143.08062329609169, 100.98711492012907): [], (281.96723618858442, 73.73979529168804): [], (123.81456080425421, 95.87467947364607): [], (214.95032676046532, 58.27233816862593): [], (54.388392307548557, 56.10676813739431): [], (172.84168186156688, 130.49726612326396): [], (283.15196137844748, 93.16973618723937): [], (123.96953694681255, 144.3842958045832): [], (174.11358172592222, 96.55273491050659): [], (227.96655657912046, 87.57262915997003): [], (187.92314944015664, 87.03277466243195): [], (61.931898811788102, 75.6268894771575): [], (237.52427790079255, 165.25289984054433): [], (27.520051608475871, 84.87023274141961): [], (91.102867322199529, 7.867094614176662): [], (136.90972853211784, 120.31183012598966): [], (243.09933058833366, 92.62978842947312): [], (158.26457894396614, 125.45054263917542): [], (181.78101418259575, 18.935875672060185): [], (195.13957220896046, 106.54126856799934): [], (353.88089290778584, 55.29078350193616): [], (199.9360267113519, 53.21431446882938): [], (268.16676699980218, 54.134651313658814): [], (227.31272156354498, 63.29405035317279): [], (164.40876412756523, 125.53333192293059): [], (285.82285083716408, 25.21630055349067): [], (68.369682527070367, 158.1613795692733): [], (102.3730223524984, 56.75396919001033): [], (174.9221306217286, 52.87690644592185): [], (201.38220816613409, 116.32928928221982): [], (266.33662668345016, 73.52903550813097): [], (328.27295917221625, 11.134526883912168): [], (109.3362031903938, 124.79125538196327): [], (103.24782158776546, 124.70921649806385): [], (168.72221288066618, 28.49922948656629): [], (118.59609489759697, 134.61608696072412): [], (340.19057721121033, 132.75177774588403): [], (343.57245315078728, 50.29585111213955): [], (67.336666873157739, 51.42566859549418): [], (27.632433642763591, 118.83918940061731): [], (81.278322005789164, 143.80955786623255): [], (179.60325736038098, 57.79560548470835): [], (254.73826235167201, 97.63958490353308): [], (323.24230222336593, 79.1501841370031): [], (171.75835586710488, 120.78144756420326): [], (83.505906930489175, 27.347674402796432): [], (126.31550017214971, 37.64926683894324): [], (311.17651817001064, 54.714781106066354): [], (194.85020552798031, 111.38948332618493): [], (271.02331237856487, 29.88136600679995): [], (2.1869879720285326, 157.27252663153487): [], (133.75079140312261, 125.12023203568327): [], (98.018460917784481, 76.11345963737101): [], (276.93279586174549, 83.37941041095732): [], (238.41440865375444, 58.58880004972134): [], (54.755849949280332, 124.05579774256792): [], (328.7020227543282, 147.1401196211109): [], (0.48871785429753345, 45.66730835583508): [], (336.40120015532671, 118.14890851298503): [], (320.627029759327, 25.68685746086934): [], (347.26994218487818, 108.59179184826024): [], (329.99587845237676, 113.21095532664631): [], (17.479302104120702, 84.7348625267671): [], (162.37341889633751, 52.70763791098592): [], (138.03548792507013, 91.2134130922969): [], (82.036459169537068, 100.16424862172349): [], (238.45626525457834, 24.5758120707033): [], (6.0900508127542219, 65.16541251029842): [], (188.97536673110949, 101.60576425897996): [], (96.394479131945388, 56.673333074420135): [], (246.75032281166293, 78.11884397898929): [], (213.14032565388447, 67.95750773402241): [], (172.18698538468433, 72.25953003499768): [], (322.20480358821698, 83.98977854565446): [], (82.623574986900337, 109.87687407007884): [], (202.94150145485958, 87.23524841730068): [], (294.61455804687171, 107.88207062500425): [], (314.13664905555009, 59.610057550672394): [], (323.62886284812663, 156.7546914823545): [], (87.942728089069021, 109.94856722604813): [], (231.04977489843247, 53.63399801370294): [], (236.93590314503373, 107.10463517664381): [], (171.07197171642221, 81.95215375268847): [], (357.59733040813308, 142.68304462711026): [], (250.82364715228749, 68.4656587338049): [], (308.08787549174303, 117.7673413729364): [], (130.13105281514032, 71.69244482292976): [], (158.36787378198849, 101.19318360568383): [], (42.577228241210186, 85.07323448156838): [], (119.90892063652066, 110.37941574777419): [], (39.078297353449912, 65.61027068821267): [], (84.947564995085756, 119.61158380277804): [], (216.02216813733671, 106.82274251625043): [], (104.7114599814381, 66.49534779993832): [], (220.41861924135287, 150.5270683415096): [], (281.07795162507426, 102.8472702420185): [], (279.26467679346052, 131.9310096357791): [], (348.68002734662377, 79.49315793130248): [], (231.93171665228002, 48.78978993661076): [], (266.86496652852856, 83.24367296941216): [], (277.89258360904199, 165.79215771960665): [], (186.14095122247952, 67.59342499386679): [], (318.86259680502593, 122.76376225936458): [], (47.472115233020823, 31.72429315759589): [], (193.67421212893859, 62.84040554975123): [], (142.50786989895289, 163.9822940432013): [], (8.4033163283465928, 108.87650363055921): [], (283.08270376729422, 64.04614966191718): [], (206.77830761152794, 121.25336921502438): [], (72.638375507113892, 138.84579803992781): [], (125.55339445744349, 8.345135047331667): [], (325.7156202565738, 59.76621998853546): [], (72.250218365959327, 75.76601596953779): [81], (72.895979191887079, 124.30023323625149): [], (24.375845341597149, 70.266415142624): [], (331.45063444934664, 108.37857031560964): [], (84.420785495968047, 56.511836404008726): [], (243.44839022599422, 53.80123771985467): [], (0.58055527873847268, 65.0911147032702): [], (313.80304699591966, 20.72428624890826): [], (71.560551917159188, 163.03252818147726): [], (51.574239052103614, 99.75361958475963): [74], (209.1862196961041, 160.0515564111973): [], (318.15129518105732, 79.08154254191174): [], (73.577075483546992, 95.19744872931129): [], (257.4921070453812, 34.56032177999784): [], (336.72154711731412, 108.44961470987212): [], (312.1489022697923, 83.85420279743904): [], (190.22834481072542, 116.1789687040125): [], (298.37811023404015, 156.41544091012184): [], (293.16828153759695, 93.304765288505): [], (335.20578276866661, 152.0710899641419): [], (206.17231225268213, 53.29843413901534): [], (255.82315639496687, 146.15921148511077): [], (357.38122846109559, 84.46403288079331): [], (178.50258263949843, 48.068990364220895): [], (281.96567443519638, 83.44726508949341): [], (198.06092401506152, 92.02262405306612): [], (276.17677743479589, 136.73865583226933): [], (140.65774662824035, 71.83438791265839): [], (69.13185660675083, 61.1608105993827): [], (310.30253501729129, 146.89248258290462): [], (72.621879966269461, 27.200577665940166): [91], (112.54708784476257, 115.13204814658945): [], (93.264303292564335, 110.02029295683069): [], (81.918187679666303, 158.34330476731753): [], (12.283150771243207, 138.0329415654861): [], (144.30510451979708, 76.73755763970688): [], (87.715842740912635, 75.97454542942798): [], (354.65189845572252, 123.24603080998969): [], (347.87892008090409, 103.74770937037358): [], (276.12424696593928, 127.0386011640495): [], (113.09812094683822, 32.610575141340405): [], (148.26427765530173, 105.90943859818117): [], (289.36074937300208, 107.81125624086954): [], (47.59526306678665, 85.14088782618536): [], (29.124478775879659, 104.30353650992527): [], (211.216839681446, 43.65335068158568): [], (44.781637195256998, 119.07029795747032): [], (163.84455029923464, 173.78234974806787): [], (204.90207668242789, 62.99182355071222): [], (110.41727341526739, 81.13437372795828): [], (17.368461937224005, 26.453766696731943): [88], (205.84922110487187, 130.9419552751764): [], (175.20957770346996, 135.3786786359204): [], (335.56958036287659, 98.72920771485336): [], (144.07033273568274, 57.31636115374206): [], (163.04315587478749, 91.55054563915826): [], (107.02424826080984, 115.05761541830303): [], (266.93324309646283, 68.68289181915962): [], (333.36749024888644, 6.217650251932134): [], (160.9850801975339, 135.18707502350586): [], (349.88160231816346, 30.946587522235692): [], (308.42046161446655, 142.02090146717967): [], (36.483012737133947, 172.1329053858233): [], (97.647473033971352, 168.187717772459): [], (91.056377587667441, 177.2204739127817): [], (8.172861632616808, 113.72535483366764): [], (315.34069172786201, 98.45651933527051): [], (64.365640182382634, 143.5818603253773): [], (353.02791666988333, 103.81711452484207): [], (268.70640914615984, 44.4290662668587): [], (225.38154038972957, 136.05448043769115): [], (8.0277043479715697, 89.46073764295483): [], (234.56391799190774, 97.36762859370157): [], (242.97857796876343, 87.77501643951139): [], (162.40638022597304, 115.80401051536589): [], (123.03248009188044, 91.01115447810518): [], (292.3783424416772, 73.88017610521102): [], (347.13161087578857, 69.7643328291164): [], (165.6280857140712, 159.46704235891468): [], (240.53603011719963, 116.85696213776339): [], (293.7755256946308, 39.9094965496702): [], (216.07393900622696, 77.70523137768241): [], (124.55663930774459, 52.19752564224628): [], (356.5457430177504, 50.47085921947303): [], (143.06513038081167, 105.83935922114321): [], (62.961171780489707, 114.46376280000737): [], (15.223859123096595, 157.44763729922224): [], (13.689762185445517, 108.94775691762473): [], (93.665149126572089, 95.4682483130948): [], (80.251746012135399, 138.94833133513646): [], (310.8341614590725, 64.42039495778339): [], (357.78207429510354, 69.90794858057335): [], (203.64172745742405, 72.68366530148162): [], (359.12478932335449, 118.45514313786411): [], (209.07182816271524, 58.193054072152925): [], (309.8316655942935, 35.26696909467743): [], (154.57474939747854, 76.87602601043702): [], (304.23795537435592, 44.90848520136727): [], (356.70990519773795, 152.36030027863254): [], (109.55417869393735, 13.06413616013794): [], (132.89508240661038, 100.84981586299692): [], (220.42211020237514, 29.197756850958083): [], (67.091854955561075, 75.69646349007473): [76], (226.56493960517409, 82.70033416870608): [], (150.7510565477842, 37.97909853282036): [], (0.68910577677166884, 133.0277849099381): [], (288.37581890050143, 68.97203749226544): [], (241.97454942495273, 121.72766183137408): [], (305.29083985507816, 64.34564007916009): [], (18.806159221708448, 104.1644529620738): [], (137.84126774007274, 86.35757989712816): [], (180.01289789107267, 159.66009223088608): [], (11.596248525534557, 65.23966575577474): [], (3.3405348467551335, 103.95598700426208): [], (56.063735567265887, 109.51889145641034): [], (36.300527638387557, 55.86280237288487): [], (328.01389749578726, 88.92142750852362): [], (71.28138692251953, 41.76505755948932): [], (160.23786680769851, 42.96545970387165): [], (282.32416470700201, 151.35981917194164): [], (20.593815538356651, 75.06950737836051): [], (253.11070291140618, 92.76475158269932): [], (40.156159449241429, 109.30448285858732): [60], (68.651331188450584, 129.0935348146951): [], (185.21394653371192, 48.15953276935937): [], (208.87709939521187, 72.75425875261716): [], (63.536325979191822, 95.06209296428466): [], (336.38662192512231, 156.926081934369): [], (31.287097398294378, 99.4801490080127): [], (186.2161312672936, 82.15633451879799): [], (70.238925084561288, 17.423490223339854): [], (134.02962319392185, 76.59901034973039): [], (115.4767972247912, 81.20258929000894): [], (205.29149792821127, 48.43039545657391): [], (125.33075733109416, 120.15579181286795): [], (48.127038482794568, 51.16654031857443): [], (295.12616663496306, 98.18402377313944): [], (60.245030083433733, 36.757405666750024): [], (98.498931266280294, 71.26591223753202): [], (182.43113376244321, 62.688781972182106): [], (341.7101743972741, 55.126624037462186): [], (109.92370324270705, 37.42800554304254): [], (204.29081303940117, 140.6187436136247): [], (226.20588703858218, 126.36600198629706): [], (295.11075145530333, 122.44369815071371): [], (159.70000997668254, 130.32021506997066): [], (77.41883604468768, 66.12730246898006): [], (310.96000672040856, 156.58448638450557): [], (338.49928974290549, 64.7934737360752): [], (222.07455570469142, 34.08211549275873): [], (15.419112906095913, 74.9997340042615): [], (66.786923533862705, 70.83830001952798): [], (103.18667799906341, 139.25720458351415): [], (63.423943944904394, 61.083831676468876): [], (87.117273251691472, 100.23273753178681): [], (298.66138914961391, 166.0694454376424): [], (319.79310007777514, 132.47699429396988): [], (98.029521064766726, 90.67408354467482): [], (141.73516620336895, 139.77633882050245): [], (272.99672266388899, 88.17971021689422): [], (18.027998478898603, 89.59555584468384): [], (345.68956399537012, 98.86562627204172): [], (53.497691427817827, 94.92676551843161): [75], (248.67801764017261, 34.441316364595345): [], (298.14465062631643, 137.03454029612834): [], (355.05774671534641, 65.01677212920518): [], (128.84157399945073, 95.94244629204616): [], (282.95506880557633, 44.62132136407959): [], (327.07684064085566, 35.49978996837964): [], (139.16809778818438, 76.66829391868033): [], (45.456350796572181, 109.37592100167409): [], (210.98440856695117, 135.8605573837922): [], (130.44660561979205, 149.31658289102418): [], (86.732123755820851, 17.647214550449316): [], (212.95231829939158, 87.37021157052688): [], (149.8744147043754, 144.73303090532258): [], (62.698207528039354, 22.198215412403602): [], (102.76220696064632, 85.88464760382183): [], (10.804631575532829, 40.94892424054838): [], (189.42582074266235, 9.22771094513194): [], (62.523018228723657, 153.24519281556678): [], (39.640191588741921, 26.754807184433204): [], (282.39509175642814, 127.12309355407817): [], (173.69415560269042, 57.71590782005459): [], (46.27474039241099, 60.852550795777596): [], (95.576864639938265, 158.52669651032028): [], (336.73274057571371, 123.0045669534804): [], (23.348971249231479, 60.54336329342544): [], (109.24367838714694, 110.2356671708836): [], (212.63196893391353, 121.33225149759427): [], (277.52187683625891, 63.971158244266334): [], (199.18788169908171, 101.7434257442841): [], (203.0604907516433, 169.58665915262745): [], (90.1697409980451, 80.86138373412997): [], (123.23636667253045, 158.89803317677553): [], (305.05121883638003, 54.63216155929397): [], (211.96535498846072, 48.520430704050725): [], (290.14282466044074, 15.521648490214371): [], (247.85808735044006, 121.80694592784707): [], (23.393904926113958, 94.52094538046123): [], (324.81390969043628, 122.84395784595806): [], (55.774597724153125, 128.9200454099483): [], (26.690737405285624, 36.30444486138627): [], (119.5957431383212, 71.55038529012788): [], (191.54643559828466, 67.6663173421947): [], (160.9035529272272, 164.22842187087855): [], (106.53047808588657, 163.50076550876267): [], (88.026217342052618, 129.3545726785325): [], (258.11681791735901, 92.83223887001554): [], (320.91532477252753, 108.23656914918026): [], (252.64202919958313, 107.31633469851836): [], (42.691514411343263, 123.89323186260569): [], (79.460129062133447, 114.68612535573058): [], (297.90425998437428, 49.67978493002937): [], (7.5504706571790621, 152.50595544641877): [], (93.449047179535228, 37.2056221167311): [], (299.87046748352151, 107.95291325921967): [], (51.889808300518204, 36.644617216858975): [], (291.33897259512742, 102.98558359600642): [], (152.86942301666608, 86.5601872324848): [], (62.904630607221932, 46.509421063145076): [], (322.15670562759971, 103.40098965026961): [], (357.82716941153575, 108.73408776246798): [], (262.07101085655825, 78.3254135411771): [], (234.97243858144074, 102.22578859315747): [], (263.60347561346072, 126.86989764584403): [], (251.75634021494776, 117.00817644928779): [], (336.47131850442764, 69.62058425222581): [], (140.05197323043569, 130.05550515619262): [], (319.40118148464512, 117.91980650550357): [], (194.08098846071491, 101.67458645882292): [], (199.29003737272023, 62.916140128926656): [], (223.07982100854724, 92.35990517113943): [], (272.54379494816959, 131.84046723064063): [], (85.169100686275385, 32.233403711145): [], (224.48143798249362, 97.23171339394995): [], (106.72118691122472, 105.34947701700813): [], (276.75890285525111, 73.66956730483035): [], (0.0, 0): [], (299.67361725699647, 20.532957641085307): [], (87.434357531830713, 12.762508024475173): [], (152.38498843805408, 13.647747811565198): [], (255.45002215869587, 102.50181779166469): [], (347.85969958860483, 40.63940767276773): [], (127.41751473954145, 23.07391806563097): [], (219.44134493441555, 97.16377118142788): [], (245.75487965945675, 131.4795692959493): [], (356.5355119609971, 147.51471518017905): [], (236.70964095126084, 155.5867682664132): [], (149.44065214459792, 76.8068016309927): [], (299.48500746821486, 132.2034121830804): [], (21.149639374443165, 99.34349581199798): [], (229.85641053853416, 102.15682655385): [], (141.26941366747627, 110.66731649351264): [], (357.33340646248968, 137.8317294688425): [], (22.405046399217284, 50.81956032872139): [], (17.606650729890923, 60.46591942090505): [], (192.61966013436211, 130.7637227868028): [], (5.9509175741846843, 99.13861626587004): [], (49.464110463608343, 22.019115505336572): [], (343.2716671343112, 93.98020163735025): [], (3.9391043359762534, 79.69875877615016): [], (250.32858856250957, 102.4327831070404): [], (297.15556629662012, 44.81292497649417): [], (178.74856337335603, 111.17246469727303): [], (214.40200661327691, 97.0958390936189): [], (284.77986277796384, 49.502733876736045): [], (33.028171492734728, 89.79777918188145): [], (180.70235681509996, 140.30109518664446): [], (90.567659733370505, 134.2385307135841): [], (210.95657230875111, 77.63623324452223): [], (298.00672875086593, 88.51688479229024): [], (76.890011219068953, 36.98209591003731): [], (223.73365602412301, 116.63051850500385): [], (66.418315707489427, 56.269024737378246): [], (105.55035973326325, 51.94114626935413): [], (204.20170260059487, 33.84078851488925): [], (43.028188793833856, 89.9325931850234): [1, 6], (100.98318830408304, 129.52914078052697): [], (141.21471199337475, 144.61645396116677): [], (142.95850209592493, 62.15645284857739): [], (156.08849242943828, 52.62286075799484): [], (29.562722321169105, 109.16169998047202): [], (76.956737579865901, 100.09577438629564): [], (221.52408439952413, 82.63237140629843): [], (120.48012930618346, 129.79181949955725): [], (82.88351595505118, 66.20099470652228): [], (267.99419826204428, 88.11226810806292): [], (313.05911524591608, 79.01288507987094): [], (315.12086813461809, 69.33268350648736): [], (182.91643698525863, 86.96527529344148): [], (246.7555645482671, 39.274896235157016): [], (301.14857793197945, 146.7692778411717): [], (188.76516054909101, 154.94238458169698): [], (180.73263583702999, 67.520494390596): [], (208.06779961890427, 92.1575274307866): [], (244.08179776151053, 63.52019471976591): [], (310.28573294353657, 98.38837762500559): [], (35.527466016282176, 114.09402684707179): [], (297.39824855545515, 112.77161415563809): [], (355.46951294772975, 21.288407227145427): [], (17.331867019905232, 128.40209757719177): [], (188.05489433817959, 91.8877318919371): [], (28.151746980446092, 133.3977378387021): [], (341.69778747379962, 21.101966823224448): [], (88.345104088070315, 66.27464516633238): [], (312.91665055850717, 122.68363884625795): [], (14.099640007801833, 79.83575137827653): [], (189.48034438596306, 111.31710818084036): [], (320.23533557308588, 137.33207450589163): [], (238.85719144775859, 39.1682940932813): [], (342.73145324524569, 103.67832477899668): [], (238.92511707414644, 160.45053257754293): [], (332.97307561081004, 64.71895002047737): [], (304.43051901244564, 69.18852875629335): [], (261.9969447520665, 54.051429995467295): [], (26.015772186214257, 41.154201960072214): [], (198.40434838808471, 72.61304472227201): [], (187.92352773055256, 72.47172162435507): [], (30.050275313198718, 114.02020811328191): [], (358.84718979001832, 79.63024019452257): [], (174.28747473241671, 106.26020470831196): [], (157.31641891695654, 110.88360028250784): [], (320.59977196787617, 30.551065330119105): [], (318.01201114706942, 88.78658690770312): [], (275.00859541286479, 175.18477471144197): [], (130.81104201458234, 42.56837461465705): [], (41.615091152698575, 12.13716576965323): [], (117.62554753300891, 100.64398518603878): [], (58.516747918653138, 94.99442574975981): [], (68.578363416767075, 36.86989764584401): [], (311.87827979948344, 103.26244236029312): [], (93.029175008082234, 90.60667253095421): [], (325.80110266111257, 69.47670157332581): [], (324.73087741551865, 142.24051701873574): [], (230.62775834631526, 29.335638207535784): [], (126.23246789723164, 57.075774041035096): [], (348.28417062702141, 94.04777419681285): [], (107.5411278050979, 153.85048677991878): [], (118.22855504170505, 52.11216510252713): [], (293.72995867071143, 69.04423601770183): [], (95.233055100735413, 80.9296506025042): [], (107.47392443688061, 129.61658952356146): [], (283.00122744079323, 88.31458695977737): [], (330.56624828148449, 50.12039801018334): [], (259.64037847532626, 121.96571875079697): [], (9.1381899080017206, 21.473303489679733): [], (232.59913680380188, 136.15169763777254): [], (350.06318928358485, 50.38341047643854): [], (260.57282842988303, 102.57087092426882): [], (189.44790915707961, 43.359611777428746): [], (186.01820372440122, 130.67478564699888): [], (324.77991640728925, 40.32793062016698): [], (60.406200384126471, 56.18793490569805): [], (249.69348454815761, 97.57157983574645): [], (17.09916355763696, 65.31387464426943): [], (14.435466009284163, 45.855479771078066): [], (37.55868615984987, 85.0055742502402): [], (199.28844585162818, 96.89210257934639): [], (256.79432526119814, 83.10789742065361): [], (97.282210793663438, 100.36975980547743): [], (224.74171269254646, 102.08788239050064): [], (49.627767858586999, 80.31476884649034): [], (143.49730998368204, 52.45301813311111): [], (319.85213788909959, 166.3522521884348): [], (4.3242538318470451, 162.131774069019): [], (231.60503265325212, 82.76828660605007): [], (62.718371205431737, 133.86338178959062): [], (49.780412827324056, 104.58196299087791): [73], (313.17858641291571, 74.16064077885679): [], (313.01388528429879, 132.38566786209728): [], (230.96952667000849, 34.202217091750974): [], (23.719710714510143, 128.48816303368184): [], (200.13662212225822, 150.25421240159724): [], (349.23529965615319, 157.09868442282556): [], (177.57861393791922, 23.75246976672186): [], (193.55427054228707, 145.32103056523948): [], (88.925001382519255, 163.2650559592932): [], (107.45161415628522, 100.50684206869752): [], (74.835557862217627, 61.23773261439896): [], (146.8084222133123, 134.9961141962564): [], (148.60919860342403, 62.23265862706361): [], (145.8147133472529, 81.61162237499441): [], (120.6483330989218, 149.18474436539535): [], (326.65875664463852, 16.017705956798686): [], (199.09188795333137, 38.63158149726329): [], (153.5556254908671, 154.46909542831574): [], (34.407760352415501, 80.10956134284628): [], (18.245871302251551, 36.19044213376744): [], (169.07914139908337, 106.19000181890854): [], (165.16507869525537, 23.584559089878177): [], (118.07330197685803, 115.2065262639248): [], (274.92551817276916, 97.91171446923524): [], (257.35347561346072, 126.78568553117061): [], (16.082411198015276, 99.27518936847825): [], (235.02420945033114, 73.10682391205664): [], (34.803157158204819, 138.33624237495556): [], (54.928591082651288, 157.98088449466343): [], (90.703123974797933, 119.68914665642902): [], (178.04965492377869, 91.75285019710286): [], (165.22352675050402, 154.62594214968027): [], (102.22762600390082, 119.84445237642747): [], (291.97557868184293, 112.69852873892223): [], (355.52060360562962, 40.74279541648585): [], (101.69682662827799, 37.31695537288978): [], (209.36341559825053, 97.02791703054572): [], (3.1755395953458674, 40.84596704505609): [], (341.99464607903468, 108.52068850541053): [], (123.74823528842032, 76.46038319389964): [], (265.8324310539561, 131.75005275572613): [], (104.55919173245792, 134.4270040008057): [], (127.47849839726021, 105.62926643165908): [], (247.98588683602475, 10.033556826231308): [], (308.25233534483374, 112.91790263764095): [], (203.80469892145663, 135.76384919322192): [], (352.35779835717841, 84.39630631629784): [], (142.79404224283428, 67.00889393172223): [], (209.40551603912024, 101.8811560210107): [], (24.638061880178466, 123.64996198723259): [], (177.1806110391486, 33.47592694188448): [], (64.800741990272741, 12.453700594268733): [], (86.477400585215022, 51.68386552633426): [], (98.283693792039557, 144.0384989919334): [], (229.79872018159068, 73.03636403560972): [], (265.69701592936894, 102.63994262003179): [], (290.80851077996971, 136.9357305834868): [], (256.5154174355776, 19.948443588802704): [], (162.67055868716653, 110.95576398229817): [], (140.21221612859551, 115.50489682232175): [], (57.629839533232612, 85.27617424079115): [], (5.8762041358461374, 142.79437788326888): [], (210.25627211935316, 150.39035456108076): [], (85.180173451822128, 37.094003174946835): [], (140.28319826813305, 149.44893466988088): [], (118.9485611348131, 154.00385375364885): [], (145.5519420800492, 42.76728907098434): [], (329.51515454517562, 54.962136128499914): [], (52.612797783827574, 85.20853438048904): [], (188.54754515902334, 140.4067412906422): [], (179.58798556408837, 164.47835150978565): [], (177.90941530127688, 86.8977717083867): [], (71.951050050163559, 66.05356826041776): [82], (41.946216991080483, 133.5835629684909): [], (160.1233510612212, 120.6246556256284): [], (73.449726857777051, 119.45663670657456): [], (36.357342862629736, 99.54849597086384): [26, 28, 30, 31, 32, 33, 34, 43, 44, 45, 46, 47], (218.6299741558642, 48.61034104164819): [], (201.35289303951009, 82.36041509646692): [], (226.30466489512125, 77.84317344615002): [], (172.87460628545733, 140.19568320791944): [], (211.20912597294148, 145.55868363540466): [], (161.8603652326899, 57.556301849286285): [], (218.44724078386628, 43.75091313509884): [], (24.668993566513315, 147.89319738758837): [], (75.523158543191755, 172.6417306081552): [], (353.39890455369652, 11.478340954533579): [], (2.4140866826890033, 84.5317516869052): [], (219.99660268923532, 126.28233733909887): [], (235.6022658507037, 4.815225288558088): [], (88.64229090497868, 95.40053716813499): [], (35.043664043739184, 133.49057893685494): [], (232.55582732733743, 58.509785109849595): [], (113.76237303280189, 95.7391704772668): [], (292.80311691452272, 151.50077051343374): [], (237.25239660058972, 53.71766266090113): [], (80.535067269562035, 61.31459798588107): [], (310.76317931953514, 30.418193542003948): [], (247.40465013024379, 107.24574124738284): [], (206.96457982615746, 116.40452274122003): [], (155.92021095270462, 81.7478700535747): [], (256.9653891269528, 78.25657425571592): [], (131.55947709302117, 32.85988037888911): [], (249.6641694215339, 63.595477258779994): [], (359.95721550983268, 55.37274110019694): [84, 85], (41.708321767439926, 51.07995459005171): [], (281.0183610410545, 30.016388359812776): [], (58.028206094932983, 90.1348137232501): [], (318.37412720006796, 74.23069584574881): [], (3.3342407642822423, 94.25052609647473): [], (276.03806524104368, 141.58487066479225): [], (18.631611187714228, 123.56902489020523): [], (72.077906530084633, 70.90964505718452): [], (122.80976035404203, 86.15492694329724): [], (306.74127306787074, 103.19319836900732): [], (159.01698150567989, 96.34922585649171): [], (179.49767461842674, 106.33043269516965): [], (345.49601785440461, 127.97329450958594): [], (169.90745908561135, 67.37451770392923): [], (111.89314173402443, 52.026705490414066): [], (85.105460013483054, 80.7931037786541): [], (245.44844591326162, 68.39317560031765): [], (285.50869613088702, 117.46304908778315): [], (338.50836701647523, 79.35601481396125): [], (238.64458317835818, 126.53360191948902): [], (227.12575297540045, 111.82449250077435): [], (94.50063456991748, 129.44180203759788): [], (185.34936165829873, 77.29096700560457): [], (335.61571750999224, 55.04442134645301): [], (9.0199184181306595, 79.7672624682132): [], (2.7112734995976666, 113.65174595912492): [], (97.165484679882056, 124.62725889980304): [], (248.8835938099312, 155.75037139749483): [], (135.92550945304984, 110.59529045586153): [], (227.06355713532957, 19.5494674224571): [], (37.963381019142986, 31.595869568188863): [], (278.17177130221091, 39.69890481335556): [], (297.49075209680103, 25.374057850319726): [], (26.255635597395173, 167.23749197552485): [], (87.937255172683038, 71.12349636944079): [], (330.7706154737773, 122.9242259589649): [], (157.27085189303739, 139.98555403374036): [], (92.842529559029089, 51.76972683401611): [], (212.40179440930962, 53.38246184921846): [], (77.693219455538298, 85.54666866527184): [], (330.73049450784964, 118.07248693585296): [], (348.67335523516954, 123.16546901838413): [], (30.811347504234526, 143.13010235415598): [], (77.306832361161412, 109.8052133324828): [], (218.53185151273192, 68.03021146243339): [], (309.31121138429927, 40.11916689840515): [], (8.4328026007675057, 70.05143277395187): [], (328.75985197879601, 74.37073356834092): [], (323.01301144716945, 88.8540080016114): [], (148.50720119240125, 120.46811727599487): [], (28.533359358944601, 26.604681689396497): [], (150.15861750822708, 149.58180645799604): [], (151.17591010414631, 71.97621571421496): [], (122.34435483334009, 32.73543868813297): [], (114.32483047035375, 71.47931149458947): [], (44.613994619473822, 104.51232364014308): [61, 62, 70, 72], (181.16891008702524, 82.08828553076475): [], (305.12848825297249, 108.02378428578504): [], (153.46524267537077, 105.97954241563974): [], (315.65090624151372, 108.16561208734163): [], (56.198090542652047, 70.69551714141268): [], (18.378299296297499, 94.45333133472819): [], (349.51014206775164, 74.65052298299187): [], (193.52536532285899, 14.207842280393383): [], (182.33996844150832, 135.47472419829353): [], (269.26536340507221, 160.85749107124585): [], (344.02212932685819, 64.86795185341055): [], (189.91061982905075, 23.91926961105897): [], (183.05524594988498, 38.41512933520774): [], (357.24276289793931, 113.57817847820183): [], (244.26806997614003, 58.66774850240574): [], (239.60631984434289, 97.43560178154884): [], (71.8781005261649, 100.02731471833775): [], (228.97182188297688, 145.79778290824905): [], (86.250385222670602, 41.9670584345139): [], (16.220819725450358, 118.68540201411892): [], (248.10487613280813, 92.69726813393666): [], (213.52209968687538, 14.479928136600423): [], (237.89433088773188, 145.91788450724127): [], (34.820517761729711, 60.69807409271599): [], (206.39687138154213, 82.42842016425355): [], (76.620911578383868, 134.05065921945857): [], (240.07055572789938, 68.32065613087137): [], (323.56787919040755, 74.30072673239849): [], (343.59476343138249, 79.42459403356288): [], (133.51962373016821, 129.96749699489374): [], (173.15379397862597, 13.930554562357656): [], (320.46224371124009, 69.4047095441385): [], (251.95448963433691, 141.26057540214435): [], (338.2595784516393, 93.91263462241528): [], (283.26651097147266, 122.28409217994543): [], (194.53096015209039, 159.854912928263): [], (354.85044883570833, 26.14951322008121): [], (13.649379478686107, 104.09494318269479): [], (22.598810982545825, 65.38803937944513): [], (97.608638462135687, 61.54485686213589): [], (165.93848541074362, 120.70301974591568): [], (204.32556447821042, 96.96000489236107): [], (115.4306600776757, 124.87337596253784): [], (337.07348836017638, 50.20818050044277): [], (53.540642347036595, 17.19694697938285): [], (332.81782254596283, 127.80247435775372): [], (202.16278377773691, 24.084981768217002): [], (241.86015789156389, 19.749922795642572): [], (305.49443550761902, 137.1335333042968): [], (298.17695457100166, 93.3722866834339): [], (93.803614689728676, 66.3482540408751): [], (332.45028269007116, 45.289140427423966): [], (164.83862762325003, 77.01441640399358): [], (331.49822219864285, 59.84420818713206): [], (30.650177203541421, 123.73097526262177): [], (138.03249230336917, 47.52300570603012): [], (137.24333059174833, 159.0860590929316): [], (234.93151052302656, 116.78143078081699): [], (287.20182728843298, 5.560689196425544): [], (246.1443009052401, 116.93254394957509): [], (85.018823591768509, 124.46358592950833): [], (112.78679913602839, 86.01979836264974): [], (300.17847800488357, 98.25212994642533): [], (230.624267385293, 150.6643617924642): [], (149.79646877041225, 52.53798766980202): [], (55.783501921691375, 133.76996347371292): [], (244.87406533498566, 126.61753815078154): [], (263.12284985711528, 107.4576031237221): [], (32.539629669014559, 84.93790703571536): [], (126.4908403641944, 66.7890446733537): [], (272.29781421431193, 68.75523130619787): [], (56.235859825938277, 119.2246584303491): [], (335.43921298921913, 113.28431868601098): [], (13.637541542980305, 113.79900529347772): [], (263.1232281475111, 92.89973009018784): [], (118.03170136327995, 90.94373786483854): [], (189.53910817919831, 28.780500085183924): [], (277.6597589781727, 68.82753530272697): [], (279.87367702187697, 117.3871075026539): [], (103.82041396614832, 32.48528481982093): [], (108.03043814687477, 90.80890846495919): [], (349.88528531689138, 137.73141557042754): [], (261.1226641217354, 73.45873143200066): [], (224.35407517831291, 121.49021489015043): [], (122.71423310454398, 100.712579836095): [], (359.94351026546855, 171.6548649526684): [], (197.02868734889449, 19.14250892875417): [], (246.84467498707343, 146.03835935308135): [], (89.769309360394757, 143.92387147863911): [], (57.468014615282421, 114.38972931178735): [], (81.559891090832394, 129.2674520919506): [], (175.39769137392364, 169.22010472778766): [], (99.259061945628488, 66.42182152179817): [], (204.29605477600478, 101.812282227541): [], (128.88967196006809, 76.52970681438882): [], (325.06382784118296, 117.9961196837149): [], (121.05049913529125, 66.71568131398902): [], (192.92955967030872, 87.10026990981217): [], (284.10429512025644, 141.6934841544017): [], (270.82259323002353, 102.70903299439543): [], (142.85101589730039, 86.42512061764633): [], (22.499944811373574, 84.80255127068871): [], (148.66495916571995, 168.86547311608786): [], (347.00988628108507, 132.84364304359633): [], (346.33491760622991, 113.43116693467277): [], (154.3129304145009, 120.5463549021541): [], (228.08431147967661, 92.42737084002997): [], (225.76096758099129, 131.21021006338927): [], (61.006102274469271, 65.90597315292821): [], (3.6220200558371971, 166.9358638398621): [], (318.21523045830082, 93.64242010287187): [], (91.921588264313499, 61.468159848811666): [], (191.26253047932843, 82.22437237487944): [], (41.428609729080726, 99.61685665081788): [11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 52, 54, 63, 64, 65, 66, 67, 68, 69, 71], (144.80183647686997, 47.614332137902736): [], (261.50726940846982, 151.07980348351748): [], (26.217865507295745, 99.41181565681354): [], (108.31492434242213, 76.2522906296264): [], (337.94825664083004, 147.26456131186703): [], (221.73971977279624, 111.75189984558665): [], (218.62450873906079, 53.46639808051097): [], (76.65682467634646, 46.69496122574304): [], (285.98222616065101, 39.80431679208056): [], (134.67234755501661, 115.4302350471177): [], (114.64517743234121, 61.77461533254031): [], (223.98282045233842, 160.25007720435744): [], (359.56784878028941, 31.077419250370713): [87], (47.543885456969953, 143.35538278314104): [], (118.60530435935553, 76.39103936921708): [], (5.8872769013928519, 147.64043728796037): [], (41.007820648283356, 114.16788813674654): [], (182.16538540409934, 43.26134416773068): [], (51.978080234218083, 114.31573917117649): [], (354.69336182967436, 74.72041149571221): [], (36.629162125653494, 16.967471818522796): [], (325.45331005341177, 98.592839011356): [], (54.69903472503799, 80.38314334918212): [], (279.28802172056299, 59.14006061661744): [], (240.87383443002733, 150.80224314904194): [], (259.49994198938333, 112.26082838649187): [], (330.51098488103304, 98.66101718309712): [], (188.05458345339554, 62.76461957671463): [], (262.4988324286449, 39.487376551514686): [], (254.32911285467458, 136.44438621036832): [], (34.992642020401959, 70.4095759261488): [], (60.796713869880826, 124.13719762711513): [], (261.79976775914105, 58.90419809894123): [], (264.90542636518848, 112.3336826578053): [], (127.6379230826941, 125.03786387150011): [], (171.7817007942075, 47.978319257208824): [], (68.028292601333789, 90.26962819288237): [], (127.82064701800807, 86.22248315502372): [], (93.712971125178555, 42.06776234758659): [], (238.09405928827613, 92.56231237510126): [], (42.196904079246792, 46.2300365262871): [], (296.47162819018928, 103.05476910434224): [], (231.41804098314788, 77.91211760949938): [], (67.662472661553736, 85.41143426421418): [], (36.518404475202615, 128.6606032553309): [], (210.79862502290351, 106.7523351135539): [], (78.028503680898467, 90.40444415531614): [], (358.20384802863879, 128.14451310123005): [], (252.43802965941333, 131.56960454342607): [], (302.43717898424393, 117.69118892275974): [], (255.90680537870739, 73.38840172583328): [], (200.9295428418045, 121.17455278732378): [], (15.954766942506286, 50.732547908049405): [], (308.34023634615653, 59.53188272400513): [], (325.49298313022439, 171.20258929000894): [], (249.63779010450762, 53.88472365499568): [], (353.43773912553229, 118.37850172430018): [], (228.04015900224886, 140.93855207010134): [], (288.63999736169501, 64.12109333568951): [], (343.50524978257033, 25.99614624635114): [], (126.26646118037895, 139.56802299132198): [], (131.25327750989283, 47.43154579670649): [], (312.85796395083918, 137.23271092901567): [], (176.71624712490686, 125.6991674954162): [], (70.462562049311117, 104.86074189693989): [], (185.50719690723636, 57.87523338726993): [], (153.89081129104812, 135.09151479863272): [], (45.600026791095665, 70.55260951659467): [], (103.29157403431292, 61.62149827569983): [], (267.99113163778333, 141.4765161905836): [], (232.86971741924154, 43.945519562308846): [], (149.49456910135879, 139.88083310159487): [], (137.14078612993282, 28.07248693585296): [], (184.70975090421763, 106.40068591203939): [], (103.16745750676372, 76.18288547515793): [], (271.03347969659535, 20.145087071736995): [], (128.03336614049823, 91.07857249147638): [], (103.10797097525483, 2.7795260872183167): [], (101.16109227077686, 42.16827053115752): [], (40.366447653632392, 152.94725757025103): [], (33.598061534080372, 41.25652574874603): [], (332.09781645285511, 25.841932763167126): [], (177.43455485212738, 72.33028834395793): [], (42.335584508203404, 55.94420225743209): [], (345.93195179254047, 152.2153487897813): [], (69.906738213224571, 80.58818434318646): [77], (166.37315638504748, 18.727047066276423): [], (113.77011378550684, 120.00000000000001): [], (271.89244722094594, 151.21949991481608): [], (54.573364850533927, 7.358269391844776): [], (318.36740946226109, 45.0991278440273): [], (346.48718585521016, 45.4785312268004): [], (189.24660982852689, 121.01711624459145): [], (285.8812988924127, 156.24753023327813): [], (277.99906340693298, 88.24714980289714): [], (302.8712041754556, 78.87552211606689): [], (124.46413146733042, 47.339951588889726): [], (153.03964883680172, 91.41568683085299): [], (4.8259733025137166, 118.53184015118833): [], (344.51589950178135, 16.260204708311967): [], (212.59011233308976, 155.26261015509664): [], (240.24775256476434, 73.17725748374956): [], (348.01852426911194, 161.91337609753964): [], (18.84160642573255, 31.33760748190996): [], (43.512492130698305, 36.53152949915216): [], (55.943505033153876, 143.46847050084784): [], (193.05780691573889, 91.95517661733393): [], (90.410409263644112, 56.5926222685993): [], (271.62081628402143, 49.325214353001115): [], (110.86367556999269, 139.36059232723227): [], (359.87485939770949, 74.79027672734449): [], (219.62833660451983, 102.01895598946601): [], (266.27979743887556, 34.67896943476054): [], (165.53768145678094, 62.460956975613044): [], (251.16795269334546, 150.94072083789393): [], (197.93567467626153, 87.16776112998446): [], (65.040605401453973, 138.74347425125396): [], (84.911876845369193, 153.54623330326805): [], (274.24253220188126, 117.31121802781792): [], (191.08304974373573, 38.52348380941642): [], (159.02169044820522, 33.23072215882833): [], (183.87100819817246, 101.5369590328155): [], (173.04731418073467, 91.68541304022263): [], (72.424766399953668, 56.35003801276742): [], (29.332329313756276, 80.04113048911857): [], (21.392226596092272, 45.949340780541434): [], (54.427215462014402, 162.80305302061717): [], (34.286036742426752, 104.37311052284251): [], (3.1191224149848154, 108.80528062834026): [], (83.619997357056874, 95.33283358719343): [], (259.78384710833927, 97.70760079963482): [], (220.07685091765981, 145.6780505854809): [], (120.31588307981831, 61.85109148701495): [], (151.96485627658325, 110.81147124370663): [], (241.64086154854746, 78.04995276264827): [], (80.813652022868425, 105.00026599573852): [], (291.14760746333326, 117.53904302438696): [], (210.51034747046836, 63.06745605042491): [], (215.44411173696454, 174.43931080357453): [], (257.98857067192881, 87.97737594693389): [], (124.38762094302942, 163.739795291688): [], (130.41934782834119, 154.15806723683286): [], (198.57558525746109, 164.7322697613738): [], (275.72490137031144, 112.479505609404): [], (156.85260375764904, 115.72916167321645): [], (145.75553773258986, 115.57960504221663): [], (236.53010373362227, 77.981044010534): [], (310.99440435723221, 49.85637287967304): [], (135.05511915358241, 18.302502103072204): [], (169.9684259625935, 77.08358265250602): [], (29.685425874936481, 70.33801151057334): [], (259.96332784393257, 141.3684185027367): [], (83.517233929845105, 46.78751914791061): [], (191.91584946530025, 48.249947244273876): [], (281.13891850205658, 112.55247464626164): [], (190.47354915778467, 77.36005737996821): [], (224.61232227050863, 155.4241879292967): [], (102.36635024104392, 100.43829338443639): [], (48.720793079464485, 123.97447595029168): [], (80.104741311032754, 51.59790242280823): [], (33.588362972385575, 65.53623719999264): [], (6.1445007422990443, 26.302048554306968): [], (184.18141105913915, 96.6884535960378): [], (117.09632245461181, 105.48932439558183): [], (103.02785331855597, 17.86822593098097): [], (292.73522480071119, 132.1124813301185): [], (243.96445498307949, 141.15298471906954): [], (150.79974793705028, 18.51594874952375): [], (337.27626380216111, 59.92213476106632): [], (85.991733406211765, 105.07006214488884): [], (229.30665781487173, 68.17550749922567): [], (44.555471747533794, 80.24638041524037): [], (115.60716459844886, 66.64227750719763): [], (342.45152239876575, 137.63129452910428): [], (203.06425259546347, 92.09007429293743): [], (180.22378435764418, 77.22185783693352): [], (137.86779117475209, 105.76930415425119): [], (125.63174736165593, 134.71085957257606): [], (158.31115278695682, 47.79658781691964): [], (61.370951712731369, 109.5904240738512): [], (65.289534818238522, 104.79101369632585): [79], (337.28400455486582, 84.1930790987004): [], (133.03436644059826, 91.1459919983886): [], (72.810506285416707, 143.69555513861374): [], (49.110160596587541, 46.32330915815741): [], (222.96206610799109, 87.50516012334072): [], (189.04943283560129, 125.86534868634119): [], (0.64596832402378368, 123.32666692557987): [], (25.766842769429253, 75.13925810306013): [], (262.99179413427242, 117.15959445024878): [], (303.18597894413205, 93.4398127675152): [], (139.73783391297496, 134.9008721559727): [], (341.80269920052098, 69.69247522341864): [], (333.38138458809419, 132.6600484111103): [], (319.92843643052504, 59.68816987401035): [], (93.219208176132099, 71.19471937165976): [], (326.4897382799233, 127.71721235785645): [], (121.5312230424923, 124.955578653547): [], (351.84620849658126, 128.0588537306459): [], (226.43405531715948, 24.41323173358679): [], (139.86985941765724, 125.20268356818696): [], (252.98545357260619, 87.90992570706257): [], (352.54744632138755, 108.66292488494248): [], (158.66803514599059, 106.04967080416738): [], (251.8163956164677, 49.0580447248236): [], (260.98729869150981, 29.74578759840275): [], (292.48718253198308, 35.03280264665396): [], (30.259663717787063, 55.78132400588953): [], (332.44107322831229, 103.53961680610034): [], (255.24290886853322, 63.67071071778018): [], (352.45806532369301, 69.83615722859982): [], (239.0810225992073, 131.38965895835182): [], (84.966326774913782, 114.76033424422526): [], (326.58224612033757, 132.5684542032935): [], (9.7780555818790873, 36.076128521360886): [], (352.76268379562867, 35.84655653109822): [], (92.735927230914555, 85.74947390352528): [], (30.115209159691631, 128.57433140450584): [], (200.35733706814599, 106.61159827416674): [], (321.91046141594552, 64.5697649528823): [], (168.11585091406212, 33.35352383749118): [], (140.08637086725952, 23.245308517645505): [], (83.588723939533864, 134.14452022892195): [], (207.59798736167357, 126.11527634500433): [], (255.96072627932543, 58.82544721267624): [], (127.80407536430178, 100.78119002540916): [], (237.97480553759326, 87.70755722404412): [], (95.525773982038615, 139.15403295494392): [], (61.72404827391145, 99.89043865715374): [], (148.1751734122121, 101.05578835878299): [], (35.28177986351475, 50.993263074922794): [], (351.78731564203952, 113.5046522000617): [], (299.08152131108471, 69.11639971749217): [], (294.95788515822966, 127.29236208901408): [], (114.5750590832403, 110.30752477658137): [], (179.14714857944421, 96.6205895890427): [], (283.01908976387608, 68.89980397590698): [], (311.30854367469323, 45.00388580374361): [], (340.15849274745722, 30.815255634604668): [], (56.946645213574861, 31.85225279718823): [], (343.04976649405739, 60.00000000000001): [], (250.11683474586346, 58.746630784975636): [], (236.64437097439077, 82.83622881857214): [], (62.64639544964669, 85.34380750331852): [], (40.297505198826912, 70.48110854358967): [], (78.773226816425009, 41.86615733104918): [], (273.46776364974886, 156.08073038894105): [], (241.68296198941715, 82.90416090638111): [], (118.55689375620099, 139.46419788868343): [], (166.26651480970409, 130.4086823753081): [], (91.171518189958306, 105.13988119508276): [], (307.98124720685615, 74.09056140181883): [], (271.45839202357956, 15.267730238626182): [], (348.81875158376715, 60.077804192004145): [], (101.16477526950476, 148.92258074962928): [], (261.62055684500558, 170.3610205874871): [], (257.3721654587294, 117.08385987107336): [], (254.63606229853687, 39.381256386375306): [], (75.794736738808069, 32.106802612411634): [], (240.79010546831498, 29.47293165849043): [], (270.31374175063797, 112.40657500613321): [], (324.5305914577354, 151.92751306414704): [], (77.406998108981668, 75.8355470379262): [], (75.63726468157185, 104.93049262163949): [], (37.515735240631301, 162.57650977666017): [], (182.87961058786564, 125.78221466617617): [], (151.30232828007786, 115.6543599208399): [], (300.88776007944108, 30.28479484356964): [], (327.23181678341348, 84.05755370795386): [], (50.900218138426425, 70.62407899832593): [], (35.112872554514382, 36.4181396746227): [], (51.995405654531751, 60.92970204252969): [], (264.83008261055471, 146.2804450130663): [], (203.1882902372279, 58.11370187514041): [], (125.24527492655537, 110.45134024432323): [], (301.6057254430699, 103.123973989563): [], (215.05331356532611, 38.84701528093048): [], (46.44238296819394, 75.41803700912209): [], (273.61182273554044, 107.5989811730778): [], (327.2981422992475, 103.47029318561118): [], (13.363158132129408, 94.38572350268711): [], (283.77706881980816, 34.91520624744418): [], (138.12972702916076, 57.23623774063543): [], (97.74928158068046, 85.81706366910745): [], (153.98612378413753, 96.28140750322079): [], (245.19715648279617, 48.968747977675335): [], (292.80067543791665, 170.77228905486808): [], (57.458316053587851, 138.64135836571765): [], (219.34186280925576, 72.8953648233562): [], (95.988630872321622, 114.90888529672982): [], (267.6339822353101, 58.98288375540855): [], (23.028084986333923, 89.66296405915463): [], (324.55553722347361, 113.1376322278376): [], (132.6722503875998, 105.69927326760151): [], (232.41640343180381, 131.29987279170587): [], (205.57701800799839, 106.68195374450616): [], (214.11047444263411, 72.8248252139581): [], (8.4941743602709927, 104.02545457057204): [], (251.85849588858599, 78.18771777245901): [], (189.21637652009144, 96.75632703058784): [], (347.79855599990242, 55.20874461803673): [], (49.441286434969399, 167.5462994057313): [], (218.17666016842662, 135.95743407785082): [], (103.91476671187935, 110.16384277140018): [], (341.1226743449613, 142.461224810312): [], (101.53623551991616, 105.27958850428779): [], (212.4774298428415, 131.03125202232468): [], (10.951636276635131, 128.31613447366576): [], (285.41829187359679, 20.339907769113946): [], (168.02728782379188, 111.02796250773457): [], (39.482138535564111, 80.17797794942453): [], (80.040204398026134, 80.72481063152176): [], (327.6266510987133, 137.43162538534295): [], (184.76658014879271, 145.20273695958235): [], (195.22574725980706, 125.94857000453273): [], (313.205109847595, 93.57487938235369): [], (245.20851910744946, 102.36376675547777): [], (358.17845194132286, 103.88654036262899): [], (331.91310549910622, 161.6974978969278): [], (50.048556939384639, 65.75820782105102): [], (160.07338072307033, 149.71520515643036): [], (332.48948383146723, 40.431977008678025): [], (189.48256330902186, 135.5709337331413): [], (347.22596362151995, 147.3894248586596): [], (333.01467622438776, 88.9888455218948): [], (183.05217932562343, 91.82028978310579): [], (259.13052812236776, 131.65976544609367): [], (347.75480355335503, 118.30191565291722): [], (175.00831234662462, 38.30651584559832): [], (224.57127467324415, 72.96587771823836): [], (159.7074049925404, 76.94523089565776): [], (216.35641365499725, 111.67934386912866): [], (287.17371278751222, 73.80999818109146): [], (113.97288922749154, 129.70414888786047): [], (50.758872388840935, 109.44739048340534): [], (150.00562384242301, 57.39641274413914): [], (140.76064464413116, 81.54348066472949): [], (300.29532103988413, 141.91149724910278): [], (83.028673239696147, 90.47185292960899): [], (240.0898052789166, 102.29476862231759): [], (143.03673752831466, 91.28083586667616): [], (111.57193476327885, 134.52146877319962): [], (347.33378915498417, 84.32857189608814): [], (207.74603412272441, 67.88476663325903): [], (297.58113491229705, 73.95032919583262): [], (189.92371346593242, 106.47096449186903): [], (103.02993980248434, 90.7414954915562): [], (11.85993805268695, 60.388416197221964): [], (140.74384257037696, 32.983905041845176): [], (290.9729968645978, 30.15086218433121): [], (153.14211760329363, 130.23186353918084): [], (123.41972648895495, 42.468635067167675): [], (67.707406338436499, 119.37925190791073): [], (235.99306402234217, 141.0456443125976): [], (3.0274828799708189, 89.39332746904577): [], (145.91788933469533, 71.90531615257126): [], (184.11313449120513, 111.24476869380214): [], (212.12126051352155, 19.347017257016613): [], (72.678078291370198, 85.47905461953877): [], (348.01643778518337, 89.19109153504081): [], (27.281622287844584, 138.23494244051068): [], (339.15323585364342, 127.88783489747289): [], (38.028185333622652, 89.8651862767499): [2, 3, 5, 39], (284.10903092583231, 107.74046996500233): [], (203.97354445866173, 43.55561378963168): [], (158.04132441918284, 91.48311520770976): [], (273.86576654851973, 146.4020641188102): [], (246.72081310945725, 82.97208296945429): [], (51.607171942948305, 75.48767635985692): [], (50.506593132679193, 119.1474492042224): [], (21.924520980917148, 118.76226738560106): [], (107.99661109361058, 119.92219580799586): [], (33.344577371978666, 118.91616832353112): [], (355.81332248693235, 99.0020955118428): [], (275.04136184712553, 34.79726304041767): [], (247.98212499220423, 87.84247256921341): [], (106.82170424401814, 144.1534434689018): [], (111.90787939350365, 105.4193889381955): [], (103.7125884326835, 95.60369368370218): [], (207.94704699933405, 87.30273186606334): [], (254.40893212376415, 44.23615080677809): [], (39.166569287150054, 143.24259433325): [], (219.114660935388, 131.12067004700876): [], (91.478528807378822, 148.79224283529425): [], (0.8866365896226398, 99.07034939749582): [], (316.56558762522479, 142.13057392785137): [], (148.22254799458858, 67.08209736235906): [], (181.18599038570403, 52.96139883595049): [], (50.68992993403586, 26.904156459044472): [89], (302.82382959307944, 112.84473872777728): [], (225.6648371979386, 43.848302362227464): [], (177.58298496129345, 120.85993938338257): [], (195.22322119270143, 33.71955498693372): [], (75.101610645161585, 129.18043967127863): [], (277.38033002605732, 78.53182933137444): [], (339.47444282438926, 45.383913039275896): [], (350.75096752997297, 98.9338545047035): [], (131.92820211773676, 66.8623677721624): [], (48.716669493854241, 41.46055120122157): [], (132.57983528765214, 144.50021003162036): [], (115.3835732367878, 144.26870802003634): [], (126.51578612993282, 27.928910035858138): [], (43.5842623546474, 148.1477472028118): [], (317.1771678402705, 83.92199494150317): [], (194.25205232646957, 96.82420999191044): [], (82.653061259321262, 71.05224308237528): [], (199.87842489432268, 28.920196516482534): [], (331.13745695114727, 69.54865975567677): [], (163.87266480015558, 106.11982389478898): [], (19.063888959316632, 70.19478666751723): [], (131.64519610302281, 62.00388031628511): [], (172.9020773799933, 86.83026381276062): [], (29.086920125012345, 60.62074809208926): [], (98.588312263974885, 110.09205141942664): [], (116.0143652109043, 42.36870547089575): [], (307.96575429157599, 78.94421164121702): [], (168.56542892106498, 101.33064408052174): [], (226.69230240935505, 58.43070336387381): [], (78.95443922895322, 124.38186974878029): [], (149.89779965568883, 33.10751741709538): [], (94.510865626671176, 32.35956271203964): [], (218.07557685648342, 92.29244277595589): [], (134.48078996244354, 37.759482981264256): [], (28.409982138021007, 94.58856573578583): [], (63.774755299823639, 41.66375762504444): [86], (28.095205807178289, 65.4621601640636): [], (257.8814256735057, 107.38695527772799): [], (303.00825540133701, 88.58431316914701): [], (48.364863176324626, 56.025524049708324): [], (271.44312022728695, 122.12476661273007): [], (62.636356275012488, 148.40413043181113): [], (262.2812170385771, 24.897984639416855): [], (137.30384072545789, 62.080193494496456): [], (159.07079890582506, 67.22838584436191): [], (22.47801417090119, 143.01790408996268): [], (308.00964005935305, 88.6517395849778): [], (120.53539270663474, 81.27079228514664): [], (28.028140350575267, 89.73037180711763): [], (7.4676536481341715, 45.76146928641589): [], (17.834191910018376, 11.812282227540983): [], (223.00621858541942, 38.95435568740242): [], (157.87809605007078, 86.62771331656609): [], (201.40858748316018, 126.03187907247056): [], (69.785978840925182, 46.60226216129787): [], (337.58550725599713, 103.60896063078293): [], (82.707903264619105, 85.6142764973129): [], (250.90975546540992, 29.60964543891923): [], (168.04515014687442, 91.61797821878983): [], (36.667985280119332, 123.81206509430194): [], (224.84049054908562, 53.55024331056807): [], (307.54906760398586, 127.46201233019798): [], (342.07596354972321, 118.2253846674597): [], (275.64868621374433, 10.413340847372584): [], (273.13696228639083, 93.03472470655853): [], (340.88555472433234, 113.35772249280238): [], (238.56894774482652, 48.87932995299125): [], (109.05173150863318, 71.40820815173977): [], (117.67888733878119, 173.1882360288742): [], (324.05068590905893, 50.03250300510627): [], (96.353015757993447, 105.20972327265554): [], (39.449205644719456, 104.44270619191009): [48, 49, 50, 51, 53, 55, 56, 57, 58, 59], (125.98254974648498, 61.92751306414704): [], (88.869389615639506, 22.552362700777778): [], (216.11486706464143, 63.14303786223659): [], (124.86448032698755, 71.62142968439035): [], (313.9055914577354, 151.78460762065836): [], (146.59278833765393, 130.14362712032695): [], (213.07157205007445, 92.22498356048861): [], (265.02817386326677, 49.23627721319721): [], (307.11999959891892, 83.78640201529156): [], (146.61585857522232, 110.73937670185227): [], (167.26930876786005, 144.96719735334605): [], (61.96945746265564, 119.30192590728402): [], (14.399552911321567, 133.2124808520894): [], (225.28541000667673, 48.70012720829414): [], (232.42186884860701, 126.44975668943195): [], (10.521310318105943, 118.60859302318677): [], (293.00505316848478, 88.44945436084174): [], (261.5660332017049, 68.61051667381507): [], (196.3081152359957, 82.29239920036518): [], (256.19617205968768, 68.53810570172526): [], (210.97582185976859, 111.60682439968237): [], (3.1136494985988179, 69.97970704316931): [83], (264.8302463203741, 97.77562762512056): [], (243.30034346494355, 112.0424922659776): [], (262.99148324948811, 88.0448233826661): [], (152.12672124221319, 125.36783844070605): [], (216.48245959575996, 82.56439821845117): [], (69.664150991575752, 133.9569467237677): [92], (277.35222198497752, 122.20439451529167): [], (142.70614124151138, 120.38994244932762): [], (358.0172025795855, 89.32591645532518): [], (110.88788484021102, 149.0534124777643): [], (255.82063032786073, 53.96812092752944): [], (34.109732374093362, 148.0202458894059): [], (166.94208246741189, 38.197641081042256): [], (73.028379108769116, 90.33703594084538): [], (175.09680866322992, 77.1527297579815): [], (186.21629497711359, 33.59793588118984): [], (302.09045254160617, 83.71859249677924): [], (176.00501574054272, 145.08479375255584): [], (141.95464025964603, 154.31314253913067): [], (269.87746750064247, 97.84366548120201): [], (24.576233984293424, 113.94643173958224): [], (63.028237237092441, 90.20222081811856): [], (118.78816290000913, 95.8069209012996): [], (240.06196902071699, 44.04256592214917): [], (196.63744546390402, 135.66730835583508): [], (229.52229318814358, 97.29966583129391): [], (56.648617235252225, 99.82202205057547): [], (176.12085941489858, 82.02022530927793): [], (313.74253686221005, 117.84354715142261): [], (271.89922900822353, 83.3115464039622): [], (326.18189726068027, 108.30755517707027): [], (340.62910417240039, 98.79741070999106): [], (347.93840661241262, 176.06877086520694): [], (191.4059991123417, 57.95479186401049): [], (73.687915650444239, 153.3953183106035): [], (104.03649130658293, 47.06435485215604): [], (14.166366368599311, 142.90599682505317): [], (196.4103152891314, 140.51262344848533): [], (30.938203882179369, 75.20898630367415): [], (54.948469452997116, 104.6516243677746): [78], (19.495825670508726, 16.734944040706875): [], (282.48094866660267, 78.60060094505977): [], (261.83000106757629, 83.17579000808959): [], (296.79042904309784, 117.615089554848): [], (211.44005774332481, 82.4964145046525): [], (286.63761346010261, 54.38379327149306): [], (21.270398746742842, 133.30503877425699): [], (99.200169091086593, 51.855486898769975): [], (18.978471057583221, 109.01904063854006): [], (207.08192260458878, 38.73942459785565): [], (310.38863095942747, 108.09468384742874): [], (323.4084545049738, 54.879767964316734): [], (261.5638142786463, 44.33269164416491): [], (354.58324026422895, 60.15554762357253): [], (38.443579803840123, 94.72382575920884): [4, 8, 9, 10, 36, 37], (333.95005513305597, 74.44071648274546): [], (247.07283312900643, 136.34664931841434): [], (200.22273043538047, 111.46189429827476): [], (184.65681984529749, 116.1038811373399): [], (288.15995281495663, 93.2372484879978): [], (182.68006549985211, 72.4010188269222): [], (94.336472389930279, 27.49404455358124): [], (15.261640848860162, 147.766596288855): [], (349.34955095939034, 142.57199445695747): [], (250.68904051952185, 73.31804625549384): [], (353.01685652290098, 89.2585045084438): [], (13.027873906769246, 89.52814707039104): [], (133.99250805366242, 139.67206937983303): [], (137.36259817116877, 66.93565079651023): [], (48.028188793833856, 90.0): [], (272.27847302029352, 78.46304096718453): [], (173.52450075140916, 115.95385033808283): [], (155.93562613236463, 57.476392860474604): [], (10.242725564799336, 74.92993785511116): [], (154.25594854457009, 62.30881107724026): [], (279.97440587124549, 97.97977469072207): [], (158.8563875611226, 38.088502750897256): [], (266.38955774237053, 63.82103129598749): [], (297.77545673862613, 78.80681639431617): [], (275.83679988419823, 44.52527580170647): [], (114.65975566254572, 22.90131557717444): [], (176.8038453857867, 62.612892497346095): [], (166.93734666183551, 72.18874375913046): [], (290.92302652644662, 59.29698025408433): [], (338.01535456309784, 89.05626213516145): [], (339.13849819416413, 74.51067560441817): [], (315.99125843408547, 161.48405125047626): [], (19.105327537504429, 113.87269753101995): [], (170.55930928369384, 125.61620672850695): [], (193.16495191416215, 72.5423968762779): [], (49.348055820227948, 128.83345968142555): [], (214.51627385404544, 101.95004723735173): [], (41.592267124059681, 157.80178458759642): [], (217.95732234130284, 87.43768762489874): [], (110.85580037645769, 47.15635695640367): [], (302.38141842194796, 10.779895272212384): [], (196.71726473299358, 43.45770123427013): [], (6.0375539958993727, 55.454617821158976): [], (232.97080073118428, 87.6400948288606): [], (0.35325361287004853, 60.233230579635055): [], (317.01675439374594, 103.33170608131965): [], (244.64950620612558, 97.50358549534752): [], (199.22998197120035, 130.85277909740935): [], (268.12994060240908, 92.96722533756807): [], (280.48706830397401, 54.3008325045838): [], (261.59846843058853, 136.54229876572987): [], (105.35681359229768, 81.0661454952965): [], (18.418002080554334, 41.05166866486357): [], (46.491353827090911, 114.24179217894898): [], (86.230404285154265, 61.39140697681322): [], (319.4869004946471, 147.01609495815484): [], (318.4665423000161, 35.383546038833224): [], (126.99569167860901, 129.87960198981665): [], (330.39804448874645, 30.68341710897582): [], (59.769280189373347, 80.45150402913616): [], (195.59635542897183, 77.4291290757312): [], (290.06129739013431, 44.71720405803846): [], (270.34402077256829, 39.5932587093578): [], (190.05907889615835, 150.11863399320004): [], (274.33013046276096, 54.21778533382382): [], (306.97604485198519, 122.60358725586086): [], (151.37276033067155, 159.27571375109173): [], (301.24990881725569, 127.37713924200519): [], (233.16437426967397, 14.747100159455673): [], (327.81001091513752, 20.913940907068397): [], (66.387384021154915, 31.979754110594083): [90], (167.56045907266488, 43.06426941651319): [], (286.55580647738037, 112.6254822960708): [], (282.93052667360621, 146.52407305811556): [], (73.72451056776265, 51.51183696631818): [], (301.04075374524496, 122.52360713952542): [], (122.77341841545163, 168.52165904546644): [], (332.91651184603887, 142.35073316105678): [], (28.420021312655734, 31.466976293267564): [], (214.33673663640727, 24.249628602505194): [], (327.44347137669638, 64.64438049645341): [], (13.749545226506424, 70.12312592992117): [], (62.209008254618446, 129.0067369250772): [], (53.028192254045059, 90.06740681497661): [], (28.35817005962868, 157.62404627662053): [], (147.716361659814, 28.21539237934161): [], (221.71565270880683, 63.21856921918303): [], (40.549784454988796, 60.775341569650934): [], (260.81803277694257, 63.745895322095336): [], (229.33072487886116, 116.70594964682721): [], (18.43449762139878, 152.65232559720357): [], (187.4429019742071, 53.04579730702219): [], (247.24167866621153, 44.1394426162078): [], (133.86920974739724, 96.01022145434554): [], (153.2709208490416, 101.12447788393311): [], (129.13591617172253, 115.35561950354659): [], (284.67322120262043, 161.0641243279398): [], (164.49057111028759, 67.30147126107778): [], (236.09605082720265, 121.64844550898285): [], (20.817452503106612, 162.35278544955068): [], (176.03778217480439, 3.931229134792969): [], (168.09130878209186, 135.28279594196155): [], (299.74404930759016, 64.27083832678356): [], (151.56137011945313, 47.70552590603913): [], (167.96367382037383, 115.87890666431049): [], (231.70451477841209, 107.03412228176165): [], (275.94956892443781, 102.77814216306648): [], (292.02939608198784, 83.58294685697133): [], (42.339708093813982, 138.4377439844419): [], (297.0602538035302, 83.6507741435083): [], (226.4751029144237, 106.96363596439028): [], (353.29709600698726, 94.11535239617817): [], (292.02468713946308, 146.6464761625088): [], (163.46604040307381, 101.2619056343626): [], (267.17536938949524, 78.39423574102005): [], (303.33001592785422, 151.642363423672): [], (4.5789770024528593, 128.23027316598387): [], (54.537973112465259, 51.25302084383098): [], (268.88099218356882, 136.64038822257126): [], (178.76790456737416, 101.46817066862556): [], (335.03201237676393, 137.53136493283233): [], (319.11817546993126, 113.06434920348978): [], (333.24789750702359, 93.84507305670277): [], (343.01593944079292, 89.12367744174256): [], (213.15204669993642, 33.961640646918674): [], (87.880837992322355, 139.05107575945163): [], (1.2870682272734939, 35.961501008066584): [], (342.70031158003457, 123.0849811867889): [], (130.87743388987778, 52.28278764214354): [], (156.43181954079611, 72.04708674078033): [], (123.60290621097168, 115.28104997952263): [], (36.127786505016736, 21.838620430726724): [], (328.33214448312373, 79.21880997459087): [], (71.992488628351211, 109.73358485737599): [], (78.425580406405786, 56.430975109794765): [], (213.79398098707807, 126.19876228014533): [], (11.016173189641608, 99.2068962213459): [], (131.19423969856834, 13.359071414022612): [], (132.67896812540707, 134.8057876279089): [], (268.36631208781574, 107.52827837564496): [], (265.53918068043157, 122.04520813598953): [], (283.48591851500333, 136.83710285970835): [], (22.686695060597661, 21.65669523268248): [0], (3.0301602456152636, 50.558197962402126): [], (292.67850380567921, 78.73809436563741): [], (100.29541005769481, 80.9979044881572): [], (278.14430020767441, 93.10222829161332): [], (308.19536169036735, 93.50734363553852): [], (158.55919505568514, 144.84994422944297): [], (34.858287045015807, 109.23307590204492): [], (56.253220429463404, 41.56225601555808): [], (323.22573056965962, 93.70996589206685): [], (161.68562821466574, 72.11792937499577): [], (320.1689436977901, 127.63204836914738): [], (238.4957771345851, 63.444862874333886): [], (175.32147621735652, 67.44752535373838): [], (75.832518464571436, 22.37595372337949): [], (306.24454111079802, 132.29447409396087): [], (6.1088125925822183, 60.31085334357099): [], (132.83114712936688, 86.29003410793315): [], (268.61524382522475, 117.23538042328538): [], (353.4885862753502, 45.5729959991943): [], (174.86960015287229, 43.16289714029165): [], (7.5391436578229198, 133.12006318900518): [], (230.94079333600553, 39.06144792989868): [], (117.79848008064411, 86.0873653775847): [], (305.23166424041483, 98.32024786291163): [], (119.13327208856167, 18.086623902460392): [], (122.28652560887176, 105.55928351725456): [], (212.18918613990968, 140.725103764843): [], (24.212963711251479, 55.699766763748535): [], (113.46087033167071, 76.32167522100335): [], (223.92062461226752, 68.10287799292009): [], (285.99513407894597, 132.02168074279118): [], (119.5481553890251, 120.07786523893368): [], (42.929339104873307, 128.74697915616903): [], (210.1725431576408, 29.059279162106083): [], (200.64153486175542, 155.10201536058315): [], (101.81107793151486, 22.727473368465144): [], (60.941168427976244, 51.339396744669116): [], (328.23661723362568, 93.77751684497628): [], (90.475822308929537, 114.83458748970158): [], (108.97041403794472, 61.69808434708278): [], (96.195928751959926, 153.69795144569304): [], (77.366615402222337, 70.98095936145997): [], (96.463137323439042, 119.76676942036495): [], (320.39654821874899, 98.5246730964273): [], (317.2955861845453, 54.797316431813066): [], (5.0646441814560035, 74.86011880491724): [], (90.367271810896355, 46.87993681099482): [], (239.82953790622216, 136.24908686490116): [], (269.86038720196382, 126.95420269297779): [], (82.562203227396779, 75.90505681730521): [], (108.59485518890251, 42.26858442957247): [], (302.53917639526662, 59.4536450978459): [], (44.565023760577084, 65.68426082882353): [], (41.275964760343712, 75.3483756322254): [], (179.15393036672222, 28.640180828058384): [], (220.10558425166275, 140.83170590671872): [], (78.598261281359243, 95.2651374732329): [], (105.11442579512773, 27.639699721367478): [], (317.0538695340058, 40.223661179497554): [], (53.092996568525237, 148.2757068424041): [], (72.214771161935673, 148.53302370673245): [], (292.18999002654573, 141.80235891895774): [], (97.207002930020977, 46.972215090061894): [], (97.557791312317875, 134.3326916441649): [], (344.32519067644307, 74.5806110618045): [], (120.27576211389062, 56.995433046519615): [], (130.64982936891874, 81.40716098864402): [], (147.86039864353569, 86.49265636446148): [], (176.95960499353546, 154.78369944650936): [], (273.46339262637446, 59.06150449193615): [], (66.843413876416406, 124.21867599411047): [], (218.49055026033054, 121.41119995027866): [], (202.36835994749569, 145.43967822000215): [], (286.20774996441776, 102.916417347494): [], (342.30919363116186, 84.26082952273322): [], (81.828679583592461, 148.66239251809006): [], (117.66499299957383, 47.24822225411597): [], (195.80346871913477, 116.25410467790466): [], (168.65128583123976, 52.79231963833847): [], (49.891389232377726, 138.53944879877847): [], (108.34606600763334, 56.83453098161588): []})

    def test_myid_not_the_same_value_as_main_Node_TypeError(self):
        Tracker = deepcopy(TRACKER)
        Tracker["constants"]["nproc"] = 1
        Tracker["constants"]["myid"] = 1
        Tracker["constants"]["main_node"] = 0
        this_ali3d = path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D//main001/run000/rotated_reduced_params.txt')
        Tracker2 = deepcopy(Tracker)

        with self.assertRaises(TypeError) as cm_new:
            fu.get_stat_proj(Tracker,delta = 5,this_ali3d=this_ali3d)
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_stat_proj(Tracker2,delta = 5,this_ali3d=this_ali3d)
        self.assertEqual(cm_new.exception.message, "object of type 'int' has no len()")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)





class Test_create_random_list(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.create_random_list()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.create_random_list()
        self.assertEqual(cm_new.exception.message, "create_random_list() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        Tracker_new = deepcopy(TRACKER)
        Tracker_new["constants"]["nproc"] = 1
        Tracker_new["constants"]["myid"] = 0
        Tracker_new["constants"]["main_node"] = 0
        Tracker_new["total_stack"] = "stack"
        Tracker_new["constants"]["seed"] = 1.4
        Tracker_new["constants"]["indep_runs"] = 2
        Tracker_new["this_data_list"] = [2,3,5]

        Tracker_old = deepcopy(Tracker_new)

        return_new = fu.create_random_list(Tracker_new)
        return_old = oldfu.create_random_list(Tracker_old)
        self.assertEqual(return_new, None)
        self.assertEqual(return_new, return_old)
        self.assertTrue(numpy.array_equal(Tracker_new["this_indep_list"],Tracker_old["this_indep_list"]))

    def test_wrong_Tracker_KeyError(self):
        Tracker_new = deepcopy(TRACKER)
        Tracker_old = deepcopy(TRACKER)
        with self.assertRaises(KeyError) as cm_new:
            fu.create_random_list(Tracker_new)
        with self.assertRaises(KeyError) as cm_old:
            oldfu.create_random_list(Tracker_old)
        self.assertEqual(cm_new.exception.message, 'myid')
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)





class Test_recons_mref(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.recons_mref()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.recons_mref()
        self.assertEqual(cm_new.exception.message, "recons_mref() takes exactly 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    @unittest.skip('same problem that we have in get_shrink_data_huang')
    def test_recons_mref_true_should_return_equal_objects(self):
        Tracker =  deepcopy(TRACKER)
        Tracker["constants"]["nproc"] = 1
        Tracker["constants"]["myid"] = 0
        Tracker["constants"]["main_node"] = 0
        Tracker["number_of_groups"] = 1
        Tracker["constants"]["nnxo"] = 4  # roi
        Tracker["this_particle_list"] = [[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6],[0, 1, 2, 3, 4, 5, 6]]
        Tracker["nxinit"] = 1
        Tracker["constants"]["partstack"] =  path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, 'Initial3D//main001/run000/rotated_reduced_params.txt')
        Tracker["this_dir"] =  ABSOLUTE_PATH
        Tracker["constants"]["stack"] =  path.join(ABSOLUTE_PATH_TO_SPHIRE_DEMO_RESULTS_FOLDER, "Class2D/stack_ali2d")
        Tracker["applyctf"] = False
        Tracker["chunk_dict"] = [0, 1, 2, 3, 4, 5, 6]
        Tracker["constants"]["sym"] = "c1"
        Tracker2 = deepcopy(Tracker)
        return_new = fu.recons_mref(Tracker)
        return_old = oldfu.recons_mref(Tracker2)
        self.assertTrue(return_new[0], return_old[0])




class Test_apply_low_pass_filter(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.apply_low_pass_filter()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.apply_low_pass_filter()
        self.assertEqual(cm_new.exception.message, "apply_low_pass_filter() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        Tracker = deepcopy(TRACKER )
        Tracker["low_pass_filter"] = 0.087
        return_new = fu.apply_low_pass_filter(refvol= [deepcopy(IMAGE_2D),deepcopy(IMAGE_2D)],Tracker=Tracker)
        return_old = oldfu.apply_low_pass_filter(refvol=  [deepcopy(IMAGE_2D),deepcopy(IMAGE_2D)],Tracker=Tracker)
        for i,j in zip(return_new,return_old):
            self.assertTrue(numpy.array_equal(i.get_3dview(), j.get_3dview()))

    def test_wrong_Tracker_KeyError(self):
        Tracker = deepcopy(TRACKER )
        with self.assertRaises(KeyError) as cm_new:
            fu.apply_low_pass_filter(refvol= [deepcopy(IMAGE_2D),deepcopy(IMAGE_2D)],Tracker=Tracker)
        with self.assertRaises(KeyError) as cm_old:
            oldfu.apply_low_pass_filter(refvol= [deepcopy(IMAGE_2D),deepcopy(IMAGE_2D)],Tracker=Tracker)
        self.assertEqual(cm_new.exception.message, 'low_pass_filter')
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_refvol_empty(self):
        Tracker = deepcopy(TRACKER )
        Tracker["low_pass_filter"] = 0.087
        return_new = fu.apply_low_pass_filter(refvol=  [],Tracker=Tracker)
        return_old = oldfu.apply_low_pass_filter(refvol=  [],Tracker=Tracker)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertEqual(return_new, [])


class Test_get_groups_from_partition(unittest.TestCase):
    list_of_particles = [random.randint(0, 1000) for i in range(100)]
    group_list = [0, 1]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_groups_from_partition()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_groups_from_partition()
        self.assertEqual(cm_new.exception.message, "get_groups_from_partition() takes exactly 3 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_value(self):
        return_new = fu.get_groups_from_partition(partition =self.group_list, initial_ID_list = self.list_of_particles, number_of_groups = 2)
        return_old = oldfu.get_groups_from_partition(partition = self.group_list, initial_ID_list =self.list_of_particles, number_of_groups = 2)
        self.assertTrue(numpy.array_equal(return_new, return_old))

    def test_empty_initial_ID_list_KeyError(self):
        with self.assertRaises(KeyError) as cm_new:
            fu.get_groups_from_partition(partition =self.group_list, initial_ID_list = [], number_of_groups = 2)
        with self.assertRaises(KeyError) as cm_old:
            oldfu.get_groups_from_partition(partition =self.group_list, initial_ID_list = [], number_of_groups = 2)
        self.assertEqual(cm_new.exception.message, 0)
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_empty_partition_list_KeyError(self):
        return_new = fu.get_groups_from_partition(partition =[], initial_ID_list = self.list_of_particles, number_of_groups = 2)
        return_old = oldfu.get_groups_from_partition(partition = [], initial_ID_list =self.list_of_particles, number_of_groups = 2)
        self.assertTrue(numpy.array_equal(return_new, return_old))



class Test_get_complementary_elements(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_complementary_elements()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_complementary_elements()
        self.assertEqual(cm_new.exception.message, "get_complementary_elements() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_defalut_case(self):
        sub_data_list = [1,2,2]
        total_list = [1,2,2,4,5,6]
        return_new = fu.get_complementary_elements(total_list,sub_data_list)
        return_old = oldfu.get_complementary_elements(total_list,sub_data_list)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [4, 5, 6]))

    def test_total_list_less_data_than_sub_data_list_error_msg(self):
        sub_data_list = [1,2,2]
        total_list = [1,2]
        return_new = fu.get_complementary_elements(total_list,sub_data_list)
        return_old = oldfu.get_complementary_elements(total_list,sub_data_list)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))



class Test_update_full_dict(unittest.TestCase):
    leftover_list = {0: 'ciao_10', 1: 'ciao_11'}
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.update_full_dict()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.update_full_dict()
        self.assertEqual(cm_new.exception.message, "update_full_dict() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        Tracker_new = deepcopy(TRACKER)
        Tracker_new['full_ID_dict'] = {10: 'ciao_0', 11: 'ciao_1', 2: 'ciao_2', 3: 'ciao_3'}
        Tracker_old = deepcopy(Tracker_new)
        return_new = fu.update_full_dict(self.leftover_list,Tracker_new)
        return_old = oldfu.update_full_dict(self.leftover_list,Tracker_old)
        self.assertEqual(return_new, None)
        self.assertEqual(return_new, return_old)
        self.assertDictEqual(Tracker_new['full_ID_dict'] ,Tracker_old['full_ID_dict'] )

    def test_no_full_ID_dict_in_tracker(self):
        Tracker_new = deepcopy(TRACKER)
        Tracker_old = deepcopy(Tracker_new)
        return_new = fu.update_full_dict(self.leftover_list,Tracker_new)
        return_old = oldfu.update_full_dict(self.leftover_list,Tracker_old)
        self.assertEqual(return_new, None)
        self.assertEqual(return_new, return_old)
        self.assertDictEqual(Tracker_new['full_ID_dict'] ,Tracker_old['full_ID_dict'] )
        self.assertDictEqual(Tracker_new['full_ID_dict'],self.leftover_list)



class Test_count_chunk_members(unittest.TestCase):
    chunk_dict = [0, 1, 2, 3, 4, 5, 6]
    one_class = [0, 1, 2, 3, 4, 5, 6]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.count_chunk_members()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.count_chunk_members()
        self.assertEqual(cm_new.exception.message, "count_chunk_members() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.count_chunk_members(self.chunk_dict, self.one_class)
        return_old = oldfu.count_chunk_members(self.chunk_dict, self.one_class)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.14285714285714285, 0.8571428571428571, 7)))

    def test_one_class_empty(self):
        return_new = fu.count_chunk_members(self.chunk_dict, [])
        return_old = oldfu.count_chunk_members(self.chunk_dict, [])
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.0, 0.0, 0)))

    def test_all_empty(self):
        return_new = fu.count_chunk_members([], [])
        return_old = oldfu.count_chunk_members([], [])
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, (0.0, 0.0, 0)))

    def test_chunk_dict_empty_returns_IndexError_list_index_out_of_range(self):
        with self.assertRaises(IndexError) as cm_new:
            fu.count_chunk_members([], self.one_class)
        with self.assertRaises(IndexError) as cm_old:
            oldfu.count_chunk_members([], self.one_class)
        self.assertEqual(cm_new.exception.message, "list index out of range")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)



class Test_remove_small_groups(unittest.TestCase):
    chunk_dict = [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]]
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.remove_small_groups()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.remove_small_groups()
        self.assertEqual(cm_new.exception.message, "remove_small_groups() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.remove_small_groups(self.chunk_dict, 2)
        return_old = oldfu.remove_small_groups(self.chunk_dict, 2)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, ([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])))

    def test_too_many_minimum_number_of_objects_in_a_group(self):
        return_new = fu.remove_small_groups(self.chunk_dict, 20)
        return_old = oldfu.remove_small_groups(self.chunk_dict, 20)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [[], []] ))

    def test_empty_chunk_dict(self):
        return_new = fu.remove_small_groups([], 2)
        return_old = oldfu.remove_small_groups([], 2)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, ([], [])))

    def test_minimum_number_of_objects_in_a_group_is_zero(self):
        return_new = fu.remove_small_groups(self.chunk_dict, 0)
        return_old = oldfu.remove_small_groups(self.chunk_dict, 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, ([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6], [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]])))


class Test_get_number_of_groups(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.get_number_of_groups()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.get_number_of_groups()
        self.assertEqual(cm_new.exception.message, "get_number_of_groups() takes exactly 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.get_number_of_groups(total_particles = 1500, number_of_images_per_group = 5)
        return_old = oldfu.get_number_of_groups(total_particles = 1500, number_of_images_per_group = 5)
        self.assertEqual(return_new, return_old)

    def test_null_number_of_images_per_group_returns_ZeroDivisionError(self):
        with self.assertRaises(ZeroDivisionError) as cm_new:
            fu.get_number_of_groups(total_particles = 1500, number_of_images_per_group = 0)
        with self.assertRaises(ZeroDivisionError) as cm_old:
            oldfu.get_number_of_groups(total_particles = 1500, number_of_images_per_group = 0)
        self.assertEqual(cm_new.exception.message, "float division by zero")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_total_particles_null(self):
        return_new = fu.get_number_of_groups(total_particles = 0, number_of_images_per_group = 5)
        return_old = oldfu.get_number_of_groups(total_particles = 0, number_of_images_per_group = 5)
        self.assertEqual(return_new, return_old)
        self.assertEqual(return_new, 0)



class Test_tabessel(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.tabessel()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.tabessel()
        self.assertEqual(cm_new.exception.message, "tabessel() takes at least 2 arguments (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_case(self):
        return_new = fu.tabessel(None, None, nbel = 50)
        return_old = oldfu.tabessel(None, None, nbel = 50)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, [1.0, 0.9997910261154175, 0.9991644024848938, 0.9981207847595215, 0.9966614842414856, 0.9947881102561951, 0.9925029873847961, 0.9898086190223694, 0.9867082834243774, 0.9832054972648621, 0.979304313659668, 0.9750093221664429, 0.9703254699707031, 0.9652581810951233, 0.9598131775856018, 0.9539968371391296, 0.9478157758712769, 0.9412769675254822, 0.9343878626823425, 0.9271563291549683, 0.919590413570404, 0.9116986989974976, 0.903489887714386, 0.8949731588363647, 0.8861579895019531, 0.8770539164543152, 0.867671012878418, 0.8580194115638733, 0.8481094837188721, 0.8379519581794739, 0.8275576829910278, 0.8169375061988831, 0.8061026334762573, 0.795064389705658, 0.7838340401649475, 0.772423267364502, 0.7608435153961182, 0.7491064667701721, 0.7372238039970398, 0.7252071499824524, 0.7130682468414307, 0.7008189558982849, 0.688470721244812, 0.6760352849960327, 0.6635242104530334, 0.6509489417076111, 0.6383208632469177, 0.6256512999534607, 0.612951397895813, 0.6002320051193237]))

    def test_null_nbel(self):
        return_new = fu.tabessel(None, None, nbel = 0)
        return_old = oldfu.tabessel(None, None, nbel = 0)
        self.assertTrue(numpy.array_equal(return_new, return_old))
        self.assertTrue(numpy.array_equal(return_new, []))



class Test_nearest_proj(unittest.TestCase):
    def test_wrong_number_params_too_few_parameters_TypeError(self):
        with self.assertRaises(TypeError) as cm_new:
            fu.nearest_proj()
        with self.assertRaises(TypeError) as cm_old:
            oldfu.nearest_proj()
        self.assertEqual(cm_new.exception.message, "nearest_proj() takes at least 1 argument (0 given)")
        self.assertEqual(cm_new.exception.message, cm_old.exception.message)

    def test_default_value(self):
        """ I calculated the value looking in the code of bin/sx3dvariability.py"""
        proj_angles=[]
        for i in range(900):
            i=+0.1
            proj_angles.append([i/2, i/5,i/4,i/3, i])
        proj_angles.sort()
        proj_angles_list = numpy.full((900, 4), 0.0, dtype=numpy.float32)
        for i in range(900):
            proj_angles_list[i][0] = proj_angles[i][1]
            proj_angles_list[i][1] = proj_angles[i][2]
            proj_angles_list[i][2] = proj_angles[i][3]
            proj_angles_list[i][3] = proj_angles[i][4]
        return_new1,return_new2 = fu.nearest_proj(proj_angles_list)
        return_old1,return_old2 = oldfu.nearest_proj(proj_angles_list)
        self.assertTrue(numpy.array_equal(return_new1, return_old1))
        self.assertTrue(numpy.array_equal(return_new2, return_old2))
        self.assertTrue(numpy.array_equal(return_new1, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [2, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [4, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [7, 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [21, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [25, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [26, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [30, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [32, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [33, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [38, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [39, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [40, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [41, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [42, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [44, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [45, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [46, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [50, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [51, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [52, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [53, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [54, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [56, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [57, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [58, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [59, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [60, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [61, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [62, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [65, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [66, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [67, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [68, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [69, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [70, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [71, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [72, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [73, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [75, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [76, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [77, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [78, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [79, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [80, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [81, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [82, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [83, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [84, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [85, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [86, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [87, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [88, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [89, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [90, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99], [91, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99], [92, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99], [93, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99], [94, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99], [95, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99], [96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99], [97, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99], [98, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99], [99, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [101, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [102, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [103, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [104, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [105, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [106, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [107, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [108, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [109, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [110, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [111, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [112, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [113, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [115, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [116, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [117, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [118, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [119, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [120, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [121, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [122, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [123, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [124, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [125, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [126, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [128, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [129, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [130, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [131, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [132, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [133, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [134, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [135, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [136, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [137, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [138, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [139, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [140, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [141, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [142, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [143, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [144, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [145, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [146, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [147, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [148, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [149, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [150, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [151, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [152, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [153, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [154, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [155, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [156, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [157, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [158, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [159, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [160, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [161, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [162, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [163, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [164, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [165, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [166, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [167, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [168, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [169, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [170, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [171, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [172, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [173, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [174, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [175, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [176, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [177, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [178, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [179, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [180, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [181, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [182, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [183, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [184, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [185, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [186, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [187, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [188, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [189, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [190, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [191, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [192, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [193, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [194, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [195, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [196, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [197, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [198, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [199, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [200, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [201, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [202, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [203, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [204, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [205, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [206, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [207, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [208, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [209, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [210, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [211, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [212, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [213, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [214, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [215, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [216, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [217, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [218, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [219, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [220, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [221, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [222, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [223, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [224, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [225, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [226, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [227, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [228, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [229, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [230, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [231, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [232, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [233, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [234, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [235, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [236, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [237, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [238, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [239, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [240, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [241, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [242, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [243, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [244, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [245, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [246, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [247, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [248, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [249, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [250, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [251, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [252, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [253, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [254, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [256, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [257, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [258, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [259, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [260, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [261, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [262, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [263, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [264, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [265, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [266, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [267, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [268, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [269, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [270, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [271, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [272, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [273, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [274, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [275, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [276, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [277, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [278, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [279, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [280, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [281, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [282, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [283, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [284, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [285, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [286, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [287, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [288, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [289, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [290, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [291, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [292, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [293, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [294, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [295, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [296, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [297, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [298, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [299, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [300, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [301, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [302, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [303, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [304, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [305, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [306, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [307, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [308, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [309, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [310, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [311, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [312, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [313, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [314, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [315, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [316, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [317, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [318, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [319, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [320, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [321, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [322, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [323, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [324, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [325, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [326, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [327, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [328, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [329, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [330, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [331, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [332, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [333, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [334, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [335, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [336, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [337, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [338, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [339, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [340, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [341, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [342, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [343, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [344, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [345, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [346, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [347, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [348, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [349, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [350, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [351, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [352, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [353, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [354, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [355, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [356, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [357, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [358, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [359, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [360, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [361, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [362, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [363, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [364, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [365, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [366, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [367, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [368, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [369, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [370, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [371, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [372, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [373, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [374, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [375, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [376, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [377, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [378, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [379, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [380, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [381, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [382, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [383, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [384, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [385, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [386, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [387, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [388, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [389, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [390, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [391, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [392, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [393, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [394, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [395, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [396, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [397, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [398, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [399, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [400, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [401, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [402, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [403, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [404, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [405, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [406, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [407, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [408, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [409, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [410, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [411, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [412, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [413, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [414, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [415, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [416, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [417, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [418, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [419, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [420, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [421, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [422, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [423, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [424, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [425, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [426, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [427, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [428, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [429, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [430, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [431, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [432, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [433, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [434, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [435, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [436, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [437, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [438, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [439, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [440, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [441, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [442, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [443, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [444, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [445, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [446, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [447, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [448, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [449, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [450, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [451, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [452, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [453, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [454, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [455, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [456, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [457, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [458, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [459, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [460, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [461, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [462, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [463, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [464, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [465, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [466, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [467, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [468, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [469, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [470, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [471, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [472, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [473, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [474, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [475, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [476, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [477, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [478, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [479, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [480, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [481, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [482, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [483, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [484, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [485, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [486, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [487, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [488, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [489, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [490, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [491, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [492, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [493, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [494, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [495, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [496, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [497, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [498, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [499, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [500, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [501, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [502, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [503, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [504, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [505, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [506, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [507, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [508, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [509, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [510, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [511, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [512, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [513, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [514, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [515, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [516, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [517, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [518, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [519, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [520, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [521, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [522, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [523, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [524, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [525, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [526, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [527, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [528, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [529, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [530, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [531, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [532, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [533, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [534, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [535, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [536, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [537, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [538, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [539, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [540, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [541, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [542, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [543, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [544, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [545, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [546, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [547, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [548, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [549, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [550, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [551, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [552, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [553, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [554, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [555, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [556, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [557, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [558, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [559, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [560, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [561, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [562, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [563, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [564, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [565, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [566, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [567, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [568, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [569, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [570, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [571, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [572, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [573, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [574, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [575, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [576, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [577, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [578, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [579, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [580, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [581, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [582, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [583, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [584, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [585, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [586, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [587, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [588, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [589, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [590, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [591, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [592, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [593, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [594, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [595, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [596, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [597, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [598, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [599, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [600, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [601, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [602, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [603, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [604, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [605, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [606, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [607, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [608, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [609, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [610, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [611, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [612, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [613, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [614, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [615, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [616, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [617, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [618, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [619, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [620, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [621, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [622, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [623, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [624, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [625, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [626, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [627, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [628, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [629, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [630, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [631, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [632, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [633, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [634, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [635, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [636, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [637, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [638, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [639, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [640, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [641, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [642, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [643, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [644, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [645, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [646, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [647, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [648, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [649, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [650, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [651, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [652, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [653, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [654, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [655, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [656, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [657, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [658, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [659, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [660, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [661, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [662, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [663, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [664, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [665, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [666, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [667, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [668, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [669, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [670, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [671, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [672, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [673, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [674, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [675, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [676, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [677, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [678, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [679, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [680, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [681, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [682, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [683, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [684, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [685, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [686, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [687, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [688, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [689, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [690, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [691, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [692, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [693, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [694, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [695, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [696, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [697, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [698, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [699, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [700, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [701, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [702, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [703, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [704, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [705, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [706, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [707, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [708, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [709, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [710, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [711, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [712, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [713, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [714, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [715, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [716, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [717, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [718, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [719, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [720, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [721, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [722, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [723, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [724, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [725, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [726, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [727, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [728, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [729, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [730, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [731, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [732, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [733, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [734, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [735, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [736, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [737, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [738, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [739, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [740, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [741, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [742, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [743, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [744, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [745, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [746, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [747, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [748, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [749, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [750, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [751, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [752, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [753, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [754, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [755, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [756, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [757, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [758, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [759, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [760, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [761, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [762, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [763, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [764, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [765, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [766, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [767, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [768, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [769, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [770, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [771, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [772, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [773, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [774, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [775, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [776, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [777, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [778, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [779, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [780, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [781, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [782, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [783, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [784, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [785, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [786, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [787, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [788, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [789, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [790, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [791, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [792, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [793, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [794, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [795, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [796, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [797, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [798, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [799, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [800, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [801, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [802, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [803, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [804, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [805, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [806, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [807, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [808, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [809, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [810, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [811, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [812, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [813, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [814, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [815, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [816, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [817, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [818, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [819, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [820, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [821, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [822, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [823, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [824, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [825, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [826, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [827, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [828, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [829, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [830, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [831, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [832, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [833, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [834, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [835, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [836, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [837, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [838, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [839, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [840, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [841, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [842, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [843, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [844, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [845, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [846, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [847, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [848, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [849, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [850, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [851, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [852, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [853, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [854, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [855, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [856, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [857, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [858, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [859, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [860, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [861, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [862, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [863, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [864, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [865, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [866, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [867, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [868, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [869, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [870, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [871, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [872, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [873, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [874, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [875, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [876, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [877, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [878, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [879, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [880, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [881, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [882, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [883, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [884, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [885, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [886, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [887, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [888, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [889, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [890, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [891, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [892, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [893, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [894, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [895, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [896, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [897, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [898, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [899, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]]))
        self.assertTrue(numpy.array_equal(return_new2, [[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]]))



















import shutil
@unittest.skip("Adnan reference tests")
class Test_lib_utilities_compare(unittest.TestCase):


    def test_amoeba_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.amoeba")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (var, scale, func, ftolerance, xtolerance, itmax , data) = argum[0]

        return_new = fu.amoeba (var, scale, func, ftolerance, xtolerance, itmax , data)
        return_old = oldfu.amoeba (var, scale, func, ftolerance, xtolerance, itmax , data)

        self.assertTrue(return_new, return_old)

    def test_compose_transform2_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.compose_transform2")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (alpha1, sx1, sy1, scale1, alpha2, sx2, sy2, scale2) = argum[0]

        return_new = fu.compose_transform2(alpha1, sx1, sy1, scale1, alpha2, sx2, sy2, scale2)
        return_old = oldfu.compose_transform2(alpha1, sx1, sy1, scale1, alpha2, sx2, sy2, scale2)

        self.assertTrue(return_new, return_old)


    def test_compose_transform3_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.compose_transform3")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (phi1,theta1,psi1,sx1,sy1,sz1,scale1,phi2,theta2,psi2,sx2,sy2,sz2,scale2) = argum[0]

        return_new = fu.compose_transform3(phi1,theta1,psi1,sx1,sy1,sz1,scale1,phi2,theta2,psi2,sx2,sy2,sz2,scale2)
        return_old = oldfu.compose_transform3(phi1,theta1,psi1,sx1,sy1,sz1,scale1,phi2,theta2,psi2,sx2,sy2,sz2,scale2)

        self.assertTrue(return_new, return_old)


    def test_combine_params2_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.combine_params2")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (alpha1, sx1, sy1, mirror1, alpha2, sx2, sy2, mirror2) = argum[0]

        return_new = fu.combine_params2(alpha1, sx1, sy1, mirror1, alpha2, sx2, sy2, mirror2)
        return_old = oldfu.combine_params2(alpha1, sx1, sy1, mirror1, alpha2, sx2, sy2, mirror2)

        self.assertTrue(return_new, return_old)


    def test_inverse_transform2_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.inverse_transform2")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (alpha, tx, ty) = argum[0]

        return_new = fu.inverse_transform2(alpha, tx, ty)
        return_old = oldfu.inverse_transform2(alpha, tx, ty)

        self.assertTrue(return_new, return_old)


    def test_drop_image_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.drop_image")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (imagename, destination) = argum[0]

        return_new = fu.drop_image(imagename, destination)
        return_old = oldfu.drop_image(imagename, destination)

        if return_new is not None   and  return_old is not None:
            self.assertTrue(return_new, return_old)


    def test_get_im_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_im")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (stackname, im) = argum[0]

        stackname = 'bdb:Substack/isac_substack'

        return_new = fu.get_im(stackname, im)
        return_old = oldfu.get_im(stackname, im)

        self.assertTrue(return_new, return_old)


    def test_get_image_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_image")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (imagename,) = argum[0]

        return_new = fu.get_image(imagename)
        return_old = oldfu.get_image(imagename)

        self.assertTrue(return_new, return_old)


    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    # def test_get_image_data_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_image_data")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0][0])
    #
    #     (image) = argum[0][0]
    #
    #     return_new = fu.get_image_data(image)
    #     return_old = oldfu.get_image_data(image)
    #
    #     self.assertTrue(numpy.array_equal(return_new, return_old))


    def test_get_symt_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_symt")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (symmetry,) = argum[0]

        return_new = fu.get_symt(symmetry)
        return_old = oldfu.get_symt(symmetry)

        self.assertTrue(return_new, return_old)


    def test_get_input_from_string_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_input_from_string")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (str_input) = argum[0][0]

        return_new = fu.get_input_from_string(str_input)
        return_old = oldfu.get_input_from_string(str_input)

        self.assertTrue(return_new, return_old)


    def test_model_circle_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.model_circle")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (r, nx, ny) = argum[0]

        return_new = fu.model_circle(r, nx, ny)
        return_old = oldfu.model_circle(r, nx, ny)

        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))


    def test_model_blank_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.model_blank")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (nx,ny) = argum[0]

        return_new = fu.model_blank(nx,ny)
        return_old = oldfu.model_blank(nx,ny)

        self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))


    def test_peak_search_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.peak_search")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (e,) = argum[0]

        return_new = fu.peak_search(e )
        return_old = oldfu.peak_search(e )

        self.assertTrue(return_new, return_old)



    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    # def test_pad_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.pad")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (image_to_be_padded, new_nx, new_ny, new_nz,off_center_nx) = argum[0]
    #
    #     return_new = fu.pad(image_to_be_padded, new_nx, new_ny, new_nz)
    #     return_old = oldfu.pad(image_to_be_padded, new_nx, new_ny, new_nz)
    #
    #     self.assertTrue(numpy.array_equal(return_new.get_3dview(), return_old.get_3dview()))


    def test_chooseformat_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.chooseformat")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (t) = argum[0][0]

        return_new = fu.chooseformat(t)
        return_old = oldfu.chooseformat(t)

        self.assertEqual(return_new, return_old)

    def test_read_text_row_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.read_text_row")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (fnam) = argum[0][0]

        return_new = fu.read_text_row(fnam)
        return_old = oldfu.read_text_row(fnam)

        self.assertEqual(return_new, return_old)


    def test_write_text_row_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.write_text_row")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data, filename) = argum[0]

        return_new = fu.write_text_row(data, filename)
        return_old = oldfu.write_text_row(data, filename)

        self.assertEqual(return_new, return_old)


    def test_read_text_file_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.read_text_file")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (filename,) = argum[0]

        return_new = fu.read_text_file(filename)
        return_old = oldfu.read_text_file(filename)

        self.assertEqual(return_new, return_old)


    def test_write_text_file_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.write_text_file")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data, filename) = argum[0]

        return_new = fu.write_text_file(data, filename)
        return_old = oldfu.write_text_file(data, filename)

        self.assertEqual(return_new, return_old)


    def test_reshape_1d_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.reshape_1d")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (input_object, length_current,Pixel_size_current) = argum[0]

        return_new = fu.reshape_1d(input_object, length_current,Pixel_size_current)
        return_old = oldfu.reshape_1d(input_object, length_current,Pixel_size_current)

        self.assertEqual(return_new, return_old)


    def test_estimate_3D_center_MPI_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.estimate_3D_center_MPI")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (data, nima, myid, number_of_proc, main_node) = argum[0]

        return_new = fu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)
        return_old = oldfu.estimate_3D_center_MPI(data, nima, myid, number_of_proc, main_node)

        self.assertTrue(return_new, return_old)


    def test_rotate_3D_shift_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.rotate_3D_shift")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (data, shift3d) = argum[0]

        return_new = fu.rotate_3D_shift(data, shift3d)
        return_old = oldfu.rotate_3D_shift(data, shift3d)

        if return_new is not None and return_old is not None:
            self.assertTrue(return_new, return_old)
        else:
            print('returns None')


    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    # def test_reduce_EMData_to_root_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.reduce_EMData_to_root")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (data, myid,main_node) = argum[0]
    #
    #     return_new = fu.reduce_EMData_to_root(data, myid,main_node = 0)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.reduce_EMData_to_root(data, myid,main_node = 0)
    #
    #     mpi_barrier(MPI_COMM_WORLD)
    #     self.assertEqual(return_new, return_old)


    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    # def test_bcast_compacted_EMData_all_to_all_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.bcast_compacted_EMData_all_to_all")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (list_of_em_objects, myid ) = argum[0]
    #
    #     return_new = fu.bcast_compacted_EMData_all_to_all(list_of_em_objects, myid)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.bcast_compacted_EMData_all_to_all(list_of_em_objects, myid)
    #
    #     mpi_barrier(MPI_COMM_WORLD)
    #     self.assertEqual(return_new, return_old)



    def test_gather_compacted_EMData_to_root_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.gather_compacted_EMData_to_root")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (no_of_emo, list_of_emo, myid) = argum[0]

        return_new = fu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid)
        return_old = oldfu.gather_compacted_EMData_to_root(no_of_emo, list_of_emo, myid)

        self.assertEqual(return_new, return_old)


    def test_bcast_EMData_to_all_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.bcast_EMData_to_all")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (tavg, myid, source_node, ) = argum[0]

        return_new = fu.bcast_EMData_to_all(tavg, myid, source_node)
        mpi_barrier(MPI_COMM_WORLD)

        return_old = oldfu.bcast_EMData_to_all(tavg, myid, source_node)
        mpi_barrier(MPI_COMM_WORLD)

        self.assertEqual(return_new, return_old)



    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_send_EMData_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.send_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (img, dst, tag, comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.send_EMData(img, dst, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)

    """  Can only be tested on the mpi. Wait too long on normal workstation"""
    # def test_recv_EMData_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.recv_EMData")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (src, tag,comm) = argum[0]
    #     tag = 0
    #
    #     return_new = fu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     return_old = oldfu.recv_EMData(src, tag)
    #     mpi_barrier(MPI_COMM_WORLD)
    #
    #     self.assertEqual(return_new, return_old)


    def test_bcast_number_to_all_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.bcast_number_to_all")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (number_to_send, source_node, mpi_comm) = argum[0]

        return_new = fu.bcast_number_to_all(number_to_send, source_node)
        mpi_barrier(MPI_COMM_WORLD)

        return_old = oldfu.bcast_number_to_all(number_to_send, source_node)
        mpi_barrier(MPI_COMM_WORLD)

        self.assertEqual(return_new, return_old)


    def test_print_msg_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.print_msg")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (msg) = argum[0][0]

        return_new = fu.print_msg(msg)

        return_old = oldfu.print_msg(msg)

        self.assertEqual(return_new, return_old)


    def test_file_type_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.file_type")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (name) = argum[0][0]

        return_new = fu.file_type(name)

        return_old = oldfu.file_type(name)

        self.assertEqual(return_new, return_old)



    def test_get_params2D_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params2D")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])
        print(argum)

        (ima,) = argum[0]

        return_new = fu.get_params2D(ima )

        return_old = oldfu.get_params2D(ima)

        self.assertEqual(return_new, return_old)

    def test_set_params2D_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.set_params2D")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (ima,p, xform) = argum[0]

        return_new = fu.set_params2D(ima,p)

        return_old = oldfu.set_params2D(ima,p)

        self.assertEqual(return_new, return_old)


    def test_get_params3D_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params3D")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (ima,) = argum[0]

        return_new = fu.get_params3D(ima )

        return_old = oldfu.get_params3D(ima)

        self.assertEqual(return_new, return_old)


    def test_set_params3D_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.set_params3D")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (ima,p) = argum[0]

        return_new = fu.set_params3D(ima,p)

        return_old = oldfu.set_params3D(ima,p)

        self.assertEqual(return_new, return_old)


    def test_get_params_proj_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_params_proj")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (ima,) = argum[0]

        return_new = fu.get_params_proj(ima )

        return_old = oldfu.get_params_proj(ima)

        self.assertEqual(return_new, return_old)


    def test_set_params_proj_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.set_params_proj")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (ima,p) = argum[0]

        return_new = fu.set_params_proj(ima,p)

        return_old = oldfu.set_params_proj(ima,p)

        self.assertEqual(return_new, return_old)


    def test_get_latest_directory_increment_value_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_latest_directory_increment_value")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (directory_location, directory_name) = argum[0]

        return_new = fu.get_latest_directory_increment_value(directory_location, directory_name)

        return_old = oldfu.get_latest_directory_increment_value(directory_location, directory_name)

        self.assertEqual(return_new, return_old)


    def test_same_ctf_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.same_ctf")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (c1,c2) = argum[0]

        return_new = fu.same_ctf(c1,c2)

        return_old = oldfu.same_ctf(c1,c2)

        self.assertEqual(return_new, return_old)



    def test_generate_ctf_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.generate_ctf")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (p) = argum[0][0]

        return_new = fu.generate_ctf(p)

        return_old = oldfu.generate_ctf(p)

        self.assertTrue(return_new, return_old)


    def test_delete_bdb_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.delete_bdb")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (name) = argum[0][0]

        return_new = fu.delete_bdb(name)

        return_old = oldfu.delete_bdb(name)

        if return_new is not None and return_old is not None:
            self.assertTrue(return_new, return_old)
        else:
            print('returns None')



    def test_getfvec_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.getfvec")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (phi, tht) = argum[0]

        return_new = fu.getfvec(phi, tht)

        return_old = oldfu.getfvec(phi, tht)

        self.assertEqual(return_new, return_old)


    def test_nearest_fang_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.nearest_fang")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (vecs, phi, tht) = argum[0]

        return_new = fu.nearest_fang(vecs, phi, tht)

        return_old = oldfu.nearest_fang(vecs, phi, tht)

        self.assertEqual(return_new, return_old)


    def test_nearest_many_full_k_projangles_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.nearest_many_full_k_projangles")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (reference_normals, angles) = argum[0]
        symclass = argum[1]['sym_class']
        howmany = argum[1]['howmany']

        return_new = fu.nearest_many_full_k_projangles(reference_normals, angles, howmany, symclass)

        return_old = oldfu.nearest_many_full_k_projangles(reference_normals, angles, howmany, symclass)

        self.assertEqual(return_new, return_old)


    def test_angles_to_normals_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.angles_to_normals")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum)

        (angles) = argum[0][0]

        return_new = fu.angles_to_normals(angles)

        return_old = oldfu.angles_to_normals(angles)

        self.assertEqual(return_new, return_old)

    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    """  Test works with sym = "c1 but fails with sym = "c5"  """
    def test_angular_occupancy_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.angular_occupancy")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        # print(argum[0])


        (params, angstep, sym, method) = argum[0]

        print("params = ", params)
        print("angstep = ", angstep)
        print("sym = ", sym)
        print("method = ", method)

        return_new = fu.angular_occupancy(params, angstep, sym, method)

        return_old = oldfu.angular_occupancy(params, angstep, sym, method)

        self.assertEqual(return_new, return_old)


    def test_get_pixel_size_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_pixel_size")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (img,) = argum[0]

        return_new = fu.get_pixel_size(img)

        return_old = oldfu.get_pixel_size(img)

        self.assertEqual(return_new, return_old)

    def test_set_pixel_size_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.set_pixel_size")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (img,pixel_size) = argum[0]

        return_new = fu.set_pixel_size(img,pixel_size)

        return_old = oldfu.set_pixel_size(img,pixel_size)

        self.assertEqual(return_new, return_old)

    def test_lacos_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.lacos")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (x,) = argum[0]

        return_new = fu.lacos(x)

        return_old = oldfu.lacos(x)

        self.assertEqual(return_new, return_old)

    """
      This function test works but takes too much time that is why for the time being it is
       commented,  will uncomment it once everything is done 
    """
    # def test_nearest_proj_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.nearest_proj")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (proj_ang,img_per_grp,List) = argum[0]
    #
    #     return_new = fu.nearest_proj(proj_ang,img_per_grp,List)
    #
    #     return_old = oldfu.nearest_proj(proj_ang,img_per_grp,List)
    #
    #     self.assertEqual(return_new, return_old)


    def test_findall_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.findall")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (value, L) = argum[0]

        return_new = fu.findall(value, L)

        return_old = oldfu.findall(value, L)

        self.assertEqual(return_new, return_old)


    def test_pack_message_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.pack_message")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data,) = argum[0]

        return_new = fu.pack_message(data)

        return_old = oldfu.pack_message(data)

        self.assertEqual(return_new, return_old)


    def test_unpack_message_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.unpack_message")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data,) = argum[0]

        return_new = fu.unpack_message(data)

        return_old = oldfu.unpack_message(data)

        self.assertEqual(return_new, return_old)


    def test_update_tag_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.update_tag")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (communicator, target_rank) = argum[0]

        return_new = fu.update_tag(communicator, target_rank)

        return_old = oldfu.update_tag(communicator, target_rank)

        self.assertEqual(return_new, return_old)


    def test_wrap_mpi_send_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_send")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data, destination,communicator) = argum[0]

        return_new = fu.wrap_mpi_send(data, destination)

        return_old = oldfu.wrap_mpi_send(data, destination)

        self.assertEqual(return_new, return_old)


    "Can only test on cluster , cannot work on workstation"
    # def test_wrap_mpi_recv_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_recv")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (data, communicator) = argum[0]
    #
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_new = fu.wrap_mpi_recv(data, communicator)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_recv(data, communicator)
    #
    #     self.assertEqual(return_new, return_old)


    def test_wrap_mpi_bcast_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_bcast")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data, root, communicator) = argum[0]

        return_new = fu.wrap_mpi_bcast(data, root)

        return_old = oldfu.wrap_mpi_bcast(data, root)

        self.assertEqual(return_new, return_old)


    def test_wrap_mpi_gatherv_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_gatherv")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data, root, communicator) = argum[0]

        return_new = fu.wrap_mpi_gatherv(data, root)

        return_old = oldfu.wrap_mpi_gatherv(data, root)

        self.assertEqual(return_new, return_old)


    def test_get_colors_and_subsets_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_colors_and_subsets")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (main_node, mpi_comm, my_rank, shared_comm, sh_my_rank, masters) = argum[0]

        mpi_comm = MPI_COMM_WORLD
        main_node = 0
        my_rank = mpi_comm_rank(mpi_comm)
        mpi_size = mpi_comm_size(mpi_comm)
        shared_comm = mpi_comm_split_type(mpi_comm, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)
        sh_my_rank = mpi_comm_rank(shared_comm)
        masters = mpi_comm_split(mpi_comm, sh_my_rank == main_node, my_rank)
        shared_comm = mpi_comm_split_type(mpi_comm, MPI_COMM_TYPE_SHARED, 0, MPI_INFO_NULL)

        return_new = fu.get_colors_and_subsets(main_node, mpi_comm, my_rank, shared_comm, sh_my_rank,masters)

        return_old = oldfu.get_colors_and_subsets(main_node, mpi_comm, my_rank, shared_comm, sh_my_rank,masters)

        self.assertEqual(return_new, return_old)

        """ Can only be tested in mpi not on workstation   """
    # def test_wrap_mpi_split_true_should_return_equal_objects(self):
    #     filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.wrap_mpi_split")
    #     with open(filepath, 'rb') as rb:
    #         argum = pickle.load(rb)
    #
    #     print(argum[0])
    #
    #     (comm, no_of_groups) = argum[0]
    #
    #     return_new = fu.wrap_mpi_split(comm, no_of_groups)
    #     mpi_barrier(MPI_COMM_WORLD)
    #     return_old = oldfu.wrap_mpi_split(comm, no_of_groups)
    #
    #     self.assertEqual(return_new, return_old)


    def test_get_dist_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.get_dist")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (c1, c2) = argum[0]

        return_new = fu.get_dist(c1, c2)

        return_old = oldfu.get_dist(c1, c2)

        self.assertEqual(return_new, return_old)


    def test_combinations_of_n_taken_by_k_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.combinations_of_n_taken_by_k")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (n, k) = argum[0]

        return_new = fu.combinations_of_n_taken_by_k(n, k)

        return_old = oldfu.combinations_of_n_taken_by_k(n, k)

        self.assertEqual(return_new, return_old)


    def test_cmdexecute_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.cmdexecute")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        # print(argum[0])

        (cmd,) = argum[0]

        dirname = cmd.split(' ')[1]

        current_path = os.getcwd()
        if os.path.isdir(dirname):
            print('directory exits')
            print('removing it')
            shutil.rmtree(dirname)

        return_new = fu.cmdexecute(cmd)

        if os.path.isdir(dirname):
            print('directory exits')
            print('removing it')
            shutil.rmtree(dirname)

        return_old = oldfu.cmdexecute(cmd)

        self.assertEqual(return_new, return_old)


    def test_if_error_then_all_processes_exit_program_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.if_error_then_all_processes_exit_program")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (error_status,) = argum[0]

        return_new = fu.if_error_then_all_processes_exit_program(error_status)

        return_old = oldfu.if_error_then_all_processes_exit_program(error_status)

        self.assertEqual(return_new, return_old)

    def test_getindexdata_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.getindexdata")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (stack, partids, partstack, myid, nproc) = argum[0]

        return_new = fu.getindexdata(stack, partids, partstack, myid, nproc)

        return_old = oldfu.getindexdata(stack, partids, partstack, myid, nproc)

        self.assertTrue(return_new, return_old)

    def test_convert_json_fromunicode_true_should_return_equal_objects(self):
        filepath = os.path.join(ABSOLUTE_PATH, "pickle files/utilities/utilities.convert_json_fromunicode")
        with open(filepath, 'rb') as rb:
            argum = pickle.load(rb)

        print(argum[0])

        (data,) = argum[0]

        return_new = fu.convert_json_fromunicode(data)

        return_old = oldfu.convert_json_fromunicode(data)

        self.assertEqual(return_new, return_old)

if __name__ == '__main__':
    unittest.main()
