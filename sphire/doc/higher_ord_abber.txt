~~NOTOC~~

===== sp_higher_ord_abber =====
Relion CTF Refinement call: Apply relion ctf refinement for higher order aberration correction

\\
===== Usage =====

Usage in command line

  sp_higher_ord_abber.py post_refine_folder output_folder --estimate_magnification --estimate_beamtilt --estimate_trefoil \
   --estimate_order_aberation --perform_CTF_params_fit --fit_defocus_micrograph --fit_defocus_particle \
    --fit_astigmatism_micrograph  --fit_astigmatism_particle --fit_bfactor_micrograph --fit_bfactor_particle \
     --fit_phase_shift_micrograph --fit_phase_shift_particle --min_res_fit --submission_template --submission_command --relion_mpirun_executable --relion_polishing_executable --mpi_procs --no_of_threads
  
\\
===== Typical usage =====

\\ __1. Applying polishing using exisiting training data __:

  sp_higher_ord_abber.py 12_POSTREFINER --submission_template='asdf' --submission_command='fasd' --mpi_procs=1 --no_of_threads=12

Note: The above case will use the optimize parameters from the training part.

\\ __2. Applying training part of the polishing __:

  sp_higher_ord_abber.py 12_POSTREFINER --mpi_procs=1 --no_of_threads=12

Note: In case you want to do training part of polishing then dont provide the optimize parameter txt file

\\
===== Input =====
=== Main Parameters ===
  ; post_refine_folder : Post Refine Folder: Input folder is the directory where the results of the post refiner are present. Python routine automatically locates all the required files used for polishing. (default required string)
 ; output_folder : Output folder : Output folder is the directory where all the results of the polishing are saved. (default required string)

  ;%%--%%estimate_magnification : estimate_magnification  :  (default False)
  ; %%--%%estimate_beamtilt : estimate_beamtilt :  (default False)
  ; %%--%%estimate_trefoil : estimate_trefoil : (default False)
  ; %%--%%estimate_order_aberation : estimate_order_aberation :  . (default False)
  ; %%--%%perform_CTF_params_fit : perform_CTF_params_fit : . (default False)
  ; %%--%%fit_defocus_micrograph : fit_defocus_micrograph : . (default False)
  ; %%--%%fit_defocus_particle : fit_defocus_particle : . (default False)
  ; %%--%%fit_astigmatism_micrograph : fit_astigmatism_micrograph : . (default False)
  ; %%--%%fit_astigmatism_particle : fit_astigmatism_particle : . (default False)
  ; %%--%%fit_bfactor_micrograph : fit_bfactor_micrograph : . (default False)
  ; %%--%%fit_bfactor_particle : fit_bfactor_particle : . (default False)
  ; %%--%%fit_phase_shift_micrograph : fit_phase_shift_micrograph : . (default False)
  ; %%--%%fit_phase_shift_particle : fit_phase_shift_particle : . (default False)
  ; %%--%%min_res_fit : min_res_fit : . (default 30.0)
  ; %%--%%submission_template : Submission template : Submission template for mpi command (default none)
  ; %%--%%submission_command : Submission command : Submission commmand for cluster (default sbatch)
  ; %%--%%relion_mpirun_executable : relion mpirun executable : Since there can be more than one mpirun environment installed on a workstation or on a cluster. It can be sometimes necessary to provide the relion specific mpirun executable. Just type which mpirun -a in a terminal and choose the one which relion requies. (default mpirun)
  ; %%--%%relion_ctfrefine_executable : relion ctf refine executable : Similar to the issue of relion mpirun executable, it can be sometime necessary to provide the specific relion ctf refine executable also. Just type which relion_ctf_refine_mpi and copy the path here. (default relion_ctf_refine_mpi)
  ; %%--%%mpi_procs : MPI Procs : The number of MPI processors used for Relion multiprocessing. (default 1)
  ; %%--%%no_of_threads : number of threads : The number of threads use during the polishing. (default 1)

\\
===== Output =====
The output is the result of the polishing saved in the output_folder directory.

\\
=== List of Output Files ===
|| **File Name** || **Discription** ||

\\
==== Developer Notes ====
=== 2020/01/06 Adnan Ali ===
  * Let me know if you find some bugs or want some modifications or improvement in the implementation.
\\
==== Reference ====
Jasenko Zivanov, Takanori Nakane and Sjors H W Scheres: A Bayesian approach to beam-induced motion correction in cryo-EM single-particle analysis, ''IUCrJ'' 6, 5-17, January, 2019.

\\
==== Author / Maintainer ====
Jasenko Zivanov, Takanori Nakane and Sjors H W Scheres

\\
==== Keywords ====
Category 1:: APPLICATIONS

\\
==== Files ====
sphire/bin/sp_higher_ord_abber.py

\\
==== Maturity ====
Beta:: Under evaluation and testing. Please let us know if there are any bugs.

\\
==== Bugs ====
None right now.

\\
